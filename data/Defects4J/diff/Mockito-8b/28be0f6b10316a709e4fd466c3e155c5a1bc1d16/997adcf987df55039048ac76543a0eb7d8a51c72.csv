is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,134,ublic String getTypedArgs() {
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,135,tringBuilder result = new StringBuilder();
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,136,lass<?>[] types = getMethod().getParameterTypes();
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,137,or (int i = 0; i < types.length; i++) {
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,138,lass<?> paramType = types[i];
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,139,"esult.append(TAB).append(i+1).append("": "").append(paramType);"
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,140,f (i != types.length-1) {
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,141,"esult.append(""\n"");"
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,144,eturn result.toString();
False,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,154,"eturn TAB + ""<no arguments>"";"
True,src/org/mockito/internal/invocation/Invocation.java,src/org/mockito/internal/invocation/Invocation.java,141,"return TAB + ""<NO ARGUMENTS>"";"
False,src/org/mockito/internal/invocation/InvocationMatcher.java,src/org/mockito/internal/invocation/InvocationMatcher.java,60,ublic boolean differsWithArgumentTypes(Invocation actual) {
True,src/org/mockito/internal/invocation/InvocationMatcher.java,src/org/mockito/internal/invocation/InvocationMatcher.java,60,public boolean isOverloadedVersionOf(Invocation actual) {
False,src/org/mockito/internal/invocation/InvocationMatcher.java,src/org/mockito/internal/invocation/InvocationMatcher.java,87,ublic String getTypedArgs() {
False,src/org/mockito/internal/invocation/InvocationMatcher.java,src/org/mockito/internal/invocation/InvocationMatcher.java,88,eturn invocation.getTypedArgs();
True,src/org/mockito/internal/invocation/InvocationsFinder.java,src/org/mockito/internal/invocation/InvocationsFinder.java,51,"//TODO shit code - refactor to InvocationMatcher wanted.isSimilar(invocation) and add test for overloading check, make it also efficient"
True,src/org/mockito/internal/invocation/InvocationsFinder.java,src/org/mockito/internal/invocation/InvocationsFinder.java,58,boolean isOverloaded = wanted.isOverloadedVersionOf(invocation);
False,src/org/mockito/internal/invocation/InvocationsFinder.java,src/org/mockito/internal/invocation/InvocationsFinder.java,58,f (methodNameEquals && isUnverified && mockIsTheSame ) {
True,src/org/mockito/internal/invocation/InvocationsFinder.java,src/org/mockito/internal/invocation/InvocationsFinder.java,60,if (methodNameEquals && isUnverified && mockIsTheSame && !isOverloaded) {
False,src/org/mockito/internal/invocation/InvocationsPrinter.java,src/org/mockito/internal/invocation/InvocationsPrinter.java,17,f (wantedInvocation.differsWithArgumentTypes(actualInvocation)) {
False,src/org/mockito/internal/invocation/InvocationsPrinter.java,src/org/mockito/internal/invocation/InvocationsPrinter.java,18,antedArgs = wantedInvocation.getTypedArgs();
False,src/org/mockito/internal/invocation/InvocationsPrinter.java,src/org/mockito/internal/invocation/InvocationsPrinter.java,19,ctualArgs = actualInvocation.getTypedArgs();
False,src/org/mockito/internal/invocation/InvocationsPrinter.java,src/org/mockito/internal/invocation/InvocationsPrinter.java,20, else {
False,src/org/mockito/internal/invocation/InvocationsPrinter.java,src/org/mockito/internal/invocation/InvocationsPrinter.java,21,antedArgs = wantedInvocation.getArgs();
False,src/org/mockito/internal/invocation/InvocationsPrinter.java,src/org/mockito/internal/invocation/InvocationsPrinter.java,22,ctualArgs = actualInvocation.getArgs();
True,src/org/mockito/internal/invocation/InvocationsPrinter.java,src/org/mockito/internal/invocation/InvocationsPrinter.java,17,wantedArgs = wantedInvocation.getArgs();
True,src/org/mockito/internal/invocation/InvocationsPrinter.java,src/org/mockito/internal/invocation/InvocationsPrinter.java,18,actualArgs = actualInvocation.getArgs();
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,7,mport static org.junit.Assert.assertEquals;
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,9,mport java.lang.reflect.Method;
True,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,7,import static org.junit.Assert.*;
True,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,15,//TODO kill it
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,28,lass Super {
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,29,oid test(Object o) {};
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,32,lass Sub extends Super {
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,33,oid test(String s) {};
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,36,Test
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,37,ublic void shouldPrintTypesWhenOnlyTypesDiffer() throws Exception {
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,38,"ethod methodOne = Super.class.getDeclaredMethod(""test"", Object.class);"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,39,"ethod methodTwo = Sub.class.getDeclaredMethod(""test"", String.class);"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,41,nvocationMatcher invocationOne = new InvocationBuilder().method(methodOne).toInvocationMatcher();
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,42,nvocation invocationTwo = new InvocationBuilder().method(methodTwo).toInvocation();
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,43,"nvocationsPrinter printer = new InvocationsPrinter(invocationOne, invocationTwo);"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,45,"ssertEquals(invocationOne.toString(), invocationTwo.toString());"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,47,"ssertEquals(""Object.test(...)"", printer.getWanted().toString());"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,48,"ssertEquals(""    1: class java.lang.Object"", printer.getWantedArgs().toString());"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,49,"ssertEquals(""    1: class java.lang.String"", printer.getActualArgs().toString());"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,52,lass Dummy {
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,53,oid test(String ... s) {};
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,54,oid test(Object ... o) {};
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,57,Test
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,58,ublic void shouldPrintVarargTypesWhenOnlyTypesDiffer() throws Exception {
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,59,"ethod methodOne = Dummy.class.getDeclaredMethod(""test"", new Object[]{}.getClass());"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,60,"ethod methodTwo = Dummy.class.getDeclaredMethod(""test"", new String[]{}.getClass());"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,62,nvocationMatcher invocationOne = new InvocationBuilder().method(methodOne).arg(new Object[]{}).toInvocationMatcher();
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,63,nvocation invocationTwo = new InvocationBuilder().method(methodTwo).arg(new String[]{}).toInvocation();
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,64,"nvocationsPrinter printer = new InvocationsPrinter(invocationOne, invocationTwo);"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,66,"ssertEquals(invocationOne.toString(), invocationTwo.toString());"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,68,"ssertEquals(""Object.test(...)"", printer.getWanted().toString());"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,69,"ssertEquals(""    1: class [Ljava.lang.Object;"", printer.getWantedArgs().toString());"
False,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,test/org/mockito/internal/invocation/InvocationsPrinterTest.java,70,"ssertEquals(""    1: class [Ljava.lang.String;"", printer.getActualArgs().toString());"
False,test/org/mockitousage/MultiThreadedTest.java,test/org/mockitousage/MultiThreadedTest.java,44,mport org.mockitousage.binding.IncorectBindingPuzzleFixedTest;
True,test/org/mockitousage/MultiThreadedTest.java,test/org/mockitousage/MultiThreadedTest.java,44,import org.mockitousage.binding.OverloadingPuzzleTest;
False,test/org/mockitousage/MultiThreadedTest.java,test/org/mockitousage/MultiThreadedTest.java,107,"ncorectBindingPuzzleFixedTest.class,"
True,test/org/mockitousage/MultiThreadedTest.java,test/org/mockitousage/MultiThreadedTest.java,107,"OverloadingPuzzleTest.class,"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,2, Copyright (c) 2007 Mockito contributors
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,3, This program is made available under the terms of the MIT License.
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,5,ackage org.mockitousage.binding;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,7,mport static org.junit.Assert.*;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,8,mport static org.mockito.Matchers.*;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,9,mport static org.mockito.Mockito.*;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,10,mport static org.mockito.util.ExtraMatchers.*;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,12,mport org.junit.Ignore;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,13,mport org.junit.Test;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,14,mport org.mockito.InOrder;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,15,mport org.mockito.TestBase;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,16,mport org.mockito.exceptions.verification.ArgumentsAreDifferentException;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,17,mport org.mockito.exceptions.verification.VerifcationInOrderFailure;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,18,mport org.mockitousage.IMethods;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,20,ublic class IncorectBindingPuzzleFixedTest extends TestBase {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,22,rivate Super mock;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,24,rivate void setMockWithDowncast(Super mock) {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,25,his.mock = mock;
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,28,rivate interface Super {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,29,oid say(Object message);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,32,rivate interface Sub extends Super {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,33,oid say(String message);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,36,rivate void say(Object message) {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,37,ock.say(message);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,40,Test
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,41,ublic void shouldUseArgumentTypeWhenOverloadingPuzzleDetected() throws Exception {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,42,ub sub = mock(Sub.class);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,43,etMockWithDowncast(sub);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,44,"ay(""Hello"");"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,45,ry {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,46,"erify(sub).say(""Hello"");"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,47,ail();
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,48, catch (ArgumentsAreDifferentException error) {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,49,"/TODO this is no longer valid, because method is different not the args"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,50,tring expected =
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,51,"\n"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,52,"Argument(s) are different!"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,53,"\n"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,54,"Method: Sub.say(...)"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,55,"\n"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,56,"All wanted arguments:"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,57,"\n"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,58,"    1: class java.lang.String"";"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,60,"ssertEquals(expected, error.getMessage());"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,62,tring expectedCause =
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,63,"\n"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,64,"All actual arguments:"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,65,"\n"" +"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,66,"    1: class java.lang.Object"";"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,67,"ssertEquals(expectedCause, error.getCause().getMessage());"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,71,"Ignore(""that's a very edge case, don't care for it now"")"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,72,Test
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,73,ublic void shouldPrintArgumentTypeWhenOverloadingPuzzleDetectedByVerificationInOrder() throws Exception {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,74,Methods mockTwo = mock(IMethods.class);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,75,ockTwo.simpleMethod();
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,77,ub sub = mock(Sub.class);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,78,etMockWithDowncast(sub);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,79,"ay(""Hello"");"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,81,"nOrder inOrder = inOrder(mock, mockTwo);"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,82,nOrder.verify(mockTwo).simpleMethod();
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,84,ry {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,85,"nOrder.verify(sub).say(""Hello"");"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,86,ail();
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,87, catch (VerifcationInOrderFailure e) {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,88,"ssertThat(e, messageContains(""Sub.say(class java.lang.String)""));"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,92,Test
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,93,ublic void shouldUseArgumentTypeWhenMatcherUsed() throws Exception {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,94,ub sub = mock(Sub.class);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,95,etMockWithDowncast(sub);
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,96,"ay(""Hello world"");"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,97,ry {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,98,"erify(sub).say(contains(""world""));"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,99,ail();
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,100, catch (ArgumentsAreDifferentException e) {
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,101,"ssertThat(e, messageContains(""1: class java.lang.String""));"
False,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,test/org/mockitousage/binding/IncorectBindingPuzzleFixedTest.java,102,"ssertThat(e, causeMessageContains(""1: class java.lang.Object""));"
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,5,package org.mockitousage.binding;
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,7,import static org.junit.Assert.*;
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,8,import static org.mockito.Mockito.*;
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,10,import org.junit.Test;
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,11,import org.mockito.TestBase;
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,12,import org.mockito.exceptions.verification.WantedButNotInvoked;
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,14,public class OverloadingPuzzleTest extends TestBase {
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,16,private Super mock;
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,18,private void setMockWithDowncast(Super mock) {
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,19,this.mock = mock;
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,22,private interface Super {
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,23,void say(Object message);
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,26,private interface Sub extends Super {
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,27,void say(String message);
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,30,private void say(Object message) {
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,31,mock.say(message);
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,34,@Test
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,35,public void shouldUseArgumentTypeWhenOverloadingPuzzleDetected() throws Exception {
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,36,Sub sub = mock(Sub.class);
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,37,setMockWithDowncast(sub);
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,38,"say(""Hello"");"
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,39,try {
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,40,"verify(sub).say(""Hello"");"
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,41,fail();
True,test/org/mockitousage/binding/OverloadingPuzzleTest.java,test/org/mockitousage/binding/OverloadingPuzzleTest.java,42,} catch (WantedButNotInvoked e) {}
False,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,12,mport org.junit.Before;
False,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,14,mport org.mockito.Mockito;
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,14,import org.mockito.MockitoAnnotations.Mock;
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,15,import org.mockito.exceptions.verification.ArgumentsAreDifferentException;
False,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,18,mport org.mockito.exceptions.verification.ArgumentsAreDifferentException;
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,19,import org.mockitousage.IMethods;
False,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,24,rivate List mock;
False,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,25,rivate List mockTwo;
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,24,@Mock private List mock;
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,25,@Mock private List mockTwo;
False,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,27,Before
False,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,28,ublic void setup() {
False,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,29,ock = Mockito.mock(List.class);
False,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,30,ockTwo = Mockito.mock(List.class);
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,109,@Test
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,110,public void shouldDetectWhenOverloadedMethodCalled() throws Exception {
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,111,IMethods mockThree = mock(IMethods.class);
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,113,mockThree.varargs((Object[]) new Object[] {});
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,114,try {
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,115,verify(mockThree).varargs((String[]) new String[] {});
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,116,fail();
True,test/org/mockitousage/verification/BasicVerificationTest.java,test/org/mockitousage/verification/BasicVerificationTest.java,117,} catch(WantedButNotInvoked e) {}
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,113,"ssertThat(e, causeMessageContains(""    <no arguments>""));"
True,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,113,"assertThat(e, causeMessageContains(""    <NO ARGUMENTS>""));"
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,272,Test
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,273,ublic void shouldPrintTypesWhenMethodSupposablyTheSame() throws Exception {
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,274,ock.varargs((Object[]) new Object[] {});
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,275,ry {
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,276,erify(mock).varargs((String[]) new String[] {});
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,277,ail();
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,278, catch(ArgumentsAreDifferentException e) {
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,279,"ssertThat(e, messageContains(""1: class [Ljava.lang.String;""));"
False,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java,280,"ssertThat(e, causeMessageContains(""1: class [Ljava.lang.Object;""));"

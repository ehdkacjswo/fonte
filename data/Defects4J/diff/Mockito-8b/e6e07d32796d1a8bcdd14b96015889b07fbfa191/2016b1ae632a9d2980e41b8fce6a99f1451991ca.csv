is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,81, As usual you are going to read the partial mock warning:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,82," Object oriented programming is more less tackling complexity by dividing the complexity and placing it in separate, specific objects."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,83, Partial mock is a sign that the code is not well designed.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,84, It usually means that the complexity has been moved to a different method on the same object.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,85," Partial mocks are useful when dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,86, I wouldn't use them for new code.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,81,* As usual you are going to read <b>the partial mock warning</b>:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,82,"* Object oriented programming is more less tackling complexity by spliting the complexity into separate, specific objects."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,83,"* How does partial mock fit into this paradigm? Well, it just doesn't..."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,84,* Partial mock usually means that the complexity has been moved to a different method on the same object.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,85,"* Trust me, this is not the way you want to design your application."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,86,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,87,"* However, there are rare cases when partial mocks come handy:"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,88,"* dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,89,"* I wouldn't use partial mocks in new code, though."
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,712," Spying on real objects is often associated with ""partial mocking"" concept."
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,713," However, Mockito spies are not partial mocks. Mockito spy is meant to help testing other classes - not the spy itself."
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,714, Therefore spy will not help if you intend to verify if method calls other method on the same object.
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,715, In this case I suggest being OO/SRPy (for example you might extract new class/interface...)
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,712,* As usual you are going to read <b>the partial mock warning</b>:
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,713,"* Object oriented programming is more less tackling complexity by spliting the complexity into separate, specific objects."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,714,"* How does partial mock fit into this paradigm? Well, it just doesn't..."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,715,* Partial mock usually means that the complexity has been moved to a different method on the same object.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,716,"* Trust me, this is not the way you want to design your application."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,717,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,718,"* However, there are rare cases when partial mocks come handy:"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,719,"* dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,720,"* I wouldn't use partial mocks in new code, though."
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1063,      * As usual you are going to read the partial mock warning:
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1064," Object oriented programming is more less tackling complexity by dividing the complexity and placing it in separate, specific objects."
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1065, Partial mock is a sign that the code is not well designed.
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1066, It usually means that the complexity has been moved to a different method on the same object.
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1067," Partial mocks are useful when dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
False,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1068, I wouldn't use them for new code.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1068,* As usual you are going to read <b>the partial mock warning</b>:
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1069,"* Object oriented programming is more less tackling complexity by spliting the complexity into separate, specific objects."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1070,"* How does partial mock fit into this paradigm? Well, it just doesn't..."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1071,* Partial mock usually means that the complexity has been moved to a different method on the same object.
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1072,"* Trust me, this is not the way you want to design your application."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1073,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1074,"* However, there are rare cases when partial mocks come handy:"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1075,"* dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1076,"* I wouldn't use partial mocks in new code, though."
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1077,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1078,* See also javadoc {@link Mockito#spy(Object)} to find out more about partial mocks
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1088,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1089,* See examples in javadoc for {@link Mockito} class
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1113,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1114,* See examples in javadoc for {@link Mockito} class
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1153,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1154,* See examples in javadoc for {@link Mockito} class
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1198,* <p>
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1199,* See examples in javadoc for {@link Mockito} class
True,src/org/mockito/Mockito.java,src/org/mockito/Mockito.java,1222,* <p>
False,src/org/mockito/internal/debugging/Location.java,src/org/mockito/internal/debugging/Location.java,16,"his.firstTraceElement = filter.filter(stackTrace, 1)[0];"
True,src/org/mockito/internal/debugging/Location.java,src/org/mockito/internal/debugging/Location.java,16,"this.firstTraceElement = filter.filter(stackTrace, false)[0];"
False,src/org/mockito/internal/exceptions/base/ConditionalStackTraceFilter.java,src/org/mockito/internal/exceptions/base/ConditionalStackTraceFilter.java,19,"tackTraceElement[] filtered = filter.filter(throwable.getStackTrace(), 0);"
True,src/org/mockito/internal/exceptions/base/ConditionalStackTraceFilter.java,src/org/mockito/internal/exceptions/base/ConditionalStackTraceFilter.java,19,"StackTraceElement[] filtered = filter.filter(throwable.getStackTrace(), true);"
False,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,27,"ublic StackTraceElement[] filter(StackTraceElement[] target, int startWith) {"
True,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,27,"public StackTraceElement[] filter(StackTraceElement[] target, boolean keepTop) {"
False,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,33,or (int i = startWith; i < unfilteredStackTrace.size(); i++) {
True,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,33,for (int i = 0; i < unfilteredStackTrace.size(); i++) {
False,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,44,f (firstBad != -1) {
False,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,45,"op = unfilteredStackTrace.subList(startWith, firstBad);"
True,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,44,if (keepTop && firstBad != -1) {
True,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,src/org/mockito/internal/exceptions/base/StackTraceFilter.java,45,"top = unfilteredStackTrace.subList(0, firstBad);"
False,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,91, TODO: partial mocks warning
False,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,92, Sets the real implementation to be called when the method is called on a mock object.  E.g.:
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,91,* Sets the real implementation to be called when the method is called on a mock object.
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,92,* <p>
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,93,* TODO: polish the partial mocks warning
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,94,* As usual you are going to read <b>the partial mock warning</b>:
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,95,"* Object oriented programming is more less tackling complexity by spliting the complexity into separate, specific objects."
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,96,"* How does partial mock fit into this paradigm? Well, it just doesn't..."
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,97,* Partial mock usually means that the complexity has been moved to a different method on the same object.
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,98,"* Trust me, this is not the way you want to design your application."
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,99,* <p>
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,100,"* However, there are rare cases when partial mocks come handy:"
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,101,"* dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,102,"* I wouldn't use partial mocks in new code, though."
True,src/org/mockito/internal/progress/NewOngoingStubbing.java,src/org/mockito/internal/progress/NewOngoingStubbing.java,103,* <p>
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,24,"tackTraceElement[] filtered = filter.filter(t, 0);"
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,24,"StackTraceElement[] filtered = filter.filter(t, false);"
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,36,"tackTraceElement[] filtered = filter.filter(t, 0);"
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,36,"StackTraceElement[] filtered = filter.filter(t, false);"
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,51,"tackTraceElement[] filtered = filter.filter(t, 0);"
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,51,"StackTraceElement[] filtered = filter.filter(t, false);"
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,65,"tackTraceElement[] filtered = filter.filter(t, 0);"
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,65,"StackTraceElement[] filtered = filter.filter(t, false);"
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,77,"tackTraceElement[] filtered = filter.filter(t, 0);"
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,77,"StackTraceElement[] filtered = filter.filter(t, false);"
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,83,ublic void shouldStartFilteringFromIndex() {
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,83,public void shouldStartFilteringAndKeepTop() {
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,91,nt startIndex = 1;
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,94,"tackTraceElement[] filtered = filter.filter(t, startIndex);"
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,92,"StackTraceElement[] filtered = filter.filter(t, true);"
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,97,"ssertThat(filtered, hasOnlyThoseClasses(""org.test.Good""));"
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,95,"assertThat(filtered, hasOnlyThoseClasses(""org.test.MockitoSampleTest"", ""org.test.Good""));"
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,101,ublic void shouldKeepGoodTraceFromTheTopBecauseSpiesSometimesThrowExceptions() {
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,99,public void shouldKeepGoodTraceFromTheTopBecauseRealImplementationsOfSpiesSometimesThrowExceptions() {
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,109,"tackTraceElement[] filtered = filter.filter(t, 0);"
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,107,"StackTraceElement[] filtered = filter.filter(t, true);"
False,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,121,"tackTraceElement[] filtered = filter.filter(new StackTraceElement[0], 0);"
True,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,test/org/mockito/internal/exceptions/base/StackTraceFilterTest.java,119,"StackTraceElement[] filtered = filter.filter(new StackTraceElement[0], false);"

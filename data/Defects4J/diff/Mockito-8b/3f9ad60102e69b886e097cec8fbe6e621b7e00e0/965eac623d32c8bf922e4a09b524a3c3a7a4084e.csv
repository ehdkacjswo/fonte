is_addition,old_file_path,new_file_path,line_num,content
True,test/org/mockito/StateMaster.java,test/org/mockito/StateMaster.java,16,mockingProgress.resetOngoingStubbing();
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,14,mport static org.fest.assertions.Assertions.assertThat;
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,15,mport static org.junit.Assert.assertEquals;
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,16,mport static org.junit.Assert.fail;
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,17,mport static org.mockito.Matchers.anyString;
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,19,mport static org.mockito.Mockito.when;
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,41,/this code here (let's call it LEO) is only needed to reproduce the issue with concurrency. Start:
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,42,lass Foo {
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,43,"nt blah(String a, String b, Object ... c) {"
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,44,eturn 1;
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,48,Test
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,49,ublic void leo() throws Exception {
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,50,oo foo = mock(Foo.class);
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,52,"hen(foo.blah(anyString(), anyString())).thenCallRealMethod();"
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,54,"ssertEquals(1, foo.blah(""foo"", ""bar""));"
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,56,/end of the code that should not be included in this test.
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,59,Ignore
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,60,"/This test fails consistently when leo runs before. Find out why, write proper test, get rid of leo"
False,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,test/org/mockitousage/bugs/ParentClassNotPublicVeryWeirdBugTest.java,61,/@Before method in the TestBase should clear all the dodgy state after leo so it's intriguing why it does not work
False,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,26,mport java.io.*;
True,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,26,import java.io.ByteArrayOutputStream;
True,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,27,import java.io.IOException;
True,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,28,import java.io.PrintStream;
False,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,42,ew StateMaster().validate();
True,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,44,StateMaster state = new StateMaster();
True,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,45,//catch any invalid state left over after test case run
True,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,46,//this way we can catch early if some Mockito operations leave weird state afterwards
True,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,47,state.validate();
True,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,48,"//reset the state, especially, reset any ongoing stubbing for correct error messages of tests that assert unhappy paths"
True,test/org/mockitoutil/TestBase.java,test/org/mockitoutil/TestBase.java,49,state.reset();

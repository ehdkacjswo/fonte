is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,5,ackage org.mockito;
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,7,mport org.mockito.listeners.InvocationListener;
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,8,mport org.mockito.mock.MockCreationSettings;
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,9,mport org.mockito.stubbing.Answer;
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,11,mport java.io.Serializable;
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,14, Allows mock creation with additional mock settings.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,15, <p/>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,16, Don't use it too often.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,17, Consider writing simple tests that use simple mocks.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,18," Repeat after me: simple tests push simple, KISSy, readable & maintainable code."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,19, If you cannot write a test in a simple way - refactor the code under test.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,20, <p/>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,21, Examples of mock settings:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,22," <pre class=""code""><code class=""java"">"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,23,   //Creates mock with different default answer & name
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,24,"   Foo mock = mock(Foo.class, withSettings()"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,25,                                .defaultAnswer(RETURNS_SMART_NULLS)
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,26,"                                .name(""cool mockie"")"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,29,"   //Creates mock with different default answer, descriptive name and extra interfaces"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,30,"   Foo mock = mock(Foo.class, withSettings()"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,31,                                .defaultAnswer(RETURNS_SMART_NULLS)
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,32,"                                .name(""cool mockie"")"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,33,                                .extraInterfaces(Bar.class));
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,34, </code></pre>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,35, {@link MockSettings} has been introduced for two reasons.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,36," Firstly, to make it easy to add another mock setting when the demand comes."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,37," Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,39,ublic interface MockSettings extends Serializable {
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,42, Specifies extra interfaces the mock should implement. Might be useful for legacy code or some corner cases.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,43," For background, see issue 51 <a href=""http://code.google.com/p/mockito/issues/detail?id=51"">here</a>"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,44, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,45, This mysterious feature should be used very occasionally.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,46, The object under test should know exactly its collaborators & dependencies.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,47," If you happen to use it often than please make sure you are really producing simple, clean & readable code."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,48, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,49, Examples:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,50," <pre class=""code""><code class=""java"">"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,51,"   Foo foo = mock(Foo.class, withSettings().extraInterfaces(Bar.class, Baz.class));"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,53,"   //now, the mock implements extra interfaces, so following casting is possible:"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,54,   Bar bar = (Bar) foo;
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,55,   Baz baz = (Baz) foo;
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,56, </code></pre>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,58, @param interfaces extra interfaces the should implement.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,59, @return settings instance so that you can fluently specify other settings
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,61,ockSettings extraInterfaces(Class<?>... interfaces);
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,64, Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,65, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,66, Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,67, <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,68, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,69, <b>If you use &#064;Mock annotation then you've got naming mocks for free!</b> &#064;Mock uses field name as mock name. {@link Mock Read more.}
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,70, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,71, Examples:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,72," <pre class=""code""><code class=""java"">"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,73,"   Foo foo = mock(Foo.class, withSettings().name(""foo""));"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,75,   //Below does exactly the same:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,76,"   Foo foo = mock(Foo.class, ""foo"");"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,77, </code></pre>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,78," @param name the name of the mock, later used in all verification errors"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,79, @return settings instance so that you can fluently specify other settings
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,81,ockSettings name(String name);
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,84, Specifies the instance to spy on. Makes sense only for spies/partial mocks.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,86, Sets the instance that will be spied. Actually copies the internal fields of the passed instance to the mock.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,87, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,88, As usual you are going to read <b>the partial mock warning</b>:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,89," Object oriented programming is more or less about tackling complexity by dividing the complexity into separate, specific, SRPy objects."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,90," How does partial mock fit into this paradigm? Well, it just doesn't..."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,91, Partial mock usually means that the complexity has been moved to a different method on the same object.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,92," In most cases, this is not the way you want to design your application."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,93, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,94," However, there are rare cases when partial mocks come handy:"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,95," dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,96," However, I wouldn't use partial mocks for new, test-driven & well-designed code."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,97, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,98," Enough warnings about partial mocks, see an example how spiedInstance() works:"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,99," <pre class=""code""><code class=""java"">"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,100,"   Foo foo = mock(Foo.class, withSettings().spiedInstance(fooInstance));"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,102,   //Below does exactly the same:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,103,   Foo foo = spy(fooInstance);
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,104, </code></pre>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,106," About stubbing for a partial mock, as it is a spy it will always call the real method, unless you use the"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,107, <code>doReturn</code>|<code>Throw</code>|<code>Answer</code>|<code>CallRealMethod</code> stubbing style. Example:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,109," <pre class=""code""><code class=""java"">"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,110,   List list = new LinkedList();
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,111,   List spy = spy(list);
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,113,   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,114,"   when(spy.get(0)).thenReturn(""foo"");"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,116,   //You have to use doReturn() for stubbing
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,117,"   doReturn(""foo"").when(spy).get(0);"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,118, </code>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,120, @param instance to spy on
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,121, @return settings instance so that you can fluently specify other settings
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,123,ockSettings spiedInstance(Object instance);
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,126, Specifies default answers to interactions.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,127, It's quite advanced feature and typically you don't need it to write decent tests.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,128, However it can be helpful when working with legacy systems.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,129, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,130, It is the default answer so it will be used <b>only when you don't</b> stub the method call.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,132," <pre class=""code""><code class=""java"">"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,133,"   Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,134,"   Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,136,   //Below does exactly the same:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,137,"   Foo mockTwo = mock(Foo.class, new YourOwnAnswer());"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,138, </code></pre>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,140, @param defaultAnswer default answer to be used by mock when not stubbed
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,141, @return settings instance so that you can fluently specify other settings
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,143,"SuppressWarnings(""unchecked"")"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,144,ockSettings defaultAnswer(Answer defaultAnswer);
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,147, Configures the mock to be serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,148, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,149, WARNING: This should be rarely used in unit testing.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,150, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,151, The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,152, was in a web environment and the objects from the external dependency were being serialized to pass between layers.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,153, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,154, Example:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,155," <pre class=""code""><code class=""java"">"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,156,"   List serializableMock = mock(List.class, withSettings().serializable());"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,157, </code></pre>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,159, @return settings instance so that you can fluently specify other settings
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,160, @since 1.8.1
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,162,ockSettings serializable();
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,165, Enables real-time logging of method invocations on this mock. Can be used
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,166, during test debugging in order to find wrong interactions with this mock.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,167, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,168, Invocations are logged as they happen to the standard output stream.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,169, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,170, Calling this method multiple times makes no difference.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,171, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,172, Example:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,173," <pre class=""code""><code class=""java"">"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,174," List mockWithLogger = mock(List.class, withSettings().verboseLogging());"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,175, </code></pre>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,177, @return settings instance so that you can fluently specify other settings
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,179,ockSettings verboseLogging();
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,182, Registers a listener for method invocations on this mock. The listener is
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,183, notified every time a method on this mock is called.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,184, <p>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,185," Multiple listeners may be added, but the same object is only added once."
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,186," The order, in which the listeners are added, is not guaranteed to be the"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,187, order in which the listeners are notified.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,189, Example:
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,190," <pre class=""code""><code class=""java"">"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,191,"  List mockWithListener = mock(List.class, withSettings().invocationListeners(new YourInvocationListener()));"
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,192, </code></pre>
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,194, See the {@link InvocationListener listener interface} for more details.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,196, @param listeners The invocation listeners to add. May not be null.
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,197, @return settings instance so that you can fluently specify other settings
False,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,199,ockSettings invocationListeners(InvocationListener... listeners);
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,5,package org.mockito;
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,7,import org.mockito.listeners.InvocationListener;
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,8,import org.mockito.mock.MockCreationSettings;
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,9,import org.mockito.stubbing.Answer;
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,11,import java.io.Serializable;
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,14,* Allows mock creation with additional mock settings.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,15,* <p/>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,16,* Don't use it too often.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,17,* Consider writing simple tests that use simple mocks.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,18,"* Repeat after me: simple tests push simple, KISSy, readable & maintainable code."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,19,* If you cannot write a test in a simple way - refactor the code under test.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,20,* <p/>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,21,* Examples of mock settings:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,22,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,23,*   //Creates mock with different default answer & name
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,24,"*   Foo mock = mock(Foo.class, withSettings()"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,25,*                                .defaultAnswer(RETURNS_SMART_NULLS)
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,26,"*                                .name(""cool mockie"")"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,29,"*   //Creates mock with different default answer, descriptive name and extra interfaces"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,30,"*   Foo mock = mock(Foo.class, withSettings()"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,31,*                                .defaultAnswer(RETURNS_SMART_NULLS)
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,32,"*                                .name(""cool mockie"")"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,33,*                                .extraInterfaces(Bar.class));
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,34,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,35,* {@link MockSettings} has been introduced for two reasons.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,36,"* Firstly, to make it easy to add another mock setting when the demand comes."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,37,"* Secondly, to enable combining together different mock settings without introducing zillions of overloaded mock() methods."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,39,public interface MockSettings extends Serializable {
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,42,* Specifies extra interfaces the mock should implement. Might be useful for legacy code or some corner cases.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,43,"* For background, see issue 51 <a href=""http://code.google.com/p/mockito/issues/detail?id=51"">here</a>"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,44,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,45,* This mysterious feature should be used very occasionally.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,46,* The object under test should know exactly its collaborators & dependencies.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,47,"* If you happen to use it often than please make sure you are really producing simple, clean & readable code."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,48,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,49,* Examples:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,50,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,51,"*   Foo foo = mock(Foo.class, withSettings().extraInterfaces(Bar.class, Baz.class));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,53,"*   //now, the mock implements extra interfaces, so following casting is possible:"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,54,*   Bar bar = (Bar) foo;
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,55,*   Baz baz = (Baz) foo;
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,56,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,58,* @param interfaces extra interfaces the should implement.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,59,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,61,MockSettings extraInterfaces(Class<?>... interfaces);
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,64,* Specifies mock name. Naming mocks can be helpful for debugging - the name is used in all verification errors.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,65,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,66,* Beware that naming mocks is not a solution for complex code which uses too many mocks or collaborators.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,67,* <b>If you have too many mocks then refactor the code</b> so that it's easy to test/debug without necessity of naming mocks.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,68,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,69,* <b>If you use &#064;Mock annotation then you've got naming mocks for free!</b> &#064;Mock uses field name as mock name. {@link Mock Read more.}
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,70,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,71,* Examples:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,72,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,73,"*   Foo foo = mock(Foo.class, withSettings().name(""foo""));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,75,*   //Below does exactly the same:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,76,"*   Foo foo = mock(Foo.class, ""foo"");"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,77,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,78,"* @param name the name of the mock, later used in all verification errors"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,79,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,81,MockSettings name(String name);
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,84,* Specifies the instance to spy on. Makes sense only for spies/partial mocks.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,86,* Sets the instance that will be spied. Actually copies the internal fields of the passed instance to the mock.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,87,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,88,* As usual you are going to read <b>the partial mock warning</b>:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,89,"* Object oriented programming is more or less about tackling complexity by dividing the complexity into separate, specific, SRPy objects."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,90,"* How does partial mock fit into this paradigm? Well, it just doesn't..."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,91,* Partial mock usually means that the complexity has been moved to a different method on the same object.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,92,"* In most cases, this is not the way you want to design your application."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,93,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,94,"* However, there are rare cases when partial mocks come handy:"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,95,"* dealing with code you cannot change easily (3rd party interfaces, interim refactoring of legacy code etc.)"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,96,"* However, I wouldn't use partial mocks for new, test-driven & well-designed code."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,97,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,98,"* Enough warnings about partial mocks, see an example how spiedInstance() works:"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,99,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,100,"*   Foo foo = mock(Foo.class, withSettings().spiedInstance(fooInstance));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,102,*   //Below does exactly the same:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,103,*   Foo foo = spy(fooInstance);
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,104,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,106,"* About stubbing for a partial mock, as it is a spy it will always call the real method, unless you use the"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,107,* <code>doReturn</code>|<code>Throw</code>|<code>Answer</code>|<code>CallRealMethod</code> stubbing style. Example:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,109,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,110,*   List list = new LinkedList();
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,111,*   List spy = spy(list);
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,113,*   //Impossible: real method is called so spy.get(0) throws IndexOutOfBoundsException (the list is yet empty)
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,114,"*   when(spy.get(0)).thenReturn(""foo"");"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,116,*   //You have to use doReturn() for stubbing
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,117,"*   doReturn(""foo"").when(spy).get(0);"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,118,* </code>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,120,* @param instance to spy on
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,121,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,123,MockSettings spiedInstance(Object instance);
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,126,* Specifies default answers to interactions.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,127,* It's quite advanced feature and typically you don't need it to write decent tests.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,128,* However it can be helpful when working with legacy systems.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,129,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,130,* It is the default answer so it will be used <b>only when you don't</b> stub the method call.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,132,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,133,"*   Foo mock = mock(Foo.class, withSettings().defaultAnswer(RETURNS_SMART_NULLS));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,134,"*   Foo mockTwo = mock(Foo.class, withSettings().defaultAnswer(new YourOwnAnswer()));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,136,*   //Below does exactly the same:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,137,"*   Foo mockTwo = mock(Foo.class, new YourOwnAnswer());"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,138,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,140,* @param defaultAnswer default answer to be used by mock when not stubbed
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,141,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,143,"@SuppressWarnings(""unchecked"")"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,144,MockSettings defaultAnswer(Answer defaultAnswer);
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,147,* Configures the mock to be serializable. With this feature you can use a mock in a place that requires dependencies to be serializable.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,148,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,149,* WARNING: This should be rarely used in unit testing.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,150,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,151,* The behaviour was implemented for a specific use case of a BDD spec that had an unreliable external dependency.  This
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,152,* was in a web environment and the objects from the external dependency were being serialized to pass between layers.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,153,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,154,* Example:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,155,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,156,"*   List serializableMock = mock(List.class, withSettings().serializable());"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,157,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,159,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,160,* @since 1.8.1
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,162,MockSettings serializable();
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,165,* Enables real-time logging of method invocations on this mock. Can be used
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,166,* during test debugging in order to find wrong interactions with this mock.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,167,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,168,* Invocations are logged as they happen to the standard output stream.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,169,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,170,* Calling this method multiple times makes no difference.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,171,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,172,* Example:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,173,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,174,"* List mockWithLogger = mock(List.class, withSettings().verboseLogging());"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,175,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,177,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,179,MockSettings verboseLogging();
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,182,* Registers a listener for method invocations on this mock. The listener is
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,183,* notified every time a method on this mock is called.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,184,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,185,"* Multiple listeners may be added, but the same object is only added once."
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,186,"* The order, in which the listeners are added, is not guaranteed to be the"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,187,* order in which the listeners are notified.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,189,* Example:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,190,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,191,"*  List mockWithListener = mock(List.class, withSettings().invocationListeners(new YourInvocationListener()));"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,192,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,194,* See the {@link InvocationListener listener interface} for more details.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,196,* @param listeners The invocation listeners to add. May not be null.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,197,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,199,MockSettings invocationListeners(InvocationListener... listeners);
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,202,* Sets whether this mock should only provide stubbing of methods.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,203,* A stub-only mock does not record method
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,204,"* invocations, thus saving memory but"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,205,* disallowing verification of invocations.
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,206,* <p>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,207,* Example:
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,208,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,209,"* List stubOnly = mock(List.class, withSettings().stubOnly());"
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,210,* </code></pre>
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,212,* @return settings instance so that you can fluently specify other settings
True,src/org/mockito/MockSettings.java,src/org/mockito/MockSettings.java,214,MockSettings stubOnly();}
False,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,20,mport java.util.HashSet;
False,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,21,mport java.util.List;
False,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,22,mport java.util.Set;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,20,import java.util.*;
False,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,29,rivate static final long serialVersionUID = 4475297236197939568L;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,27,private static final long serialVersionUID = 4475297236197939569L;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,85,public MockSettings stubOnly() {
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,86,this.stubOnly = true;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,87,return this;
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,90,public boolean isStubOnly() {
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,91,return this.stubOnly;
False,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,142,"alidator.validateSerializable(typeToMock, source.isSerializable());"
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,30,protected boolean stubOnly;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,44,this.stubOnly = copy.stubOnly;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,90,public boolean isStubOnly() {
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,91,return stubOnly;
True,src/org/mockito/mock/MockCreationSettings.java,src/org/mockito/mock/MockCreationSettings.java,52,"* Whether the mock is only for stubbing, i.e. does not remember"
True,src/org/mockito/mock/MockCreationSettings.java,src/org/mockito/mock/MockCreationSettings.java,53,* parameters on its invocation and therefore cannot
True,src/org/mockito/mock/MockCreationSettings.java,src/org/mockito/mock/MockCreationSettings.java,54,* be used for verification
True,src/org/mockito/mock/MockCreationSettings.java,src/org/mockito/mock/MockCreationSettings.java,56,boolean isStubOnly();

is_addition,old_file_path,new_file_path,line_num,content
False,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,96,nhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(mockedType));
True,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,96,"Class<?>[] allMockedTypes = prepend(mockedType, interfaces);"
True,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,97,enhancer.setClassLoader(SearchingClassLoader.combineLoadersOf(allMockedTypes));
False,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,100,"nhancer.setInterfaces(prepend(mockedType, interfaces));"
True,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,src/org/mockito/internal/creation/jmock/ClassImposterizer.java,101,enhancer.setInterfaces(allMockedTypes);
False,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,8,mport static org.hamcrest.CoreMatchers.*;
False,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,9,mport static org.mockito.Mockito.*;
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,8,import static org.hamcrest.CoreMatchers.is;
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,9,import static org.mockito.Mockito.mock;
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,10,import static org.mockito.Mockito.withSettings;
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,11,import static org.mockitoutil.ClassLoaders.isolatedClassLoader;
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,17,// See issue 453
False,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,23,ublic void shouldAllowMultipleInterfaces() {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,25,public void should_allow_multiple_interfaces() {
False,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,33,ublic void shouldScreamWhenNullPassedInsteadOfAnInterface() {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,35,public void should_scream_when_null_passed_instead_of_an_interface() {
False,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,45,ublic void shouldScreamWhenNoArgsPassed() {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,47,public void should_scream_when_no_args_passed() {
False,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,57,ublic void shouldScreamWhenNullPassedInsteadOfAnArray() {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,59,public void should_scream_when_null_passed_instead_of_an_array() {
False,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,69,ublic void shouldScreamWhenNonInterfacePassed() {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,71,public void should_scream_when_non_interface_passed() {
False,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,81,ublic void shouldScreamWhenTheSameInterfacesPassed() {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,83,public void should_scream_when_the_same_interfaces_passed() {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,95,@Test
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,96,public void should_mock_class_with_interfaces_of_different_class_loader_AND_different_classpaths() throws ClassNotFoundException {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,97,"// Note : if classes are in the same classpath, SearchingClassLoader can find the class/classes and load them in the first matching classloader"
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,98,Class<?> interface1 = isolatedClassLoader()
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,99,".withCodeSourceUrls(""test-resources/multiple-classpaths/cp1"")"
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,100,".withPrivateCopyOf(""test.TestedClass1"")"
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,101,.build()
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,102,".loadClass(""test.TestedClass1"");"
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,103,Class<?> interface2 = isolatedClassLoader()
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,104,".withCodeSourceUrls(""test-resources/multiple-classpaths/cp2"")"
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,105,".withPrivateCopyOf(""test.TestedClass2"")"
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,106,.build()
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,107,".loadClass(""test.TestedClass2"");"
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,109,try {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,110,"Object mocked = mock(interface1, withSettings().extraInterfaces(interface2));"
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,111,"assertTrue(""mock should be assignable from interface2 type"", interface2.isInstance(mocked));"
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,112,} catch (MockitoException e) {
True,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java,113,"fail(""Couldn't mock interfaces with different class loaders and different classpaths"");"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,1,package org.mockitoutil;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,3,import static java.util.Arrays.asList;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,4,import java.io.File;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,5,import java.net.MalformedURLException;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,6,import java.net.URL;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,7,import java.net.URLClassLoader;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,8,import java.util.ArrayList;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,9,import java.util.Arrays;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,10,import java.util.List;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,12,public class ClassLoaders {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,13,private final ArrayList<String> privateCopyPrefixes = new ArrayList<String>();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,14,private final ArrayList<URL> codeSourceUrls = new ArrayList<URL>();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,16,public static ClassLoaders isolatedClassLoader() {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,17,return new ClassLoaders();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,20,public ClassLoaders withPrivateCopyOf(String... privatePrefixes) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,21,privateCopyPrefixes.addAll(asList(privatePrefixes));
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,22,return this;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,25,public ClassLoaders withCodeSourceUrls(String... urls) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,26,codeSourceUrls.addAll(pathsToURLs(urls));
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,27,return this;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,30,public ClassLoaders withCurrentCodeSourceUrls() {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,31,codeSourceUrls.add(obtainClassPathOF(ClassLoaders.class.getName()));
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,32,return this;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,36,private static URL obtainClassPathOF(String className) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,37,"String path = className.replace('.', '/') + "".class"";"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,38,String url = ClassLoaders.class.getClassLoader().getResource(path).toExternalForm();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,40,try {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,41,"return new URL(url.substring(0, url.length() - path.length()));"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,42,} catch (MalformedURLException e) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,43,"throw new RuntimeException(""Classloader couldn't obtain a proper classpath URL"", e);"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,47,public ClassLoader build() {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,48,return new LocalIsolatedURLClassLoader(
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,49,"codeSourceUrls.toArray(new URL[codeSourceUrls.size()]),"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,50,privateCopyPrefixes
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,54,static class LocalIsolatedURLClassLoader extends URLClassLoader {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,55,private final ArrayList<String> privateCopyPrefixes;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,57,"public LocalIsolatedURLClassLoader(URL[] urls, ArrayList<String> privateCopyPrefixes) {"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,58,"super(urls, null);"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,59,this.privateCopyPrefixes = privateCopyPrefixes;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,62,@Override
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,63,public Class<?> findClass(String name) throws ClassNotFoundException {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,64,if(classShouldBePrivate(name)) return super.findClass(name);
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,65,"throw new ClassNotFoundException(""Can only load classes with prefix : "" + privateCopyPrefixes);"
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,68,private boolean classShouldBePrivate(String name) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,69,for (String prefix : privateCopyPrefixes) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,70,if (name.startsWith(prefix)) return true;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,72,return false;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,76,private List<URL> pathsToURLs(String... codeSourceUrls) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,77,return pathsToURLs(Arrays.asList(codeSourceUrls));
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,79,private List<URL> pathsToURLs(List<String> codeSourceUrls) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,80,ArrayList<URL> urls = new ArrayList<URL>(codeSourceUrls.size());
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,81,for (String codeSourceUrl : codeSourceUrls) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,82,URL url = pathToUrl(codeSourceUrl);
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,83,urls.add(url);
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,85,return urls;
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,88,private URL pathToUrl(String path) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,89,try {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,90,return new File(path).getAbsoluteFile().toURI().toURL();
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,91,} catch (MalformedURLException e) {
True,test/org/mockitoutil/ClassLoaders.java,test/org/mockitoutil/ClassLoaders.java,92,"throw new IllegalArgumentException(""Path is malformed"", e);"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,1,package org.mockitoutil;
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,3,import static org.fest.assertions.Assertions.assertThat;
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,4,import static org.mockitoutil.ClassLoaders.isolatedClassLoader;
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,5,import org.junit.Test;
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,7,public class ClassLoadersTest {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,9,@Test(expected = ClassNotFoundException.class)
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,10,public void isolated_class_loader_cannot_load_classes_when_no_given_prefix() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,11,// given
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,12,ClassLoader cl = isolatedClassLoader().build();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,14,// when
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,15,"cl.loadClass(""org.mockito.Mockito"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,17,// then raises CNFE
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,20,@Test
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,21,public void isolated_class_loader_cannot_load_classes_If_no_code_source_path() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,22,// given
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,23,ClassLoader cl = isolatedClassLoader()
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,24,".withPrivateCopyOf(""org.mockitoutil.IsolatedClassLoaderBuilderTest$ClassUsingInterface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,25,.build();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,27,// when
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,28,try {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,29,"cl.loadClass(""org.mockitoutil.IsolatedClassLoaderBuilderTest$ClassUsingInterface1"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,30,} catch (ClassNotFoundException e) {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,31,// then
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,32,"assertThat(e.getMessage()).contains(""org.mockitoutil.IsolatedClassLoaderBuilderTest$ClassUsingInterface1"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,36,@Test
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,37,public void isolated_class_loader_cannot_load_classes_that_require_other_non_declared_classes() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,38,// given
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,39,ClassLoader cl = isolatedClassLoader()
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,40,.withCurrentCodeSourceUrls()
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,41,".withPrivateCopyOf(""org.mockitoutil.IsolatedClassLoaderBuilderTest$ClassUsingInterface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,42,.build();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,44,// when
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,45,try {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,46,"cl.loadClass(""org.mockitoutil.IsolatedClassLoaderBuilderTest$ClassUsingInterface1"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,47,} catch (NoClassDefFoundError e) {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,48,// then
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,49,"assertThat(e.getMessage()).contains(""org/mockitoutil/IsolatedClassLoaderBuilderTest$Interface1"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,53,@Test
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,54,public void isolated_class_loader_can_load_all_classes_if_all_prefixes_correct() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,55,// given
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,56,ClassLoader cl = isolatedClassLoader()
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,57,.withCurrentCodeSourceUrls()
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,58,".withPrivateCopyOf(""org.mockitoutil.IsolatedClassLoaderBuilderTest$ClassUsingInterface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,59,".withPrivateCopyOf(""org.mockitoutil.IsolatedClassLoaderBuilderTest$Interface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,60,.build();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,62,// when
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,63,"Class<?> aClass = cl.loadClass(""org.mockitoutil.IsolatedClassLoaderBuilderTest$ClassUsingInterface1"");"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,65,// then
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,66,assertThat(aClass).isNotNull();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,67,assertThat(aClass.getClassLoader()).isEqualTo(cl);
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,68,assertThat(aClass.getInterfaces()[0].getClassLoader()).isEqualTo(cl);
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,71,@Test
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,72,public void isolated_class_loader_has_no_parent() throws Exception {
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,73,ClassLoader cl = isolatedClassLoader()
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,74,.withCurrentCodeSourceUrls()
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,75,".withPrivateCopyOf(""org.mockitoutil.IsolatedClassLoaderBuilderTest$ClassUsingInterface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,76,".withPrivateCopyOf(""org.mockitoutil.IsolatedClassLoaderBuilderTest$Interface1"")"
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,77,.build();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,79,assertThat(cl.getParent()).isNull();
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,83,static class ClassUsingInterface1 implements Interface1 { }
True,test/org/mockitoutil/ClassLoadersTest.java,test/org/mockitoutil/ClassLoadersTest.java,84,interface Interface1 { }

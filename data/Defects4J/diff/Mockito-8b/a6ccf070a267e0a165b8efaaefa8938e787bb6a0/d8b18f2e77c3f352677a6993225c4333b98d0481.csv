is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,751,public void defaultAnswerDoesNotAcceptNullParameter() {
True,src/org/mockito/exceptions/Reporter.java,src/org/mockito/exceptions/Reporter.java,752,"throw new MockitoException(""defaultAnswer() does not accept null parameter"");"
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,76,if (defaultAnswer == null) {
True,src/org/mockito/internal/creation/MockSettingsImpl.java,src/org/mockito/internal/creation/MockSettingsImpl.java,77,new Reporter().defaultAnswerDoesNotAcceptNullParameter();
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,22,private static final long serialVersionUID = -6789800638070123629L;
False,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,30,rotected boolean stubOnly;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,32,protected boolean stubOnly;
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,36,"@SuppressWarnings(""unchecked"")"
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,92,public List<InvocationListener> getInvocationListeners() {
True,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,93,return invocationListeners;
False,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,94,ublic List<InvocationListener> getInvocationListeners() {
False,src/org/mockito/internal/creation/settings/CreationSettings.java,src/org/mockito/internal/creation/settings/CreationSettings.java,95,eturn invocationListeners;
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,2, Copyright (c) 2007 Mockito contributors
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,3, This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,3,* This program is made available under the terms of the MIT License.
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,7,mport org.mockito.Mockito;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,7,import org.mockito.MockSettings;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,9,import org.mockito.internal.creation.settings.CreationSettings;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,14,import org.mockito.internal.util.reflection.GenericMetadataSupport;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,20,import static org.mockito.Mockito.mock;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,21,import static org.mockito.Mockito.withSettings;
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,23, @see Mockito#RETURNS_DEEP_STUBS
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,28,"* <p>Supports nested generic information, with this answer you can write code like this :"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,30,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,31,"*     interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {}"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,33,"*     GenericsNest&lt;?&gt; mock = mock(GenericsNest.class, new ReturnsGenericDeepStubs());"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,34,*     Number number = mock.entrySet().iterator().next().getValue().iterator().next();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,35,* </code></pre>
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,36,* </p>
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,38,* @see org.mockito.Mockito#RETURNS_DEEP_STUBS
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,28,rivate static final long serialVersionUID = -6926328908792880098L;
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,30,rivate Answer<Object> delegate = new ReturnsEmptyValues();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,43,private static final long serialVersionUID = -7105341425736035847L;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,45,private ReturnsEmptyValues delegate = new ReturnsEmptyValues();
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,33,lass<?> clz = invocation.getMethod().getReturnType();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,48,GenericMetadataSupport returnTypeGenericMetadata =
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,49,actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,35,f (!new MockCreationValidator().isTypeMockable(clz)) {
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,36,eturn delegate.answer(invocation);
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,51,Class<?> rawType = returnTypeGenericMetadata.rawType();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,52,if (!new MockCreationValidator().isTypeMockable(rawType)) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,53,return delegate.returnValueFor(rawType);
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,39,eturn getMock(invocation);
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,56,"return getMock(invocation, returnTypeGenericMetadata);"
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,42,rivate Object getMock(InvocationOnMock invocation) throws Throwable {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,59,"private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {"
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,54,"eturn recordDeepStubMock(invocation, container);"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,71,"return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,75,* Creates a mock using the Generics Metadata.
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,77,* @param returnTypeGenericMetadata The metadata to use to create the new mock.
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,78,* @return The mock
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,80,private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,81,return mock(
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,82,"returnTypeGenericMetadata.rawType(),"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,83,withSettingsUsing(returnTypeGenericMetadata)
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,57,"rivate Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) {"
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,58,lass<?> clz = invocation.getMethod().getReturnType();
False,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,59,"inal Object mock = Mockito.mock(clz, this);"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,87,private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,88,MockSettings mockSettings =
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,89,returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ?
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,90,withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,91,: withSettings();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,93,return mockSettings
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,94,.defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,97,private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,98,return new ReturnsDeepStubs() {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,99,@Override
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,100,protected GenericMetadataSupport actualParameterizedType(Object mock) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,101,return returnTypeGenericMetadata;
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,106,"private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {"
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,117,protected GenericMetadataSupport actualParameterizedType(Object mock) {
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,118,CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();
True,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java,119,return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());
False,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,2, Copyright (c) 2007 Mockito contributors
False,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,3, This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,3,* This program is made available under the terms of the MIT License.
False,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,13,ystem.out.print(what);
True,src/org/mockito/internal/util/ConsoleMockitoLogger.java,src/org/mockito/internal/util/ConsoleMockitoLogger.java,13,System.out.println(what);
False,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,2, Copyright (c) 2007 Mockito contributors
False,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,3, This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/util/reflection/GenericMaster.java,src/org/mockito/internal/util/reflection/GenericMaster.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,2,* Copyright (c) 2007 Mockito contributors
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,3,* This program is made available under the terms of the MIT License.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,5,package org.mockito.internal.util.reflection;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,8,import org.mockito.Incubating;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,9,import org.mockito.exceptions.base.MockitoException;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,10,import org.mockito.internal.util.Checks;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,11,import org.mockito.stubbing.Answer;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,13,import java.lang.reflect.*;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,14,import java.util.*;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,18,* This class can retrieve generic meta-data that the compiler stores on classes
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,19,* and accessible members.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,21,* <p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,22,*     The main idea of this code is to create a Map that will help to resolve return types.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,23,"*     In order to actually work with nested generics, this map will have to be passed along new instances"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,24,*     as a type context.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,25,* </p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,27,* <p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,28,*     Hence :
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,29,*     <ul>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,30,*         <li>the metadata is created using the {@link #inferFrom(Type)} method from a real
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,31,"*         Class or from a ParameterizedType, other types are not yet supported.</li>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,33,"*         <li>Then from this metadata, we can extract meta-data for a generic return type of a method, using"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,34,*         {@link #resolveGenericReturnType(Method)}.</li>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,36,"*         <li>Finally as we want to mock the actual type, but we want to pass along the contextual generics meta-data"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,37,"*         we need to create the mock ourselves as we know how to create it, depending on the kind of Type (Class,"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,38,"*         ParameterizedType, TypeVariable), the method {@link #toMock(Answer)} assumes this responsibility.</li>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,39,*     </ul>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,40,* </p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,42,* <p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,43,* For now this code support the following kind of generic declarations :
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,44,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,45,"* interface GenericsNest&lt;K extends Comparable&lt;K&gt; & Cloneable&gt; extends Map&lt;K, Set&lt;Number&gt;&gt; {"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,46,*     Set&lt;Number&gt; remove(Object key); // override with fixed ParameterizedType
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,47,*     List&lt;? super Integer&gt; returning_wildcard_with_class_lower_bound();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,48,*     List&lt;? super K&gt; returning_wildcard_with_typeVar_lower_bound();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,49,*     List&lt;? extends K&gt; returning_wildcard_with_typeVar_upper_bound();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,50,*     K returningK();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,51,*     &lt;O extends K&gt; List&lt;O&gt; paramType_with_type_params();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,52,"*     &lt;S, T extends S&gt; T two_type_params();"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,53,*     &lt;O extends K&gt; O typeVar_with_type_params();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,54,*     Number returningNonGeneric();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,56,* </code></pre>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,58,* @see #inferFrom(Type)
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,59,* @see #resolveGenericReturnType(Method)
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,60,* @see #toMock(Answer)
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,61,* @see org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubs
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,63,@Incubating
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,64,public abstract class GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,66,// public static MockitoLogger logger = new ConsoleMockitoLogger();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,69,* Represents actual type variables resolved for current class.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,71,"protected Map<TypeVariable, Type> contextualActualTypeParameters = new HashMap<TypeVariable, Type>();"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,74,protected void registerTypeVariablesOn(Type classType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,75,if (!(classType instanceof ParameterizedType)) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,76,return;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,78,ParameterizedType parameterizedType = (ParameterizedType) classType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,79,TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,80,Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,81,for (int i = 0; i < actualTypeArguments.length; i++) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,82,TypeVariable typeParameter = typeParameters[i];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,83,Type actualTypeArgument = actualTypeArguments[i];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,85,if (actualTypeArgument instanceof WildcardType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,86,"contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,87,} else {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,88,"contextualActualTypeParameters.put(typeParameter, actualTypeArgument);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,90,"// logger.log(""For '"" + parameterizedType + ""' found type variable : { '"" + typeParameter + ""("" + System.identityHashCode(typeParameter) + "")"" + ""' : '"" + actualTypeArgument + ""("" + System.identityHashCode(typeParameter) + "")"" + ""' }"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,94,protected void registerTypeParametersOn(TypeVariable[] typeParameters) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,95,for (TypeVariable typeParameter : typeParameters) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,96,"contextualActualTypeParameters.put(typeParameter, boundsOf(typeParameter));"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,97,"// logger.log(""For '"" + typeParameter.getGenericDeclaration() + ""' found type variable : { '"" + typeParameter + ""("" + System.identityHashCode(typeParameter) + "")"" + ""' : '"" + boundsOf(typeParameter) + ""' }"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,102,* @param typeParameter The TypeVariable parameter
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,103,"* @return A {@link BoundedType} for easy bound information, if first bound is a TypeVariable"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,104,*         then retrieve BoundedType of this TypeVariable
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,106,private BoundedType boundsOf(TypeVariable typeParameter) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,107,if (typeParameter.getBounds()[0] instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,108,return boundsOf((TypeVariable) typeParameter.getBounds()[0]);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,110,return new TypeVarBoundedType(typeParameter);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,114,* @param wildCard The WildCard type
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,115,"* @return A {@link BoundedType} for easy bound information, if first bound is a TypeVariable"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,116,*         then retrieve BoundedType of this TypeVariable
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,118,private BoundedType boundsOf(WildcardType wildCard) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,120,*  According to JLS(http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1):
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,121,"*  - Lower and upper can't coexist: (for instance, this is not allowed: <? extends List<String> & super MyInterface>)"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,122,"*  - Multiple bounds are not supported (for instance, this is not allowed: <? extends List<String> & MyInterface>)"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,125,WildCardBoundedType wildCardBoundedType = new WildCardBoundedType(wildCard);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,126,if (wildCardBoundedType.firstBound() instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,127,return boundsOf((TypeVariable) wildCardBoundedType.firstBound());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,130,return wildCardBoundedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,136,* @return Raw type of the current instance.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,138,public abstract Class<?> rawType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,143,"* @return Returns extra interfaces <strong>if relevant</strong>, otherwise empty List."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,145,public List<Type> extraInterfaces() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,146,return Collections.emptyList();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,150,* @return Returns an array with the raw types of {@link #extraInterfaces()} <strong>if relevant</strong>.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,152,public Class<?>[] rawExtraInterfaces() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,153,return new Class[0];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,159,* @return Actual type arguments matching the type variables of the raw type represented by this {@link GenericMetadataSupport} instance.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,161,"public Map<TypeVariable, Type> actualTypeArguments() {"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,162,TypeVariable[] typeParameters = rawType().getTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,163,"LinkedHashMap<TypeVariable, Type> actualTypeArguments = new LinkedHashMap<TypeVariable, Type>();"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,165,for (TypeVariable typeParameter : typeParameters) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,167,Type actualType = getActualTypeArgumentFor(typeParameter);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,169,"actualTypeArguments.put(typeParameter, actualType);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,170,"// logger.log(""For '"" + rawType().getCanonicalName() + ""' returning explicit TypeVariable : { '"" + typeParameter + ""("" + System.identityHashCode(typeParameter) + "")"" + ""' : '"" + actualType +""' }"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,173,return actualTypeArguments;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,176,protected Type getActualTypeArgumentFor(TypeVariable typeParameter) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,177,Type type = this.contextualActualTypeParameters.get(typeParameter);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,178,if (type instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,179,TypeVariable typeVariable = (TypeVariable) type;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,180,return getActualTypeArgumentFor(typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,183,return type;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,189,* Resolve current method generic return type to a {@link GenericMetadataSupport}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,191,* @param method Method to resolve the return type.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,192,* @return {@link GenericMetadataSupport} representing this generic return type.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,194,public GenericMetadataSupport resolveGenericReturnType(Method method) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,195,Type genericReturnType = method.getGenericReturnType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,196,"// logger.log(""Method '"" + method.toGenericString() + ""' has return type : "" + genericReturnType.getClass().getInterfaces()[0].getSimpleName() + "" : "" + genericReturnType);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,198,if (genericReturnType instanceof Class) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,199,return new NotGenericReturnTypeSupport(genericReturnType);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,201,if (genericReturnType instanceof ParameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,202,"return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,204,if (genericReturnType instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,205,"return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,208,"throw new MockitoException(""Ouch, it shouldn't happen, type '"" + genericReturnType.getClass().getCanonicalName() + ""' on method : '"" + method.toGenericString() + ""' is not supported : "" + genericReturnType);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,212,* Create an new instance of {@link GenericMetadataSupport} inferred from a {@link Type}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,214,* <p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,215,"*     At the moment <code>type</code> can only be a {@link Class} or a {@link ParameterizedType}, otherwise"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,216,*     it'll throw a {@link MockitoException}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,217,* </p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,219,* @param type The class from which the {@link GenericMetadataSupport} should be built.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,220,* @return The new {@link GenericMetadataSupport}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,221,* @throws MockitoException Raised if type is not a {@link Class} or a {@link ParameterizedType}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,223,public static GenericMetadataSupport inferFrom(Type type) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,224,"Checks.checkNotNull(type, ""type"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,225,if (type instanceof Class) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,226,return new FromClassGenericMetadataSupport((Class<?>) type);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,228,if (type instanceof ParameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,229,return new FromParameterizedTypeGenericMetadataSupport((ParameterizedType) type);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,232,"throw new MockitoException(""Type meta-data for this Type ("" + type.getClass().getCanonicalName() + "") is not supported : "" + type);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,237,//// Below are specializations of GenericMetadataSupport that could handle retrieval of possible Types
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,241,* Generic metadata implementation for {@link Class}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,243,* Offer support to retrieve generic metadata on a {@link Class} by reading type parameters and type variables on
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,244,* the class and its ancestors and interfaces.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,246,private static class FromClassGenericMetadataSupport extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,247,private Class<?> clazz;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,249,public FromClassGenericMetadataSupport(Class<?> clazz) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,250,this.clazz = clazz;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,251,readActualTypeParametersOnDeclaringClass();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,254,private void readActualTypeParametersOnDeclaringClass() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,255,registerTypeParametersOn(clazz.getTypeParameters());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,256,registerTypeVariablesOn(clazz.getGenericSuperclass());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,257,for (Type genericInterface : clazz.getGenericInterfaces()) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,258,registerTypeVariablesOn(genericInterface);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,262,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,263,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,264,return clazz;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,270,"* Generic metadata implementation for ""standalone"" {@link ParameterizedType}."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,272,* Offer support to retrieve generic metadata on a {@link ParameterizedType} by reading type variables of
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,273,* the related raw type and declared type variable of this parameterized type.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,275,"* This class is not designed to work on ParameterizedType returned by {@link Method#getGenericReturnType()}, as"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,276,* the ParameterizedType instance return in these cases could have Type Variables that refer to type declaration(s).
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,277,"* That's what meant the ""standalone"" word at the beginning of the Javadoc."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,278,* Instead use {@link ParameterizedReturnType}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,280,private static class FromParameterizedTypeGenericMetadataSupport extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,281,private ParameterizedType parameterizedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,283,public FromParameterizedTypeGenericMetadataSupport(ParameterizedType parameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,284,this.parameterizedType = parameterizedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,285,readActualTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,288,private void readActualTypeParameters() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,289,registerTypeVariablesOn(parameterizedType.getRawType());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,290,registerTypeVariablesOn(parameterizedType);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,293,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,294,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,295,return (Class<?>) parameterizedType.getRawType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,301,* Generic metadata specific to {@link ParameterizedType} returned via {@link Method#getGenericReturnType()}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,303,private static class ParameterizedReturnType extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,304,private final ParameterizedType parameterizedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,305,private final TypeVariable[] typeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,307,"public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, ParameterizedType parameterizedType) {"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,308,this.parameterizedType = parameterizedType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,309,this.typeParameters = typeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,310,this.contextualActualTypeParameters = source.contextualActualTypeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,312,readTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,313,readTypeVariables();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,316,private void readTypeParameters() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,317,registerTypeParametersOn(typeParameters);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,320,private void readTypeVariables() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,321,registerTypeVariablesOn(parameterizedType);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,324,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,325,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,326,return (Class<?>) parameterizedType.getRawType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,333,* Generic metadata for {@link TypeVariable} returned via {@link Method#getGenericReturnType()}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,335,private static class TypeVariableReturnType extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,336,private final TypeVariable typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,337,private final TypeVariable[] typeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,338,private Class<?> rawType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,342,"public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, TypeVariable typeVariable) {"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,343,this.typeParameters = typeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,344,this.typeVariable = typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,345,this.contextualActualTypeParameters = source.contextualActualTypeParameters;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,347,readTypeParameters();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,348,readTypeVariables();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,351,private void readTypeParameters() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,352,registerTypeParametersOn(typeParameters);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,355,private void readTypeVariables() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,356,for (Type type : typeVariable.getBounds()) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,357,registerTypeVariablesOn(type);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,359,registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,362,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,363,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,364,if (rawType == null) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,365,rawType = extractRawTypeOf(typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,367,return rawType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,370,private Class<?> extractRawTypeOf(Type type) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,371,if (type instanceof Class) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,372,return (Class<?>) type;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,374,if (type instanceof ParameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,375,return (Class<?>) ((ParameterizedType) type).getRawType();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,377,if (type instanceof BoundedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,378,return extractRawTypeOf(((BoundedType) type).firstBound());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,380,if (type instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,382,"* If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,383,"* on the class definition, such as such as List<E>."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,385,return extractRawTypeOf(contextualActualTypeParameters.get(type));
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,387,"throw new MockitoException(""Raw extraction not supported for : '"" + type + ""'"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,390,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,391,public List<Type> extraInterfaces() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,392,Type type = extractActualBoundedTypeOf(typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,393,if (type instanceof BoundedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,394,return Arrays.asList(((BoundedType) type).interfaceBounds());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,396,if (type instanceof ParameterizedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,397,return Collections.singletonList(type);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,399,if (type instanceof Class) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,400,return Collections.emptyList();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,402,"throw new MockitoException(""Cannot extract extra-interfaces from '"" + typeVariable + ""' : '"" + type + ""'"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,406,* @return Returns an array with the extracted raw types of {@link #extraInterfaces()}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,407,* @see #extractRawTypeOf(java.lang.reflect.Type)
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,409,public Class<?>[] rawExtraInterfaces() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,410,List<Type> extraInterfaces = extraInterfaces();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,411,List<Class<?>> rawExtraInterfaces = new ArrayList<Class<?>>();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,412,for (Type extraInterface : extraInterfaces) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,413,Class<?> rawInterface = extractRawTypeOf(extraInterface);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,414,"// avoid interface collision with actual raw type (with typevariables, resolution ca be quite aggressive)"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,415,if(!rawType().equals(rawInterface)) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,416,rawExtraInterfaces.add(rawInterface);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,419,return rawExtraInterfaces.toArray(new Class[rawExtraInterfaces.size()]);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,422,private Type extractActualBoundedTypeOf(Type type) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,423,if (type instanceof TypeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,425,"If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,426,"on the class definition, such as such as List<E>."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,428,return extractActualBoundedTypeOf(contextualActualTypeParameters.get(type));
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,430,if (type instanceof BoundedType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,431,Type actualFirstBound = extractActualBoundedTypeOf(((BoundedType) type).firstBound());
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,432,if (!(actualFirstBound instanceof BoundedType)) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,433,"return type; // avoid going one step further, ie avoid : O(TypeVar) -> K(TypeVar) -> Some ParamType"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,435,return actualFirstBound;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,437,"return type; // irrelevant, we don't manage other types as they are not bounded."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,444,* Non-Generic metadata for {@link Class} returned via {@link Method#getGenericReturnType()}.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,446,private static class NotGenericReturnTypeSupport extends GenericMetadataSupport {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,447,private final Class<?> returnType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,449,public NotGenericReturnTypeSupport(Type genericReturnType) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,450,returnType = (Class<?>) genericReturnType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,453,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,454,public Class<?> rawType() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,455,return returnType;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,462,* Type representing bounds of a type
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,464,* @see TypeVarBoundedType
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,465,"* @see <a href=""http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4"">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,466,* @see WildCardBoundedType
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,467,"* @see <a href=""http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1"">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.5.1</a>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,469,public static interface BoundedType extends Type {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,470,Type firstBound();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,472,Type[] interfaceBounds();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,476,"* Type representing bounds of a type variable, allows to keep all bounds information."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,478,"* <p>It uses the first bound in the array, as this array is never null and always contains at least"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,479,* one element (Object is always here if no bounds are declared).</p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,481,"* <p>If upper bounds are declared with SomeClass and additional interfaces, then firstBound will be SomeClass and"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,482,* interfacesBound will be an array of the additional interfaces.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,484,* i.e. <code>SomeClass</code>.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,485,"* <pre class=""code""><code class=""java"">"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,486,*     interface UpperBoundedTypeWithClass<E extends Comparable<E> & Cloneable> {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,487,*         E get();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,489,*     // will return Comparable type
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,490,* </code></pre>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,491,* </p>
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,493,"* @see <a href=""http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4"">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,495,public static class TypeVarBoundedType implements BoundedType {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,496,private TypeVariable typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,499,public TypeVarBoundedType(TypeVariable typeVariable) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,500,this.typeVariable = typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,504,"* @return either a class or an interface (parameterized or not), if no bounds declared Object is returned."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,506,public Type firstBound() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,507,return typeVariable.getBounds()[0]; //
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,511,"* On a Type Variable (typeVar extends C_0 & I_1 & I_2 & etc), will return an array"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,512,* containing I_1 and I_2.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,514,"* @return other bounds for this type, these bounds can only be only interfaces as the JLS says,"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,515,* empty array if no other bound declared.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,517,public Type[] interfaceBounds() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,518,Type[] interfaceBounds = new Type[typeVariable.getBounds().length - 1];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,519,"System.arraycopy(typeVariable.getBounds(), 1, interfaceBounds, 0, typeVariable.getBounds().length - 1);"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,520,return interfaceBounds;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,523,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,524,public boolean equals(Object o) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,525,if (this == o) return true;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,526,if (o == null || getClass() != o.getClass()) return false;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,528,return typeVariable.equals(((TypeVarBoundedType) o).typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,532,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,533,public int hashCode() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,534,return typeVariable.hashCode();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,537,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,538,public String toString() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,539,final StringBuilder sb = new StringBuilder();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,540,"sb.append(""{firstBound="").append(firstBound());"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,541,"sb.append("", interfaceBounds="").append(Arrays.deepToString(interfaceBounds()));"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,542,sb.append('}');
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,543,return sb.toString();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,546,public TypeVariable typeVariable() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,547,return typeVariable;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,552,"* Type representing bounds of a wildcard, allows to keep all bounds information."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,554,"* <p>The JLS says that lower bound and upper bound are mutually exclusive, and that multiple bounds"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,555,* are not allowed.
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,557,"* @see <a href=""http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4"">http://docs.oracle.com/javase/specs/jls/se5.0/html/typesValues.html#4.4</a>"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,559,public static class WildCardBoundedType implements BoundedType {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,560,private WildcardType wildcard;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,563,public WildCardBoundedType(WildcardType wildcard) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,564,this.wildcard = wildcard;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,568,"* @return The first bound, either a type or a reference to a TypeVariable"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,570,public Type firstBound() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,571,Type[] lowerBounds = wildcard.getLowerBounds();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,572,Type[] upperBounds = wildcard.getUpperBounds();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,574,return lowerBounds.length != 0 ? lowerBounds[0] : upperBounds[0];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,578,"* @return An empty array as, wildcard don't support multiple bounds."
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,580,public Type[] interfaceBounds() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,581,return new Type[0];
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,584,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,585,public boolean equals(Object o) {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,586,if (this == o) return true;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,587,if (o == null || getClass() != o.getClass()) return false;
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,589,return wildcard.equals(((TypeVarBoundedType) o).typeVariable);
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,593,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,594,public int hashCode() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,595,return wildcard.hashCode();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,598,@Override
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,599,public String toString() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,600,final StringBuilder sb = new StringBuilder();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,601,"sb.append(""{firstBound="").append(firstBound());"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,602,"sb.append("", interfaceBounds=[]}"");"
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,603,return sb.toString();
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,606,public WildcardType wildCard() {
True,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,src/org/mockito/internal/util/reflection/GenericMetadataSupport.java,607,return wildcard;
True,test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java,test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java,28,import org.mockito.internal.stubbing.defaultanswers.ReturnsGenericDeepStubsTest;
False,test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java,test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java,121,esetTest.class
True,test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java,test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java,122,"ResetTest.class,"
True,test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java,test/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java,123,ReturnsGenericDeepStubsTest.class
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,5,package org.mockito.internal.stubbing.defaultanswers;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,7,import org.junit.Test;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,9,import java.util.Iterator;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,10,import java.util.List;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,11,import java.util.Map;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,12,import java.util.Set;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,14,import static org.fest.assertions.Assertions.assertThat;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,15,import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,16,import static org.mockito.Mockito.mock;
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,18,"@SuppressWarnings(""unused"")"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,19,public class ReturnsGenericDeepStubsTest {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,20,interface ListOfInteger extends List<Integer> {}
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,22,"interface GenericsNest<K extends Comparable<K> & Cloneable> extends Map<K, Set<Number>> {"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,23,Set<Number> remove(Object key); // override with fixed ParameterizedType
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,24,List<? super Number> returningWildcard();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,25,"Map<String, K> returningNonMockableNestedGeneric();"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,26,K returningK();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,27,<O extends K> List<O> paramTypeWithTypeParams();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,28,"<S extends Appendable, T extends S> T twoTypeParams(S s);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,29,<O extends K> O typeVarWithTypeParams();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,30,Number returnsNormalType();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,33,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,34,public void generic_deep_mock_frenzy__look_at_these_chained_calls() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,35,"GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,37,"Set<? extends Map.Entry<? extends Cloneable, Set<Number>>> entries = mock.entrySet();"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,38,"Iterator<? extends Map.Entry<? extends Cloneable,Set<Number>>> entriesIterator = mock.entrySet().iterator();"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,39,"Map.Entry<? extends Cloneable, Set<Number>> nextEntry = mock.entrySet().iterator().next();"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,41,Cloneable cloneableKey = mock.entrySet().iterator().next().getKey();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,42,Comparable<?> comparableKey = mock.entrySet().iterator().next().getKey();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,44,Set<Number> value = mock.entrySet().iterator().next().getValue();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,45,Iterator<Number> numbersIterator = mock.entrySet().iterator().next().getValue().iterator();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,46,Number number = mock.entrySet().iterator().next().getValue().iterator().next();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,49,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,50,public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,51,"GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,53,Cloneable cloneable_bound_that_is_declared_on_typevar_K_in_the_class_which_is_referenced_by_typevar_O_declared_on_the_method =
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,54,mock.paramTypeWithTypeParams().get(0);
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,55,Comparable<?> comparable_bound_that_is_declared_on_typevar_K_in_the_class_which_is_referenced_by_typevar_O_declared_on_the_method =
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,56,mock.paramTypeWithTypeParams().get(0);
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,59,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,60,public void can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,61,"GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,63,Cloneable cloneable_bound_of_typevar_K = mock.returningK();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,64,Comparable<?> comparable_bound_of_typevar_K = mock.returningK();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,67,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,68,public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,69,"GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,71,Cloneable cloneable_bound_of_typevar_K_referenced_by_typevar_O = (Cloneable) mock.typeVarWithTypeParams();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,72,Comparable<?> comparable_bound_of_typevar_K_referenced_by_typevar_O = (Comparable) mock.typeVarWithTypeParams();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,75,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,76,public void can_create_mock_from_return_types_declared_with_a_bounded_wildcard() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,77,"GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,79,List<? super Integer> objects = mock.returningWildcard();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,80,Number type_that_is_the_upper_bound_of_the_wildcard = (Number) mock.returningWildcard().get(45);
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,81,type_that_is_the_upper_bound_of_the_wildcard.floatValue();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,84,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,85,public void can_still_work_with_raw_type_in_the_return_type() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,86,"GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,88,Number the_raw_type_that_should_be_returned = mock.returnsNormalType();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,89,the_raw_type_that_should_be_returned.floatValue();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,92,@Test
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,93,public void will_return_default_value_on_non_mockable_nested_generic() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,94,"GenericsNest<?> genericsNest = mock(GenericsNest.class, RETURNS_DEEP_STUBS);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,95,"ListOfInteger listOfInteger = mock(ListOfInteger.class, RETURNS_DEEP_STUBS);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,97,assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,98,assertThat(listOfInteger.get(25)).isEqualTo(0);
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,101,@Test(expected = ClassCastException.class)
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,102,public void as_expected_fail_with_a_CCE_on_callsite_when_erasure_takes_place_for_example___StringBuilder_is_subject_to_erasure() throws Exception {
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,103,"GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);"
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,105,// following assignment needed to create a ClassCastException on the call site (i.e. : here)
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,106,StringBuilder stringBuilder_assignment_that_should_throw_a_CCE =
True,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,107,mock.twoTypeParams(new StringBuilder()).append(2).append(3);
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,2, Copyright (c) 2007 Mockito contributors
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,3, This program is made available under the terms of the MIT License.
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,3,* This program is made available under the terms of the MIT License.
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,7,mport static org.junit.Assert.*;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,7,import org.junit.Test;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,10,mport java.util.Collection;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,11,mport java.util.List;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,12,mport java.util.Map;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,13,mport java.util.Set;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,10,import java.lang.reflect.Type;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,11,import java.util.*;
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,15,mport org.junit.Test;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,13,import static org.junit.Assert.assertEquals;
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,26,public interface ListSet extends List<Set> {}
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,27,"public interface MapNumberString extends Map<Number, String> {}"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,28,"public class HashMapNumberString<K extends Number> extends HashMap<K, String> {}"
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,30,public List<Number> numberList() { return null; }
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,31,public Comparable<Number> numberComparable() { return null; }
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,32,public List rawList() { return null; }
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,33,public List<? extends Type> typeList() { return null; }
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,29,ublic void shouldFindGenericClass() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,38,public void should_find_generic_class() throws Exception {
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,36,ublic void shouldGetObjectForNonGeneric() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,45,public void should_get_object_for_non_generic() throws Exception {
False,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,41,ublic void shouldDealWithNestedGenerics() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMasterTest.java,test/org/mockito/internal/util/reflection/GenericMasterTest.java,50,public void should_deal_with_nested_generics() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,5,package org.mockito.internal.util.reflection;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,7,import org.junit.Test;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,9,import java.io.Serializable;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,10,import java.lang.reflect.Method;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,11,import java.lang.reflect.Type;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,12,import java.lang.reflect.TypeVariable;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,13,import java.util.Collection;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,14,import java.util.List;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,15,import java.util.Map;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,16,import java.util.Set;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,18,import static org.fest.assertions.Assertions.assertThat;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,19,import static org.junit.Assert.fail;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,20,import static org.mockito.internal.util.reflection.GenericMetadataSupport.inferFrom;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,22,"@SuppressWarnings(""unused"")"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,23,public class GenericMetadataSupportTest {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,25,interface UpperBoundedTypeWithClass<E extends Number & Comparable<E>> {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,26,E get();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,28,interface UpperBoundedTypeWithInterfaces<E extends Comparable<E> & Cloneable> {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,29,E get();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,31,interface ListOfNumbers extends List<Number> {}
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,32,interface ListOfAnyNumbers<N extends Number & Cloneable> extends List<N> {}
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,34,"interface GenericsNest<K extends Comparable<K> & Cloneable> extends Map<K, Set<Number>> {"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,35,Set<Number> remove(Object key); // override with fixed ParameterizedType
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,36,List<? super Integer> returning_wildcard_with_class_lower_bound();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,37,List<? super K> returning_wildcard_with_typeVar_lower_bound();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,38,List<? extends K> returning_wildcard_with_typeVar_upper_bound();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,39,K returningK();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,40,<O extends K> List<O> paramType_with_type_params();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,41,"<S, T extends S> T two_type_params();"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,42,<O extends K> O typeVar_with_type_params();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,45,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,46,public void can_get_raw_type_from_Class() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,47,assertThat(inferFrom(ListOfAnyNumbers.class).rawType()).isEqualTo(ListOfAnyNumbers.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,48,assertThat(inferFrom(ListOfNumbers.class).rawType()).isEqualTo(ListOfNumbers.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,49,assertThat(inferFrom(GenericsNest.class).rawType()).isEqualTo(GenericsNest.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,53,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,54,public void can_get_raw_type_from_ParameterizedType() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,55,assertThat(inferFrom(ListOfAnyNumbers.class.getGenericInterfaces()[0]).rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,56,assertThat(inferFrom(ListOfNumbers.class.getGenericInterfaces()[0]).rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,57,assertThat(inferFrom(GenericsNest.class.getGenericInterfaces()[0]).rawType()).isEqualTo(Map.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,60,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,61,public void can_get_type_variables_from_Class() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,62,"assertThat(inferFrom(GenericsNest.class).actualTypeArguments().keySet()).hasSize(1).onProperty(""name"").contains(""K"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,63,assertThat(inferFrom(ListOfNumbers.class).actualTypeArguments().keySet()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,64,"assertThat(inferFrom(ListOfAnyNumbers.class).actualTypeArguments().keySet()).hasSize(1).onProperty(""name"").contains(""N"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,65,"assertThat(inferFrom(Map.class).actualTypeArguments().keySet()).hasSize(2).onProperty(""name"").contains(""K"", ""V"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,66,assertThat(inferFrom(Serializable.class).actualTypeArguments().keySet()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,69,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,70,public void can_get_type_variables_from_ParameterizedType() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,71,"assertThat(inferFrom(GenericsNest.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).hasSize(2).onProperty(""name"").contains(""K"", ""V"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,72,"assertThat(inferFrom(ListOfAnyNumbers.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).hasSize(1).onProperty(""name"").contains(""E"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,73,"assertThat(inferFrom(Integer.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).hasSize(1).onProperty(""name"").contains(""T"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,74,assertThat(inferFrom(StringBuilder.class.getGenericInterfaces()[0]).actualTypeArguments().keySet()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,77,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,78,public void typeVariable_return_type_of____get____resolved_to_Set_and_type_argument_to_Number() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,79,"GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""get"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,81,assertThat(genericMetadata.rawType()).isEqualTo(Set.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,82,assertThat(genericMetadata.actualTypeArguments().values()).contains(Number.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,85,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,86,public void bounded_typeVariable_return_type_of____returningK____resolved_to_Comparable_and_with_BoundedType() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,87,"GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returningK"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,89,assertThat(genericMetadata.rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,90,GenericMetadataSupport extraInterface_0 = inferFrom(genericMetadata.extraInterfaces().get(0));
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,91,assertThat(extraInterface_0.rawType()).isEqualTo(Cloneable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,94,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,95,public void fixed_ParamType_return_type_of____remove____resolved_to_Set_and_type_argument_to_Number() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,96,"GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""remove"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,98,assertThat(genericMetadata.rawType()).isEqualTo(Set.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,99,assertThat(genericMetadata.actualTypeArguments().values()).contains(Number.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,102,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,103,public void paramType_return_type_of____values____resolved_to_Collection_and_type_argument_to_Parameterized_Set() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,104,"GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""values"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,106,assertThat(genericMetadata.rawType()).isEqualTo(Collection.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,107,"GenericMetadataSupport fromTypeVariableE = inferFrom(typeVariableValue(genericMetadata.actualTypeArguments(), ""E""));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,108,assertThat(fromTypeVariableE.rawType()).isEqualTo(Set.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,109,assertThat(fromTypeVariableE.actualTypeArguments().values()).contains(Number.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,112,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,113,public void paramType_with_type_parameters_return_type_of____paramType_with_type_params____resolved_to_Collection_and_type_argument_to_Parameterized_Set() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,114,"GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""paramType_with_type_params"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,116,assertThat(genericMetadata.rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,117,"Type firstBoundOfE = ((GenericMetadataSupport.TypeVarBoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), ""E"")).firstBound();"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,118,assertThat(inferFrom(firstBoundOfE).rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,121,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,122,public void typeVariable_with_type_parameters_return_type_of____typeVar_with_type_params____resolved_K_hence_to_Comparable_and_with_BoundedType() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,123,"GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""typeVar_with_type_params"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,125,assertThat(genericMetadata.rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,126,GenericMetadataSupport extraInterface_0 = inferFrom(genericMetadata.extraInterfaces().get(0));
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,127,assertThat(extraInterface_0.rawType()).isEqualTo(Cloneable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,130,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,131,public void class_return_type_of____append____resolved_to_StringBuilder_and_type_arguments() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,132,"GenericMetadataSupport genericMetadata = inferFrom(StringBuilder.class).resolveGenericReturnType(firstNamedMethod(""append"", StringBuilder.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,134,assertThat(genericMetadata.rawType()).isEqualTo(StringBuilder.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,135,assertThat(genericMetadata.actualTypeArguments()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,140,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,141,public void paramType_with_wildcard_return_type_of____returning_wildcard_with_class_lower_bound____resolved_to_List_and_type_argument_to_Integer() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,142,"GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returning_wildcard_with_class_lower_bound"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,144,assertThat(genericMetadata.rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,145,"GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), ""E"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,146,assertThat(boundedType.firstBound()).isEqualTo(Integer.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,147,assertThat(boundedType.interfaceBounds()).isEmpty();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,150,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,151,public void paramType_with_wildcard_return_type_of____returning_wildcard_with_typeVar_lower_bound____resolved_to_List_and_type_argument_to_Integer() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,152,"GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returning_wildcard_with_typeVar_lower_bound"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,154,assertThat(genericMetadata.rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,155,"GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), ""E"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,157,assertThat(inferFrom(boundedType.firstBound()).rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,158,assertThat(boundedType.interfaceBounds()).contains(Cloneable.class);    }
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,160,@Test
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,161,public void paramType_with_wildcard_return_type_of____returning_wildcard_with_typeVar_upper_bound____resolved_to_List_and_type_argument_to_Integer() throws Exception {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,162,"GenericMetadataSupport genericMetadata = inferFrom(GenericsNest.class).resolveGenericReturnType(firstNamedMethod(""returning_wildcard_with_typeVar_upper_bound"", GenericsNest.class));"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,164,assertThat(genericMetadata.rawType()).isEqualTo(List.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,165,"GenericMetadataSupport.BoundedType boundedType = (GenericMetadataSupport.BoundedType) typeVariableValue(genericMetadata.actualTypeArguments(), ""E"");"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,167,assertThat(inferFrom(boundedType.firstBound()).rawType()).isEqualTo(Comparable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,168,assertThat(boundedType.interfaceBounds()).contains(Cloneable.class);
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,173,"private Type typeVariableValue(Map<TypeVariable, Type> typeVariables, String typeVariableName) {"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,174,"for (Map.Entry<TypeVariable, Type> typeVariableTypeEntry : typeVariables.entrySet()) {"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,175,if (typeVariableTypeEntry.getKey().getName().equals(typeVariableName)) {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,176,return typeVariableTypeEntry.getValue();
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,180,"fail(""'"" + typeVariableName + ""' was not found in "" + typeVariables);"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,181,return null; // unreachable
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,184,"private Method firstNamedMethod(String methodName, Class<?> clazz) {"
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,185,for (Method method : clazz.getMethods()) {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,186,if (method.getName().contains(methodName)) {
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,187,return method;
True,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,190,"throw new IllegalStateException(""The method : '"" + methodName + ""' do not exist in '"" + clazz.getSimpleName() + ""'"");"

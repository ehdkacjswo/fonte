is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/internal/util/ListUtil.java,src/org/mockito/internal/util/ListUtil.java,7,import java.util.Collection;
False,src/org/mockito/internal/util/ListUtil.java,src/org/mockito/internal/util/ListUtil.java,8,mport java.util.List;
False,src/org/mockito/internal/util/ListUtil.java,src/org/mockito/internal/util/ListUtil.java,12,"ublic static <T> LinkedList<T> filter(List<T> list, Filter<T> filter) {"
True,src/org/mockito/internal/util/ListUtil.java,src/org/mockito/internal/util/ListUtil.java,12,"public static <T> LinkedList<T> filter(Collection<T> collection, Filter<T> filter) {"
False,src/org/mockito/internal/util/ListUtil.java,src/org/mockito/internal/util/ListUtil.java,14,or (T t : list) {
True,src/org/mockito/internal/util/ListUtil.java,src/org/mockito/internal/util/ListUtil.java,14,for (T t : collection) {
True,src/org/mockito/internal/verification/RegisteredInvocations.java,src/org/mockito/internal/verification/RegisteredInvocations.java,7,import java.util.Collections;
False,src/org/mockito/internal/verification/RegisteredInvocations.java,src/org/mockito/internal/verification/RegisteredInvocations.java,17,rivate final LinkedList<Invocation> invocations = new LinkedList<Invocation>();
True,src/org/mockito/internal/verification/RegisteredInvocations.java,src/org/mockito/internal/verification/RegisteredInvocations.java,18,private final List<Invocation> invocations = Collections.synchronizedList(new LinkedList<Invocation>());
False,src/org/mockito/internal/verification/RegisteredInvocations.java,src/org/mockito/internal/verification/RegisteredInvocations.java,24,nvocations.removeLast();
True,src/org/mockito/internal/verification/RegisteredInvocations.java,src/org/mockito/internal/verification/RegisteredInvocations.java,25,invocations.remove(invocations.size()-1);
False,test/org/mockitousage/MultiThreadedTest.java,test/org/concurrentmockito/MultiThreadedTest.java,5,ackage org.mockitousage;
True,test/org/mockitousage/MultiThreadedTest.java,test/org/concurrentmockito/MultiThreadedTest.java,5,package org.concurrentmockito;
True,test/org/mockitousage/MultiThreadedTest.java,test/org/concurrentmockito/MultiThreadedTest.java,40,import org.mockitousage.ReplacingObjectMethodsTest;
True,test/org/mockitousage/MultiThreadedTest.java,test/org/concurrentmockito/MultiThreadedTest.java,41,import org.mockitousage.UsingVarargsTest;
False,test/org/mockitousage/MultiThreadedTest.java,test/org/concurrentmockito/MultiThreadedTest.java,191,nt numberOfThreads = 10;
True,test/org/mockitousage/MultiThreadedTest.java,test/org/concurrentmockito/MultiThreadedTest.java,193,int numberOfThreads = 20;
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,2,* Copyright (c) 2007 Mockito contributors
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,3,* This program is made available under the terms of the MIT License.
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,5,package org.concurrentmockito;
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,7,import static org.mockito.Mockito.*;
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,9,import org.junit.Test;
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,10,import org.mockito.TestBase;
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,11,import org.mockitousage.IMethods;
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,13,public class ThreadsShareAMockTest extends TestBase {
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,15,private IMethods mock;
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,17,@Test
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,18,public void testShouldAllowVerifyingInThreads() throws Exception {
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,19,for(int i = 0; i < 100; i++) {
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,20,performTest();
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,24,private void performTest() throws InterruptedException {
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,25,mock = mock(IMethods.class);
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,26,final Thread[] listeners = new Thread[3];
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,27,for (int i = 0; i < listeners.length; i++) {
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,28,listeners[i] = new Thread() {
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,29,@Override
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,30,public void run() {
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,31,"mock.simpleMethod(""foo"");"
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,34,listeners[i].start();
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,36,for (int i = 0; i < listeners.length; i++) {
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,37,listeners[i].join();
True,test/org/concurrentmockito/ThreadsShareAMockTest.java,test/org/concurrentmockito/ThreadsShareAMockTest.java,39,"verify(mock, times(listeners.length)).simpleMethod(""foo"");"

is_addition,old_file_path,new_file_path,line_num,content
True,src/org/mockito/Captor.java,src/org/mockito/Captor.java,25,* <p>
True,src/org/mockito/Captor.java,src/org/mockito/Captor.java,26,* One of the advantages of using &#64;Captor annotation is that you can avoid warnings related capturing complex generic types.
False,src/org/mockito/Spy.java,src/org/mockito/Spy.java,6, Allows shorthand wrapping of field instances in an spy object. <b>Warning</b> if you call
False,src/org/mockito/Spy.java,src/org/mockito/Spy.java,7, <code>MockitoAnnotations.init(this)</code> in a super class this will not work. Since
False,src/org/mockito/Spy.java,src/org/mockito/Spy.java,8,  fields in subclass are only instantiated after super class constructor has returned.
False,src/org/mockito/Spy.java,src/org/mockito/Spy.java,10, <p>Example:
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,6,* Allows shorthand wrapping of field instances in an spy object.
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,8,* <p>
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,9,* Example:
False,src/org/mockito/Spy.java,src/org/mockito/Spy.java,23, <p>Same as doing:
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,21,* <p>
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,22,* Same as doing:
False,src/org/mockito/Spy.java,src/org/mockito/Spy.java,25,    Foo spyOnFoo = Mockito.spy(new Foo());
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,25,* Foo spyOnFoo = Mockito.spy(new Foo());
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,28,* <b>Warning</b> if you call <code>MockitoAnnotations.init(this)</code> in a
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,29,* super class <b>constructor</b> then this will not work. It is because fields
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,30,* in subclass are only instantiated after super class constructor has returned.
True,src/org/mockito/Spy.java,src/org/mockito/Spy.java,31,* It's better to use &#64;Before.

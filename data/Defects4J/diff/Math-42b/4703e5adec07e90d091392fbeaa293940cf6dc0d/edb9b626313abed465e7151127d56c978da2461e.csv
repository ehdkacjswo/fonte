is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,249,"* Copy constructor.  Creates a new ResizableDoubleArray that is a deep,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,250,* fresh copy of the original. Needs to acquire synchronization lock
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,251,* on original.  Original may not be null; otherwise a NullPointerException
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,252,* is thrown.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,254,* @param original
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,256,public ResizableDoubleArray(ResizableDoubleArray original) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,257,"copy(original, this);"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,300,"hrow MathRuntimeException.createArrayIndexOutOfBoundsException(""cannot substitute an element from an empty array"","
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,301,ull);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,313,throw MathRuntimeException.createArrayIndexOutOfBoundsException(
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,314,"""cannot substitute an element from an empty array"", null);"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,306,nternalArray[startIndex + (numElements - 1)] = value;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,319,internalArray[startIndex + (numElements - 1)] = value;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,308,eturn discarded;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,321,return discarded;
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,317, @param contractionCritera critera to be checked
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,331,* @param contractionCritera criteria to be checked
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,389,"iscardExtremeElements(i,true);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,403,"discardExtremeElements(i,true);"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,405,"iscardExtremeElements(i,false);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,419,"discardExtremeElements(i,false);"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,456,"/ notice the use of Math.ceil(), this gaurantees that we will always"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,470,"// notice the use of Math.ceil(), this guarantees that we will always"
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,537, The expansion factor controls the size of a new aray when an array
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,551,* The expansion factor controls the size of a new array when an array
False,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,707,/ expanded to accomodate this new number of elements
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,721,// expanded to accommodate this new number of elements
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,758,"* <p>Copies source to dest, copying the underlying data, so dest is"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,759,"* a new, independent copy of source.  Does not contract before"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,760,* the copy.</p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,762,* <p>Obtains synchronization locks on both source and dest
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,763,* (in that order) before performing the copy.</p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,765,* <p>Neither source nor dest may be null; otherwise a NullPointerException
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,766,* is thrown</p>
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,769,"public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest) {"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,770,synchronized(source) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,771,synchronized(dest) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,772,dest.initialCapacity = source.initialCapacity;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,773,dest.contractionCriteria = source.contractionCriteria;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,774,dest.expansionFactor = source.expansionFactor;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,775,dest.expansionMode = source.expansionMode;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,776,dest.internalArray = new double[source.internalArray.length];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,777,"System.arraycopy(source.internalArray, 0, dest.internalArray,"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,778,"0, dest.internalArray.length);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,779,dest.numElements = source.numElements;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,780,dest.startIndex = source.startIndex;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,786,* Returns a copy of the ResizableDoubleArray.  Does not contract before
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,787,"* the copy, so the returned object is an exact copy of this."
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,789,* @return a new ResizableDoubleArray with the same data and configuration
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,790,* properties as this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,792,public synchronized ResizableDoubleArray copy() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,793,ResizableDoubleArray result = new ResizableDoubleArray();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,794,"copy(this, result);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,795,return result;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,799,* Returns true iff object is a ResizableDoubleArray with the same properties
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,800,* as this and an identical internal storage array.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,802,* @param object object to be compared for equality with this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,803,* @return true iff object is a ResizableDoubleArray with the same data and
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,804,* properties as this
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,807,public boolean equals(Object object) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,808,if (object == this ) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,809,return true;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,811,if (object instanceof ResizableDoubleArray == false) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,812,return false;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,814,boolean result = true;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,815,ResizableDoubleArray other = (ResizableDoubleArray) object;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,816,result = result && (other.initialCapacity == initialCapacity);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,817,result = result && (other.contractionCriteria == contractionCriteria);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,818,result = result && (other.expansionFactor == expansionFactor);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,819,result = result && (other.expansionMode == expansionMode);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,820,result = result && (other.numElements == numElements);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,821,result = result && (other.startIndex == startIndex);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,822,if (!result) {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,823,return false;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,824,} else {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,825,"return Arrays.equals(internalArray, other.internalArray);"
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,830,* Returns a hash code consistent with equals.
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,832,* @return hash code representing this ResizableDoubleArray
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,834,public int hashCode() {
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,835,int[] hashData = new int[7];
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,836,hashData[0] = Arrays.hashCode(internalArray);
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,837,hashData[1] = new Float(expansionFactor).hashCode();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,838,hashData[2] = new Float(contractionCriteria).hashCode();
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,839,hashData[3] = initialCapacity;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,840,hashData[4] = expansionMode;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,841,hashData[5] = numElements;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,842,hashData[6] = startIndex;
True,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,src/java/org/apache/commons/math/util/ResizableDoubleArray.java,843,return Arrays.hashCode(hashData);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,109,// Copy constructor
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,110,"testDa = new ResizableDoubleArray(2, 2.0f, 3.0f,"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,111,ResizableDoubleArray.ADDITIVE_MODE);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,112,testDa.addElement(2.0);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,113,testDa.addElement(3.2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,114,ResizableDoubleArray copyDa = new ResizableDoubleArray(testDa);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,115,"assertEquals(copyDa, testDa);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,116,"assertEquals(testDa, copyDa);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,414,public void testEqualsAndHashCode() throws Exception {
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,416,// Wrong type
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,417,ResizableDoubleArray first = new ResizableDoubleArray();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,418,Double other = new Double(2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,419,assertFalse(first.equals(other));
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,421,// Null
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,422,other = null;
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,423,assertFalse(first.equals(other));
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,425,// Reflexive
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,426,assertTrue(first.equals(first));
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,428,// Argumentless constructor
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,429,ResizableDoubleArray second = new ResizableDoubleArray();
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,430,"verifyEquality(first, second);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,432,"// Equals iff same data, same properties"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,433,"ResizableDoubleArray third = new ResizableDoubleArray(3, 2.0f, 2.0f);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,434,"verifyInequality(third, first);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,435,"ResizableDoubleArray fourth = new ResizableDoubleArray(3, 2.0f, 2.0f);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,436,"ResizableDoubleArray fifth = new ResizableDoubleArray(2, 2.0f, 2.0f);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,437,"verifyEquality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,438,"verifyInequality(third, fifth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,439,third.addElement(4.1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,440,third.addElement(4.2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,441,third.addElement(4.3);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,442,fourth.addElement(4.1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,443,fourth.addElement(4.2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,444,fourth.addElement(4.3);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,445,"verifyEquality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,447,// expand
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,448,fourth.addElement(4.4);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,449,"verifyInequality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,450,third.addElement(4.4);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,451,"verifyEquality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,452,fourth.addElement(4.4);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,453,"verifyInequality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,454,third.addElement(4.4);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,455,"verifyEquality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,456,fourth.addElementRolling(4.5);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,457,third.addElementRolling(4.5);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,458,"verifyEquality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,460,// discard
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,461,third.discardFrontElements(1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,462,"verifyInequality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,463,fourth.discardFrontElements(1);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,464,"verifyEquality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,466,// discard recent
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,467,third.discardMostRecentElements(2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,468,fourth.discardMostRecentElements(2);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,469,"verifyEquality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,471,// wrong order
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,472,third.addElement(18);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,473,fourth.addElement(17);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,474,third.addElement(17);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,475,fourth.addElement(18);
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,476,"verifyInequality(third, fourth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,478,// copy
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,479,"ResizableDoubleArray.copy(fourth, fifth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,480,"verifyEquality(fourth, fifth);"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,482,// Copy constructor
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,483,"verifyEquality(fourth, new ResizableDoubleArray(fourth));"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,485,// Instance copy
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,486,"verifyEquality(fourth, fourth.copy());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,490,"private void verifyEquality(ResizableDoubleArray a, ResizableDoubleArray b) {"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,491,assertTrue(b.equals(a));
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,492,assertTrue(a.equals(b));
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,493,"assertEquals(a.hashCode(), b.hashCode());"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,496,"private void verifyInequality(ResizableDoubleArray a, ResizableDoubleArray b) {"
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,497,assertFalse(b.equals(a));
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,498,assertFalse(a.equals(b));
True,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,src/test/org/apache/commons/math/util/ResizableDoubleArrayTest.java,499,assertFalse(a.hashCode() == b.hashCode());

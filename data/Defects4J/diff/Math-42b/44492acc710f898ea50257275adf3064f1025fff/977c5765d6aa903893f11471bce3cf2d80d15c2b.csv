is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,17,package org.apache.commons.math.stat.descriptive;
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,20,* Weighted evaluation for statistics.
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,22,* @since 2.1
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,23,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,25,public interface WeightedEvaluation {
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,28,"* Returns the result of evaluating the statistic over the input array,"
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,29,* using the supplied weights.
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,31,* @param values input array
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,32,* @param weights array of weights
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,33,* @return the value of the statistic applied to the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,35,"double evaluate(double[] values, double[] weights);"
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,38,* Returns the result of evaluating the statistic over the specified entries
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,39,"* in the input array, using corresponding entries in the supplied weights array."
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,41,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,42,* @param weights array of weights
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,43,* @param begin the index of the first element to include
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,44,* @param length the number of elements to include
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,45,* @return the value of the statistic applied to the included array entries
True,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,src/main/java/org/apache/commons/math/stat/descriptive/WeightedEvaluation.java,47,"double evaluate(double[] values, double[] weights, int begin, int length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,22,import org.apache.commons.math.stat.descriptive.WeightedEvaluation;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,59,mplements Serializable {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,60,"implements Serializable, WeightedEvaluation {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,220,* Returns the weighted arithmetic mean of the entries in the input array.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,221,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,222,* Throws <code>IllegalArgumentException</code> if either array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,223,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,224,* See {@link Mean} for details on the computing algorithm. The two-pass algorithm
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,225,"* described above is used here, with weights applied in computing both the original"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,226,* estimate and the correction factor.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,227,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,228,* Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,229,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,230,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,231,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,232,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,233,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,234,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,235,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,237,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,238,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,239,* @return the mean of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,240,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,242,"public double evaluate(final double[] values, final double[] weights) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Mean.java,243,"return evaluate(values, weights, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,22,import org.apache.commons.math.stat.descriptive.WeightedEvaluation;
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,66,ublic class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,67,"public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation {"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,296, @return the variance of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,297,* @return the weighted variance of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,319,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,320,* Returns the weighted variance of the entries in the the input array.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,321,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,322,* Uses the formula <pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,323,*   &Sigma;(weights[i]*(values[i] - weightedMean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,324,* </pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,325,* where weightedMean is the weighted mean</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,326,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,327,* This formula will not return the same result as the unweighted variance when all
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,328,"* weights are equal, unless all weights are equal to 1. The formula assumes that"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,329,"* weights are to be treated as ""expansion values,"" as will be the case if for example"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,330,* the weights represent frequency counts. To normalize weights so that the denominator
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,331,"* in the variance computation equals the length of the input vector minus one, use <pre>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,332,"*   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length)); </code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,333,* </pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,334,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,335,* Returns 0 for a single-value (i.e. length = 1) sample.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,336,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,337,* Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,338,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,339,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,340,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,341,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,342,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,343,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,344,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,345,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,346,* Does not change the internal state of the statistic.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,347,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,348,* Throws <code>IllegalArgumentException</code> if either array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,350,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,351,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,352,* @return the weighted variance of the values
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,353,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,355,"public double evaluate(final double[] values, final double[] weights) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,356,"return evaluate(values, weights, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,414,"* Returns the variance of the entries in the input array, using the"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,415,* precomputed mean value.  Returns <code>Double.NaN</code> if the array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,416,* is empty.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,417,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,418,* See {@link Variance} for details on the computing algorithm.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,419,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,420,* If <code>isBiasCorrected</code> is <code>true</code> the formula used
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,421,* assumes that the supplied mean value is the arithmetic mean of the
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,422,"* sample data, not a known population parameter.  If the mean is a known"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,423,"* population parameter, or if the ""population"" version of the variance is"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,424,"* desired, set <code>isBiasCorrected</code> to <code>false</code> before"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,425,* invoking this method.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,426,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,427,* Returns 0 for a single-value (i.e. length = 1) sample.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,428,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,429,* Throws <code>IllegalArgumentException</code> if the array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,430,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,431,* Does not change the internal state of the statistic.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,433,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,434,* @param mean the precomputed mean value
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,435,* @return the variance of the values or Double.NaN if the array is empty
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,436,* @throws IllegalArgumentException if the array is null
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,438,"public double evaluate(final double[] values, final double mean) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,439,"return evaluate(values, mean, 0, values.length);"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,390,"   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length)); </code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,461,"*   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length), mean); </code>"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,447," Returns the variance of the entries in the input array, using the"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,448, precomputed mean value.  Returns <code>Double.NaN</code> if the array
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,449, is empty.
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,518,"* <p>Returns the weighted variance of the values in the input array, using"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,519,* the precomputed weighted mean value.</p>
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,451, See {@link Variance} for details on the computing algorithm.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,521,* Uses the formula <pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,522,*   &Sigma;(weights[i]*(values[i] - mean)<sup>2</sup>)/(&Sigma;(weights[i]) - 1)
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,523,* </pre></p>
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,453, If <code>isBiasCorrected</code> is <code>true</code> the formula used
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,454, assumes that the supplied mean value is the arithmetic mean of the
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,455," sample data, not a known population parameter.  If the mean is a known"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,456," population parameter, or if the ""population"" version of the variance is"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,457," desired, set <code>isBiasCorrected</code> to <code>false</code> before"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,458, invoking this method.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,525,* The formula used assumes that the supplied mean value is the weighted arithmetic
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,526,"* mean of the sample data, not a known population parameter. This method"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,527,* is supplied only to save computation when the mean has already been
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,528,* computed.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,529,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,530,* This formula will not return the same result as the unweighted variance when all
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,531,"* weights are equal, unless all weights are equal to 1. The formula assumes that"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,532,"* weights are to be treated as ""expansion values,"" as will be the case if for example"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,533,* the weights represent frequency counts. To normalize weights so that the denominator
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,534,"* in the variance computation equals the length of the input vector minus one, use <pre>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,535,"*   <code>evaluate(values, MathUtils.normalizeArray(weights, values.length), mean); </code>"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,536,* </pre>
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,462, Throws <code>IllegalArgumentException</code> if the array is null.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,540,* Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,541,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,542,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,543,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,544,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,545,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,546,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,547,* </ul></p>
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,467, @param mean the precomputed mean value
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,468, @return the variance of the values or Double.NaN if the array is empty
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,469, @throws IllegalArgumentException if the array is null
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,552,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,553,* @param mean the precomputed weighted mean value
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,554,* @return the variance of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,555,* @throws IllegalArgumentException if the parameters are not valid
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,471,"ublic double evaluate(final double[] values, final double mean) {"
False,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,472,"eturn evaluate(values, mean, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,557,"public double evaluate(final double[] values, final double[] weights, final double mean) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java,558,"return evaluate(values, weights, mean, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,22,import org.apache.commons.math.stat.descriptive.WeightedEvaluation;
False,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,36,ublic class Product extends AbstractStorelessUnivariateStatistic implements Serializable {
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,37,"public class Product extends AbstractStorelessUnivariateStatistic implements Serializable, WeightedEvaluation {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,171,* <p>Returns the weighted product of the entries in the input array.</p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,173,* <p>Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,174,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,175,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,176,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,177,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,178,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,179,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,180,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,182,"* <p>Uses the formula, <pre>"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,183,*    weighted product = &prod;values[i]<sup>weights[i]</sup>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,184,* </pre>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,185,"* that is, the weights are applied as exponents when computing the weighted product.</p>"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,187,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,188,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,189,* @return the product of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,190,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,192,"public double evaluate(final double[] values, final double[] weights) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java,193,"return evaluate(values, weights, 0, values.length);"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,22,import org.apache.commons.math.stat.descriptive.WeightedEvaluation;
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,171,* The weighted sum of the entries in the the input array.
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,172,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,173,* Throws <code>IllegalArgumentException</code> if any of the following are true:
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,174,* <ul><li>the values array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,175,*     <li>the weights array is null</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,176,*     <li>the weights array does not have the same length as the values array</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,177,*     <li>the weights array contains one or more infinite values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,178,*     <li>the weights array contains one or more NaN values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,179,*     <li>the weights array contains negative values</li>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,180,* </ul></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,181,* <p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,182,"* Uses the formula, <pre>"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,183,*    weighted sum = &Sigma;(values[i] * weights[i])
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,184,* </pre></p>
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,186,* @param values the input array
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,187,* @param weights the weights array
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,188,* @return the sum of the values or Double.NaN if length = 0
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,189,* @throws IllegalArgumentException if the parameters are not valid
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,191,"public double evaluate(final double[] values, final double[] weights) {"
True,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java,192,"return evaluate(values, weights, 0, values.length);"
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,129,ethod evaluateMethod = null;
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,130,ry {
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,131,"valuateMethod = statistic.getClass().getDeclaredMethod(""evaluate"","
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,132,"ouble[].class, double[].class, int.class, int.class);"
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,133, catch (NoSuchMethodException ex) {
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,134,eturn;  // skip test
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,129,if (!(statistic instanceof WeightedEvaluation)) {
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,130,return;
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,174,ouble weightedResult = (Double) evaluateMethod.invoke(
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,175,"tatistic, values, weights, 0, values.length);"
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,176,estUtils.assertRelativelyEquals(
False,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,177,"tatistic.evaluate(repeatedValues), weightedResult, 10E-14);"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,170,WeightedEvaluation weightedStatistic = (WeightedEvaluation) statistic;
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,171,"TestUtils.assertRelativelyEquals(statistic.evaluate(repeatedValues),"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,172,"weightedStatistic.evaluate(values, weights, 0, values.length),"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,173,10E-14);
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,175,// Check consistency of weighted evaluation methods
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,176,"assertEquals(weightedStatistic.evaluate(values, weights, 0, values.length),"
True,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,src/test/java/org/apache/commons/math/stat/descriptive/UnivariateStatisticAbstractTest.java,177,"weightedStatistic.evaluate(values, weights), Double.MIN_VALUE);"

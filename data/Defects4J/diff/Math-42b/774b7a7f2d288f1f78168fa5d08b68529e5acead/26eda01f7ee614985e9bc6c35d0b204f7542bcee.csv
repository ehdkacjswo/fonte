is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,25,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,255,double[] mean = meanStat.getResult();
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,256,RealMatrix covariance = covStat.getResult();
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,258,"ew CorrelatedRandomVectorGenerator(meanStat.getResult(),"
False,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,259,"ovStat.getResult(),"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,262,"new CorrelatedRandomVectorGenerator(mean,"
True,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,src/java/org/apache/commons/math/optimization/DirectSearchOptimizer.java,263,"covariance, 1.0e-12 * covariance.getNorm(),"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,1,//Licensed to the Apache Software Foundation (ASF) under one
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,2,//or more contributor license agreements.  See the NOTICE file
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,3,//distributed with this work for additional information
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,4,//regarding copyright ownership.  The ASF licenses this file
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,5,"//to you under the Apache License, Version 2.0 (the"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,6,"//""License""); you may not use this file except in compliance"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,7,//with the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,9,//http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,11,"//Unless required by applicable law or agreed to in writing,"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,12,//software distributed under the License is distributed on an
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,13,"//""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,14,"//KIND, either express or implied.  See the License for the"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,15,//specific language governing permissions and limitations
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,16,//under the License.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,18,package org.apache.commons.math.random;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,20,import org.apache.commons.math.DimensionMismatchException;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,21,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,22,import org.apache.commons.math.linear.RealMatrixImpl;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,24,/** This class allows to generate random vectors with correlated components.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,26,* <p>Random vectors with correlated components are built by combining
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,27,* the uncorrelated components of another random vector in such a way
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,28,* the resulting correlations are the ones specified by a positive
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,29,* definite covariance matrix.</p>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,31,"* <p>Sometimes, the covariance matrix for a given simulation is not"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,32,* strictly positive definite. This means that the correlations are
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,33,"* not all independant from each other. In this case, however, the non"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,34,* strictly positive elements found during the Cholesky decomposition
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,35,"* of the covariance matrix should not be negative either, they"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,36,* should be null. This implies that rather than computing <code>C =
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,37,* U<sup>T</sup>.U</code> where <code>C</code> is the covariance matrix and
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,38,"* <code>U</code> is an uppertriangular matrix, we compute <code>C ="
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,39,* B.B<sup>T</sup></code> where <code>B</code> is a rectangular matrix having
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,40,* more rows than columns. The number of columns of <code>B</code> is
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,41,"* the rank of the covariance matrix, and it is the dimension of the"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,42,* uncorrelated random vector that is needed to compute the component
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,43,* of the correlated vector. This class does handle this situation
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,44,* automatically.</p>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,46,* @version $Revision:$ $Date$
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,50,public class CorrelatedRandomVectorGenerator
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,51,implements RandomVectorGenerator {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,53,/** Simple constructor.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,54,* <p>Build a correlated random vector generator from its mean
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,55,* vector and covariance matrix.</p>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,56,* @param mean expected mean values for all components
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,57,* @param covariance covariance matrix
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,58,* @param small diagonal elements threshold under which  column are
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,59,* considered to be dependent on previous ones and are discarded
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,60,* @param generator underlying generator for uncorrelated normalized
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,61,* components
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,62,* @exception IllegalArgumentException if there is a dimension
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,63,* mismatch between the mean vector and the covariance matrix
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,64,* @exception NotPositiveDefiniteMatrixException if the
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,65,* covariance matrix is not strictly positive definite
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,66,* @exception DimensionMismatchException if the mean and covariance
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,67,* arrays dimensions don't match
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,69,"public CorrelatedRandomVectorGenerator(double[] mean,"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,70,"RealMatrix covariance, double small,"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,71,NormalizedRandomGenerator generator)
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,72,"throws NotPositiveDefiniteMatrixException, DimensionMismatchException {"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,74,int order = covariance.getRowDimension();
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,75,if (mean.length != order) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,76,"throw new DimensionMismatchException(mean.length, order);"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,78,this.mean = (double[]) mean.clone();
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,80,"decompose(covariance, small);"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,82,this.generator = generator;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,83,normalized = new double[rank];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,87,/** Simple constructor.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,88,* <p>Build a null mean random correlated vector generator from its
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,89,* covariance matrix.</p>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,90,* @param covariance covariance matrix
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,91,* @param small diagonal elements threshold under which  column are
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,92,* considered to be dependent on previous ones and are discarded
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,93,* @param generator underlying generator for uncorrelated normalized
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,94,* components
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,95,* @exception NotPositiveDefiniteMatrixException if the
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,96,* covariance matrix is not strictly positive definite
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,98,"public CorrelatedRandomVectorGenerator(RealMatrix covariance, double small,"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,99,NormalizedRandomGenerator generator)
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,100,throws NotPositiveDefiniteMatrixException {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,102,int order = covariance.getRowDimension();
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,103,mean = new double[order];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,104,for (int i = 0; i < order; ++i) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,105,mean[i] = 0;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,108,"decompose(covariance, small);"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,110,this.generator = generator;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,111,normalized = new double[rank];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,115,/** Get the underlying normalized components generator.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,116,* @return underlying uncorrelated components generator
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,118,public NormalizedRandomGenerator getGenerator() {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,119,return generator;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,122,/** Get the root of the covariance matrix.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,123,* The root is the rectangular matrix <code>B</code> such that
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,124,* the covariance matrix is equal to <code>B.B<sup>T</sup></code>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,125,* @return root of the square matrix
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,126,* @see #getRank()
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,128,public RealMatrix getRootMatrix() {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,129,return root;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,132,/** Get the rank of the covariance matrix.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,133,* The rank is the number of independant rows in the covariance
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,134,"* matrix, it is also the number of columns of the rectangular"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,135,* matrix of the decomposition.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,136,* @return rank of the square matrix.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,137,* @see #getRootMatrix()
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,139,public int getRank() {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,140,return rank;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,143,/** Decompose the original square matrix.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,144,* <p>The decomposition is based on a Choleski decomposition
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,145,* where additional transforms are performed:
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,146,* <ul>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,147,*   <li>the rows of the decomposed matrix are permuted</li>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,148,*   <li>columns with the too small diagonal element are discarded</li>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,149,*   <li>the matrix is permuted</li>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,150,* </ul>
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,151,* This means that rather than computing M = U<sup>T</sup>.U where U
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,152,"* is an upper triangular matrix, this method computed M=B.B<sup>T</sup>"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,153,* where B is a rectangular matrix.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,154,* @param covariance covariance matrix
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,155,* @param small diagonal elements threshold under which  column are
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,156,* considered to be dependent on previous ones and are discarded
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,157,* @exception NotPositiveDefiniteMatrixException if the
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,158,* covariance matrix is not strictly positive definite
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,160,"private void decompose(RealMatrix covariance, double small)"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,161,throws NotPositiveDefiniteMatrixException {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,163,int order = covariance.getRowDimension();
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,164,double[][] c = covariance.getData();
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,165,double[][] b = new double[order][order];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,167,int[] swap  = new int[order];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,168,int[] index = new int[order];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,169,for (int i = 0; i < order; ++i) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,170,index[i] = i;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,173,rank = 0;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,174,for (boolean loop = true; loop;) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,176,// find maximal diagonal element
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,177,swap[rank] = rank;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,178,for (int i = rank + 1; i < order; ++i) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,179,int ii  = index[i];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,180,int isi = index[swap[i]];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,181,if (c[ii][ii] > c[isi][isi]) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,182,swap[rank] = i;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,187,// swap elements
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,188,if (swap[rank] != rank) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,189,int tmp = index[rank];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,190,index[rank] = index[swap[rank]];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,191,index[swap[rank]] = tmp;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,194,// check diagonal element
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,195,int ir = index[rank];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,196,if (c[ir][ir] < small) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,198,if (rank == 0) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,199,throw new NotPositiveDefiniteMatrixException();
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,202,// check remaining diagonal elements
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,203,for (int i = rank; i < order; ++i) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,204,if (c[index[i]][index[i]] < -small) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,205,"// there is at least one sufficiently negative diagonal element,"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,206,// the covariance matrix is wrong
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,207,throw new NotPositiveDefiniteMatrixException();
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,211,"// all remaining diagonal elements are close to zero,"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,212,// we consider we have found the rank of the covariance matrix
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,213,++rank;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,214,loop = false;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,216,} else {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,218,// transform the matrix
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,219,double sqrt = Math.sqrt(c[ir][ir]);
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,220,b[rank][rank] = sqrt;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,221,double inverse = 1 / sqrt;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,222,for (int i = rank + 1; i < order; ++i) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,223,int ii = index[i];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,224,double e = inverse * c[ii][ir];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,225,b[i][rank] = e;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,226,c[ii][ii] -= e * e;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,227,for (int j = rank + 1; j < i; ++j) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,228,int ij = index[j];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,229,double f = c[ii][ij] - e * b[j][rank];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,230,c[ii][ij] = f;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,231,c[ij][ii] = f;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,235,// prepare next iteration
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,236,loop = ++rank < order;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,242,// build the root matrix
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,243,"root = new RealMatrixImpl(order, rank);"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,244,for (int i = 0; i < order; ++i) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,245,"System.arraycopy(b[i], 0, root.getDataRef()[swap[i]], 0, rank);"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,250,/** Generate a correlated random vector.
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,251,* @return a random vector as an array of double. The returned array
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,252,"* is created at each call, the caller can do what it wants with it."
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,254,public double[] nextVector() {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,256,// generate uncorrelated vector
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,257,for (int i = 0; i < rank; ++i) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,258,normalized[i] = generator.nextNormalizedDouble();
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,261,// compute correlated vector
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,262,double[] correlated = new double[mean.length];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,263,for (int i = 0; i < correlated.length; ++i) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,264,correlated[i] = mean[i];
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,265,for (int j = 0; j < rank; ++j) {
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,266,"correlated[i] += root.getEntry(i, j) * normalized[j];"
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,270,return correlated;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,274,/** Mean vector. */
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,275,private double[] mean;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,277,/** Permutated Cholesky root of the covariance matrix. */
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,278,private RealMatrixImpl root;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,280,/** Rank of the covariance matrix. */
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,281,private int rank;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,283,/** Underlying generator. */
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,284,private NormalizedRandomGenerator generator;
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,286,/** Storage for the normalized vector. */
True,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,src/java/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java,287,private double[] normalized;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,1,//Licensed to the Apache Software Foundation (ASF) under one
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,2,//or more contributor license agreements.  See the NOTICE file
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,3,//distributed with this work for additional information
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,4,//regarding copyright ownership.  The ASF licenses this file
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,5,"//to you under the Apache License, Version 2.0 (the"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,6,"//""License""); you may not use this file except in compliance"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,7,//with the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,9,//http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,11,"//Unless required by applicable law or agreed to in writing,"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,12,//software distributed under the License is distributed on an
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,13,"//""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,14,"//KIND, either express or implied.  See the License for the"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,15,//specific language governing permissions and limitations
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,16,//under the License.
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,18,package org.apache.commons.math.random;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,20,import org.apache.commons.math.DimensionMismatchException;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,21,import org.apache.commons.math.linear.RealMatrix;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,22,import org.apache.commons.math.linear.RealMatrixImpl;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,23,import org.apache.commons.math.stat.descriptive.moment.VectorialCovariance;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,24,import org.apache.commons.math.stat.descriptive.moment.VectorialMean;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,26,import junit.framework.*;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,28,public class CorrelatedRandomVectorGeneratorTest
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,29,extends TestCase {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,31,public CorrelatedRandomVectorGeneratorTest(String name) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,32,super(name);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,33,mean       = null;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,34,covariance = null;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,35,generator  = null;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,38,public void testRank() {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,39,"assertEquals(3, generator.getRank());"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,42,public void testRootMatrix() {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,43,RealMatrix b = generator.getRootMatrix();
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,44,RealMatrix bbt = b.multiply(b.transpose());
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,45,for (int i = 0; i < covariance.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,46,for (int j = 0; j < covariance.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,47,"assertEquals(covariance.getEntry(i, j), bbt.getEntry(i, j), 1.0e-12);"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,52,public void testMeanAndCovariance() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,54,VectorialMean meanStat = new VectorialMean(mean.length);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,55,VectorialCovariance covStat = new VectorialCovariance(mean.length);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,56,for (int i = 0; i < 5000; ++i) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,57,double[] v = generator.nextVector();
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,58,meanStat.increment(v);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,59,covStat.increment(v);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,62,double[] estimatedMean = meanStat.getResult();
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,63,RealMatrix estimatedCovariance = covStat.getResult();
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,64,for (int i = 0; i < estimatedMean.length; ++i) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,65,"assertEquals(mean[i], estimatedMean[i], 0.07);"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,66,for (int j = 0; j <= i; ++j) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,67,"assertEquals(covariance.getEntry(i, j),"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,68,"estimatedCovariance.getEntry(i, j),"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,69,0.1 * (1.0 + Math.abs(mean[i])) * (1.0 + Math.abs(mean[j])));
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,75,public void setUp() {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,76,try {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,77,"mean = new double[] { 0.0, 1.0, -3.0, 2.3};"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,79,"RealMatrixImpl b = new RealMatrixImpl(4, 3);"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,80,double[][] bData = b.getDataRef();
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,81,int counter = 0;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,82,for (int i = 0; i < bData.length; ++i) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,83,double[] bi = bData[i];
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,84,for (int j = 0; j < b.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,85,bi[j] = 1.0 + 0.1 * ++counter;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,88,RealMatrix bbt = b.multiply(b.transpose());
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,89,"covariance = new RealMatrixImpl(mean.length, mean.length);"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,90,double[][] covData = covariance.getDataRef();
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,91,for (int i = 0; i < covariance.getRowDimension(); ++i) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,92,"covData[i][i] = bbt.getEntry(i, i);"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,93,for (int j = 0; j < covariance.getColumnDimension(); ++j) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,94,"double s = bbt.getEntry(i, j);"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,95,covData[i][j] = s;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,96,covData[j][i] = s;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,100,RandomGenerator rg = new JDKRandomGenerator();
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,101,rg.setSeed(17399225432l);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,102,GaussianRandomGenerator rawGenerator = new GaussianRandomGenerator(rg);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,103,"generator = new CorrelatedRandomVectorGenerator(mean,"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,104,"covariance,"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,105,"1.0e-12 * covariance.getNorm(),"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,106,rawGenerator);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,107,} catch (DimensionMismatchException e) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,108,fail(e.getMessage());
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,109,} catch (NotPositiveDefiniteMatrixException e) {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,110,"fail(""not positive definite matrix"");"
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,114,public void tearDown() {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,115,mean       = null;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,116,covariance = null;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,117,generator  = null;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,120,public static Test suite() {
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,121,return new TestSuite(CorrelatedRandomVectorGeneratorTest.class);
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,124,private double[] mean;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,125,private RealMatrixImpl covariance;
True,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,src/test/org/apache/commons/math/random/CorrelatedRandomVectorGeneratorTest.java,126,private CorrelatedRandomVectorGenerator generator;

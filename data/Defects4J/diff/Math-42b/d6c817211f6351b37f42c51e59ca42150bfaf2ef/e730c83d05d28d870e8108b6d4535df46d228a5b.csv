is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,20,import java.util.HashMap;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,21,import java.util.List;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,22,import java.util.Map;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,34,rivate static final ArrayList<BigFraction> CHEBYSHEV_COEFFICIENTS;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,37,private static final List<BigFraction> CHEBYSHEV_COEFFICIENTS;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,37,rivate static final ArrayList<BigFraction> HERMITE_COEFFICIENTS;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,40,private static final List<BigFraction> HERMITE_COEFFICIENTS;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,40,rivate static final ArrayList<BigFraction> LAGUERRE_COEFFICIENTS;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,43,private static final List<BigFraction> LAGUERRE_COEFFICIENTS;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,43,rivate static final ArrayList<BigFraction> LEGENDRE_COEFFICIENTS;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,46,private static final List<BigFraction> LEGENDRE_COEFFICIENTS;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,48,/** Coefficients for Jacobi polynomials. */
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,49,"private static final Map<JacobiKey, List<BigFraction>> JACOBI_COEFFICIENTS;"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,81,// initialize map for Jacobi polynomials
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,82,"JACOBI_COEFFICIENTS = new HashMap<JacobiKey, List<BigFraction>>();"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,198,* Create a Jacobi polynomial.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,199,"* <p><a href=""http://mathworld.wolfram.com/JacobiPolynomial.html"">Jacobi"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,200,* polynomials</a> are orthogonal polynomials.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,201,* They can be defined by the following recurrence relations:
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,202,* <pre>
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,203,*        P<sub>0</sub><sup>vw</sup>(X)   = 1
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,204,*        P<sub>-1</sub><sup>vw</sup>(X)  = 0
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,205,*  2k(k + v + w)(2k + v + w - 2) P<sub>k</sub><sup>vw</sup>(X) =
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,206,*  (2k + v + w - 1)[(2k + v + w)(2k + v + w - 2) X + v<sup>2</sup> - w<sup>2</sup>] P<sub>k-1</sub><sup>vw</sup>(X)
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,207,*  - 2(k + v - 1)(k + w - 1)(2k + v + w) P<sub>k-2</sub><sup>vw</sup>(X)
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,208,* </pre></p>
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,209,* @param degree degree of the polynomial
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,210,* @param v first exponent
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,211,* @param w second exponent
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,212,* @return Jacobi polynomial of specified degree
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,214,"public static PolynomialFunction createJacobiPolynomial(final int degree, final int v, final int w) {"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,216,// select the appropriate list
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,217,"final JacobiKey key = new JacobiKey(v, w);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,219,if (!JACOBI_COEFFICIENTS.containsKey(key)) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,221,"// allocate a new list for v, w"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,222,final List<BigFraction> list = new ArrayList<BigFraction>();
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,223,"JACOBI_COEFFICIENTS.put(key, list);"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,225,"// Pv,w,0(x) = 1;"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,226,list.add(BigFraction.ONE);
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,228,// P1(x) = (v - w) / 2 + (2 + v + w) * X / 2
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,229,"list.add(new BigFraction(v - w, 2));"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,230,"list.add(new BigFraction(2 + v + w, 2));"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,234,"return buildPolynomial(degree, JACOBI_COEFFICIENTS.get(key),"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,235,new RecurrenceCoefficientsGenerator() {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,236,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,237,public BigFraction[] generate(int k) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,238,k++;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,239,final int kvw      = k + v + w;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,240,final int twoKvw   = kvw + k;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,241,final int twoKvwM1 = twoKvw - 1;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,242,final int twoKvwM2 = twoKvw - 2;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,243,final int den      = 2 * k *  kvw * twoKvwM2;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,245,return new BigFraction[] {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,246,"new BigFraction(twoKvwM1 * (v * v - w * w), den),"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,247,"new BigFraction(twoKvwM1 * twoKvw * twoKvwM2, den),"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,248,"new BigFraction(2 * (k + v - 1) * (k + w - 1) * twoKvw, den)"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,255,/** Inner class for Jacobi polynomials keys. */
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,256,private static class JacobiKey {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,258,/** First exponent. */
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,259,private final int v;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,261,/** Second exponent. */
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,262,private final int w;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,264,/** Simple constructor.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,265,* @param v first exponent
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,266,* @param w second exponent
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,268,"public JacobiKey(final int v, final int w) {"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,269,this.v = v;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,270,this.w = w;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,273,/** Get hash code.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,274,* @return hash code
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,276,public int hashCode() {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,277,return (v << 16) ^ w;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,250,"inal ArrayList<BigFraction> coefficients,"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,344,"final List<BigFraction> coefficients,"
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,288,inal ArrayList<BigFraction> coefficients) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtils.java,382,final List<BigFraction> coefficients) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,22,import org.apache.commons.math.util.MathUtils;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,276,@Test
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,277,public void testJacobiLegendre() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,278,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,279,PolynomialFunction legendre = PolynomialsUtils.createLegendrePolynomial(i);
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,280,"PolynomialFunction jacobi   = PolynomialsUtils.createJacobiPolynomial(i, 0, 0);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,281,checkNullPolynomial(legendre.subtract(jacobi));
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,285,@Test
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,286,public void testJacobiEvaluationAt1() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,287,for (int v = 0; v < 10; ++v) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,288,for (int w = 0; w < 10; ++w) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,289,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,290,"PolynomialFunction jacobi = PolynomialsUtils.createJacobiPolynomial(i, v, w);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,291,"double binomial = MathUtils.binomialCoefficient(v + i, i);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,292,"Assert.assertTrue(MathUtils.equals(binomial, jacobi.value(1.0), 1));"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,298,@Test
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,299,public void testJacobiOrthogonality() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,300,for (int v = 0; v < 5; ++v) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,301,for (int w = v; w < 5; ++w) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,302,final int vv = v;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,303,final int ww = w;
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,304,UnivariateRealFunction weight = new UnivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,305,public double value(double x) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,306,"return FastMath.pow(1 - x, vv) * FastMath.pow(1 + x, ww);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,309,for (int i = 0; i < 10; ++i) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,310,"PolynomialFunction pi = PolynomialsUtils.createJacobiPolynomial(i, v, w);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,311,for (int j = 0; j <= i; ++j) {
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,312,"PolynomialFunction pj = PolynomialsUtils.createJacobiPolynomial(j, v, w);"
True,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,src/test/java/org/apache/commons/math/analysis/polynomials/PolynomialsUtilsTest.java,313,"checkOrthogonality(pi, pj, weight, -1, 1, 0.1, 1.0e-12);"

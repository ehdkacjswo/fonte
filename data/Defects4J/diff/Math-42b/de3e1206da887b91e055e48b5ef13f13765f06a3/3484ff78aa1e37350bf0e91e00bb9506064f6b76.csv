is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,27, @version $Revision: 1.5 $ $Date: 2004/04/27 04:37:59 $
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,27,* @version $Revision: 1.6 $ $Date: 2004/05/23 00:52:32 $
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,34,"/ @TODO This class only allows for max fraction digits, we might want to allow other parameters"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,36,** The notation used to signify the imaginary part of the complex number. */
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,34,/** The notation used to signify the imaginary part of the complex number. */
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,77,"/ @TODO What happens when either a real or imaginary is NaN, INIFINITY, etc?"
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,84,uffer.append( format.format( c.getReal() ) );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,80,if( Double.isNaN( c.getReal() ) || Double.isInfinite( c.getReal() ) ) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,81,"buffer.append( ""("" + c.getReal() + "")"" );"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,82,} else {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,83,buffer.append( format.format( c.getReal() ) );
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,88,uffer.append( format.format( Math.abs(c.getImaginary()) ) );
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,89,uffer.append( imaginaryCharacter );
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,90, else if( c.getImaginary() > 0 ) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,88,} else if( c.getImaginary() > 0 || Double.isNaN( c.getImaginary() )) {
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,92,uffer.append( format.format( c.getImaginary() ) );
False,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,93,uffer.append( imaginaryCharacter );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,92,if( c.getImaginary() != 0 ) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,93,if( Double.isNaN( c.getImaginary() ) || Double.isInfinite( c.getImaginary() ) ) {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,94,"buffer.append( ""("" + Math.abs( c.getImaginary() ) + "")"" );"
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,95,} else {
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,96,buffer.append( format.format( Math.abs(c.getImaginary()) ) );
True,src/java/org/apache/commons/math/complex/ComplexFormat.java,src/java/org/apache/commons/math/complex/ComplexFormat.java,98,buffer.append( imaginaryCharacter );
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,85,public void testNan() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,86,"Complex c = new Complex(Double.NaN, Double.NaN);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,87,"assertEquals( complexFormat.format( c ), ""(NaN) + (NaN)i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,90,public void testPositiveInfinity() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,91,"Complex c = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,92,"assertEquals( complexFormat.format( c ), ""(Infinity) + (Infinity)i"" );"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,95,public void testNegativeInfinity() {
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,96,"Complex c = new Complex(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
True,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,src/test/org/apache/commons/math/complex/ComplexFormatTest.java,97,"assertEquals( complexFormat.format( c ), ""(-Infinity) - (Infinity)i"" );"

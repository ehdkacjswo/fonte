is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,26,import org.apache.commons.math.util.ArithmeticsUtils;
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,271,"inal int d = MathUtils.gcd(num, den);"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,272,"final int d = ArithmeticsUtils.gcd(num, den);"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,489,"nt d1 = MathUtils.gcd(denominator, fraction.denominator);"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,490,"int d1 = ArithmeticsUtils.gcd(denominator, fraction.denominator);"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,495,"isAdd ? MathUtils.addAndCheck(uvp, upv) :"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,496,"athUtils.subAndCheck(uvp, upv),"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,496,"(isAdd ? ArithmeticsUtils.addAndCheck(uvp, upv) :"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,497,"ArithmeticsUtils.subAndCheck(uvp, upv),"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,510,"nt d2 = (tmodd1==0)?d1:MathUtils.gcd(tmodd1, d1);"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,511,"int d2 = (tmodd1==0)?d1:ArithmeticsUtils.gcd(tmodd1, d1);"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,542,"nt d1 = MathUtils.gcd(numerator, fraction.denominator);"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,543,"nt d2 = MathUtils.gcd(fraction.numerator, denominator);"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,543,"int d1 = ArithmeticsUtils.gcd(numerator, fraction.denominator);"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,544,"int d2 = ArithmeticsUtils.gcd(fraction.numerator, denominator);"
False,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,621,"nt gcd = MathUtils.gcd(numerator, denominator);"
True,src/main/java/org/apache/commons/math/fraction/Fraction.java,src/main/java/org/apache/commons/math/fraction/Fraction.java,622,"int gcd = ArithmeticsUtils.gcd(numerator, denominator);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,43,import org.apache.commons.math.util.ArithmeticsUtils;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,44,mport org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,151,"i += FastMath.pow(LN2, i) / MathUtils.factorial(i);"
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,151,"qi += FastMath.pow(LN2, i) / ArithmeticsUtils.factorial(i);"
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,427,inal double logLambdaFactorial = MathUtils.factorialLog((int) lambda);
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,427,final double logLambdaFactorial = ArithmeticsUtils.factorialLog((int) lambda);
False,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,482,f (v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {
True,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,src/main/java/org/apache/commons/math/random/RandomDataImpl.java,482,if (v < y * logLambda - ArithmeticsUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,17,package org.apache.commons.math.util;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,19,import org.apache.commons.math.exception.MathArithmeticException;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,20,import org.apache.commons.math.exception.NotPositiveException;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,21,import org.apache.commons.math.exception.util.Localizable;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,22,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,25,"* Some useful, arithmetics related, additions to the built-in functions in"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,26,* {@link Math}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,28,* @version $Id$
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,30,public final class ArithmeticsUtils {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,32,/** All long-representable factorials */
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,33,static final long[] FACTORIALS = new long[] {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,34,"1l,                  1l,                   2l,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,35,"6l,                 24l,                 120l,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,36,"720l,               5040l,               40320l,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,37,"362880l,            3628800l,            39916800l,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,38,"479001600l,         6227020800l,         87178291200l,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,39,"1307674368000l,     20922789888000l,     355687428096000l,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,40,"6402373705728000l, 121645100408832000l, 2432902008176640000l };"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,42,/** Private constructor. */
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,43,private ArithmeticsUtils() {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,44,super();
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,48,"* Add two integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,50,* @param x an addend
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,51,* @param y an addend
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,52,* @return the sum {@code x+y}
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,53,* @throws MathArithmeticException if the result can not be represented
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,54,* as an {@code int}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,55,* @since 1.1
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,57,"public static int addAndCheck(int x, int y) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,58,long s = (long)x + (long)y;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,59,if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,60,"throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,62,return (int)s;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,66,"* Add two long integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,68,* @param a an addend
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,69,* @param b an addend
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,70,* @return the sum {@code a+b}
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,71,* @throws MathArithmeticException if the result can not be represented as an
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,72,*         long
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,73,* @since 1.2
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,75,"public static long addAndCheck(long a, long b) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,76,"return ArithmeticsUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,80,"* Add two long integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,82,* @param a Addend.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,83,* @param b Addend.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,84,* @param pattern Pattern to use for any thrown exception.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,85,* @return the sum {@code a + b}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,86,* @throws MathArithmeticException if the result cannot be represented
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,87,* as a {@code long}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,88,* @since 1.2
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,90,"private static long addAndCheck(long a, long b, Localizable pattern) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,91,long ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,92,if (a > b) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,93,// use symmetry to reduce boundary cases
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,94,"ret = addAndCheck(b, a, pattern);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,95,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,96,// assert a <= b
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,98,if (a < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,99,if (b < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,100,// check for negative overflow
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,101,if (Long.MIN_VALUE - b <= a) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,102,ret = a + b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,103,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,104,"throw new MathArithmeticException(pattern, a, b);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,106,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,107,// opposite sign addition is always safe
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,108,ret = a + b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,110,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,111,// assert a >= 0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,112,// assert b >= 0
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,114,// check for positive overflow
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,115,if (a <= Long.MAX_VALUE - b) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,116,ret = a + b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,117,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,118,"throw new MathArithmeticException(pattern, a, b);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,122,return ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,126,"* Subtract two integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,128,* @param x Minuend.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,129,* @param y Subtrahend.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,130,* @return the difference {@code x - y}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,131,* @throws MathArithmeticException if the result can not be represented
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,132,* as an {@code int}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,133,* @since 1.1
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,135,"public static int subAndCheck(int x, int y) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,136,long s = (long)x - (long)y;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,137,if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,138,"throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,140,return (int)s;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,144,"* Subtract two long integers, checking for overflow."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,146,* @param a Value.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,147,* @param b Value.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,148,* @return the difference {@code a - b}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,149,* @throws MathArithmeticException if the result can not be represented as a
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,150,* {@code long}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,151,* @since 1.2
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,153,"public static long subAndCheck(long a, long b) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,154,long ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,155,if (b == Long.MIN_VALUE) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,156,if (a < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,157,ret = a - b;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,158,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,159,"throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,161,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,162,// use additive inverse
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,163,"ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,165,return ret;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,169,* Returns n!. Shorthand for {@code n} <a
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,170,"* href=""http://mathworld.wolfram.com/Factorial.html""> Factorial</a>, the"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,171,"* product of the numbers {@code 1,...,n}."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,172,* <p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,173,* <Strong>Preconditions</strong>:
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,174,* <ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,175,* <li> {@code n >= 0} (otherwise
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,176,* {@code IllegalArgumentException} is thrown)</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,177,* <li> The result is small enough to fit into a {@code long}. The
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,178,* largest value of {@code n} for which {@code n!} <
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,179,* Long.MAX_VALUE} is 20. If the computed value exceeds {@code Long.MAX_VALUE}
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,180,* an {@code ArithMeticException } is thrown.</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,181,* </ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,182,* </p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,184,* @param n argument
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,185,* @return {@code n!}
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,186,* @throws MathArithmeticException if the result is too large to be represented
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,187,* by a {@code long}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,188,* @throws NotPositiveException if {@code n < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,189,* @throws MathArithmeticException if {@code n > 20}: The factorial value is too
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,190,* large to fit in a {@code long}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,192,public static long factorial(final int n) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,193,if (n < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,194,"throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,195,n);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,197,if (n > 20) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,198,throw new MathArithmeticException();
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,200,return FACTORIALS[n];
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,204,"* Compute n!, the<a href=""http://mathworld.wolfram.com/Factorial.html"">"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,205,"* factorial</a> of {@code n} (the product of the numbers 1 to n), as a"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,206,* {@code double}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,207,* The result should be small enough to fit into a {@code double}: The
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,208,* largest {@code n} for which {@code n! < Double.MAX_VALUE} is 170.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,209,"* If the computed value exceeds {@code Double.MAX_VALUE},"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,210,* {@code Double.POSITIVE_INFINITY} is returned.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,212,* @param n Argument.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,213,* @return {@code n!}
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,214,* @throws NotPositiveException if {@code n < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,216,public static double factorialDouble(final int n) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,217,if (n < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,218,"throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,219,n);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,221,if (n < 21) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,222,return factorial(n);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,224,return FastMath.floor(FastMath.exp(ArithmeticsUtils.factorialLog(n)) + 0.5);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,228,* Compute the natural logarithm of the factorial of {@code n}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,230,* @param n Argument.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,231,* @return {@code n!}
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,232,* @throws NotPositiveException if {@code n < 0}.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,234,public static double factorialLog(final int n) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,235,if (n < 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,236,"throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,237,n);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,239,if (n < 21) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,240,return FastMath.log(factorial(n));
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,242,double logSum = 0;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,243,for (int i = 2; i <= n; i++) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,244,logSum += FastMath.log(i);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,246,return logSum;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,250,* <p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,251,"* Gets the greatest common divisor of the absolute value of two numbers,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,252,"* using the ""binary gcd"" method which avoids division and modulo"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,253,* operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,254,* Stein (1961).
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,255,* </p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,256,* Special cases:
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,257,* <ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,258,* <li>The invocations
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,259,"* {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,260,"* {@code gcd(Integer.MIN_VALUE, 0)} and"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,261,"* {@code gcd(0, Integer.MIN_VALUE)} throw an"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,262,"* {@code ArithmeticException}, because the result would be 2^31, which"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,263,* is too large for an int value.</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,264,"* <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,265,"* {@code gcd(x, 0)} is the absolute value of {@code x}, except"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,266,* for the special cases above.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,267,"* <li>The invocation {@code gcd(0, 0)} is the only one which returns"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,268,* {@code 0}.</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,269,* </ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,271,* @param p Number.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,272,* @param q Number.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,273,"* @return the greatest common divisor, never negative."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,274,* @throws MathArithmeticException if the result cannot be represented as
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,275,* a non-negative {@code int} value.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,276,* @since 1.1
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,278,"public static int gcd(final int p, final int q) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,279,int u = p;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,280,int v = q;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,281,if ((u == 0) || (v == 0)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,282,if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,283,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,284,"p, q);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,286,return FastMath.abs(u) + FastMath.abs(v);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,288,"// keep u and v negative, as negative integers range down to"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,289,"// -2^31, while positive numbers can only be as large as 2^31-1"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,290,// (i.e. we can't necessarily negate a negative number without
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,291,// overflow)
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,292,/* assert u!=0 && v!=0; */
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,293,if (u > 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,294,u = -u;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,295,} // make u negative
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,296,if (v > 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,297,v = -v;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,298,} // make v negative
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,299,// B1. [Find power of 2]
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,300,int k = 0;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,301,while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,302,// both even...
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,303,u /= 2;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,304,v /= 2;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,305,k++; // cast out twos.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,307,if (k == 31) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,308,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,309,"p, q);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,311,// B2. Initialize: u and v have been divided by 2^k and at least
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,312,// one is odd.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,313,int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,314,"// t negative: u was odd, v may be even (t replaces v)"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,315,"// t positive: u was even, v is odd (t replaces u)"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,316,do {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,317,/* assert u<0 && v<0; */
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,318,// B4/B3: cast out twos from t.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,319,while ((t & 1) == 0) { // while t is even..
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,320,t /= 2; // cast out twos
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,322,"// B5 [reset max(u,v)]"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,323,if (t > 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,324,u = -t;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,325,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,326,v = t;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,328,// B6/B3. at this point both u and v should be odd.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,329,t = (v - u) / 2;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,330,// |u| larger: t positive (replace u)
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,331,// |v| larger: t negative (replace v)
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,332,} while (t != 0);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,333,return -u * (1 << k); // gcd is u*2^k
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,337,* <p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,338,"* Gets the greatest common divisor of the absolute value of two numbers,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,339,"* using the ""binary gcd"" method which avoids division and modulo"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,340,* operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,341,* Stein (1961).
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,342,* </p>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,343,* Special cases:
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,344,* <ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,345,* <li>The invocations
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,346,"* {@code gcd(Long.MIN_VALUE, Long.MIN_VALUE)},"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,347,"* {@code gcd(Long.MIN_VALUE, 0L)} and"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,348,"* {@code gcd(0L, Long.MIN_VALUE)} throw an"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,349,"* {@code ArithmeticException}, because the result would be 2^63, which"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,350,* is too large for a long value.</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,351,"* <li>The result of {@code gcd(x, x)}, {@code gcd(0L, x)} and"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,352,"* {@code gcd(x, 0L)} is the absolute value of {@code x}, except"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,353,* for the special cases above.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,354,"* <li>The invocation {@code gcd(0L, 0L)} is the only one which returns"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,355,* {@code 0L}.</li>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,356,* </ul>
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,358,* @param p Number.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,359,* @param q Number.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,360,"* @return the greatest common divisor, never negative."
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,361,* @throws MathArithmeticException if the result cannot be represented as
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,362,* a non-negative {@code long} value.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,363,* @since 2.1
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,365,"public static long gcd(final long p, final long q) {"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,366,long u = p;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,367,long v = q;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,368,if ((u == 0) || (v == 0)) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,369,if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,370,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,371,"p, q);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,373,return FastMath.abs(u) + FastMath.abs(v);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,375,"// keep u and v negative, as negative integers range down to"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,376,"// -2^63, while positive numbers can only be as large as 2^63-1"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,377,// (i.e. we can't necessarily negate a negative number without
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,378,// overflow)
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,379,/* assert u!=0 && v!=0; */
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,380,if (u > 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,381,u = -u;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,382,} // make u negative
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,383,if (v > 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,384,v = -v;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,385,} // make v negative
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,386,// B1. [Find power of 2]
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,387,int k = 0;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,388,while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,389,// both even...
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,390,u /= 2;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,391,v /= 2;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,392,k++; // cast out twos.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,394,if (k == 63) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,395,"throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,396,"p, q);"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,398,// B2. Initialize: u and v have been divided by 2^k and at least
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,399,// one is odd.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,400,long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,401,"// t negative: u was odd, v may be even (t replaces v)"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,402,"// t positive: u was even, v is odd (t replaces u)"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,403,do {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,404,/* assert u<0 && v<0; */
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,405,// B4/B3: cast out twos from t.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,406,while ((t & 1) == 0) { // while t is even..
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,407,t /= 2; // cast out twos
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,409,"// B5 [reset max(u,v)]"
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,410,if (t > 0) {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,411,u = -t;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,412,} else {
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,413,v = t;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,415,// B6/B3. at this point both u and v should be odd.
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,416,t = (v - u) / 2;
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,417,// |u| larger: t positive (replace u)
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,418,// |v| larger: t negative (replace v)
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,419,} while (t != 0);
True,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,src/main/java/org/apache/commons/math/util/ArithmeticsUtils.java,420,return -u * (1L << k); // gcd is u*2^k
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,72,** All long-representable factorials */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,73,rivate static final long[] FACTORIALS = new long[] {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,74,"l,                  1l,                   2l,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,75,"l,                 24l,                 120l,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,76,"20l,               5040l,               40320l,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,77,"62880l,            3628800l,            39916800l,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,78,"79001600l,         6227020800l,         87178291200l,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,79,"307674368000l,     20922789888000l,     355687428096000l,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,80,"402373705728000l, 121645100408832000l, 2432902008176640000l };"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,90," Add two integers, checking for overflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,92, @param x an addend
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,93, @param y an addend
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,94, @return the sum {@code x+y}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,95, @throws MathArithmeticException if the result can not be represented
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,96, as an {@code int}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,97, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,99,"ublic static int addAndCheck(int x, int y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,100,ong s = (long)x + (long)y;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,101,f (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,102,"hrow new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,104,eturn (int)s;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,108," Add two long integers, checking for overflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,110, @param a an addend
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,111, @param b an addend
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,112, @return the sum {@code a+b}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,113, @throws MathArithmeticException if the result can not be represented as an
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,114,         long
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,115, @since 1.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,117,"ublic static long addAndCheck(long a, long b) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,118,"eturn addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,122," Add two long integers, checking for overflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,124, @param a Addend.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,125, @param b Addend.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,126, @param pattern Pattern to use for any thrown exception.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,127, @return the sum {@code a + b}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,128, @throws MathArithmeticException if the result cannot be represented
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,129, as a {@code long}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,130, @since 1.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,132,"rivate static long addAndCheck(long a, long b, Localizable pattern) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,133,ong ret;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,134,f (a > b) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,135,/ use symmetry to reduce boundary cases
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,136,"et = addAndCheck(b, a, pattern);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,137, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,138,/ assert a <= b
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,140,f (a < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,141,f (b < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,142,/ check for negative overflow
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,143,f (Long.MIN_VALUE - b <= a) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,144,et = a + b;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,145, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,146,"hrow new MathArithmeticException(pattern, a, b);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,148, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,149,/ opposite sign addition is always safe
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,150,et = a + b;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,152, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,153,/ assert a >= 0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,154,/ assert b >= 0
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,156,/ check for positive overflow
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,157,f (a <= Long.MAX_VALUE - b) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,158,et = a + b;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,159, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,160,"hrow new MathArithmeticException(pattern, a, b);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,164,eturn ret;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,229,"inal long d = gcd(i, j);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,141,"final long d = ArithmeticsUtils.gcd(i, j);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,239,"inal long d = gcd(i, j);"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,151,"final long d = ArithmeticsUtils.gcd(i, j);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,387, Returns n!. Shorthand for {@code n} <a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,388," href=""http://mathworld.wolfram.com/Factorial.html""> Factorial</a>, the"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,389," product of the numbers {@code 1,...,n}."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,390, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,391, <Strong>Preconditions</strong>:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,392, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,393, <li> {@code n >= 0} (otherwise
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,394, {@code IllegalArgumentException} is thrown)</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,395, <li> The result is small enough to fit into a {@code long}. The
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,396, largest value of {@code n} for which {@code n!} <
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,397, Long.MAX_VALUE} is 20. If the computed value exceeds {@code Long.MAX_VALUE}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,398, an {@code ArithMeticException } is thrown.</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,399, </ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,400, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,402, @param n argument
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,403, @return {@code n!}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,404, @throws MathArithmeticException if the result is too large to be represented
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,405, by a {@code long}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,406, @throws NotPositiveException if {@code n < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,407, @throws MathArithmeticException if {@code n > 20}: The factorial value is too
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,408, large to fit in a {@code long}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,410,ublic static long factorial(final int n) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,411,f (n < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,412,"hrow new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,413,);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,415,f (n > 20) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,416,hrow new MathArithmeticException();
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,418,eturn FACTORIALS[n];
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,422," Compute n!, the<a href=""http://mathworld.wolfram.com/Factorial.html"">"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,423," factorial</a> of {@code n} (the product of the numbers 1 to n), as a"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,424, {@code double}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,425, The result should be small enough to fit into a {@code double}: The
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,426, largest {@code n} for which {@code n! < Double.MAX_VALUE} is 170.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,427," If the computed value exceeds {@code Double.MAX_VALUE},"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,428, {@code Double.POSITIVE_INFINITY} is returned.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,430, @param n Argument.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,431, @return {@code n!}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,432, @throws NotPositiveException if {@code n < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,434,ublic static double factorialDouble(final int n) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,435,f (n < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,436,"hrow new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,437,);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,439,f (n < 21) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,440,eturn factorial(n);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,442,eturn FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,446, Compute the natural logarithm of the factorial of {@code n}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,448, @param n Argument.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,449, @return {@code n!}
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,450, @throws NotPositiveException if {@code n < 0}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,452,ublic static double factorialLog(final int n) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,453,f (n < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,454,"hrow new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,455,);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,457,f (n < 21) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,458,eturn FastMath.log(factorial(n));
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,460,ouble logSum = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,461,or (int i = 2; i <= n; i++) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,462,ogSum += FastMath.log(i);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,464,eturn logSum;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,468, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,469," Gets the greatest common divisor of the absolute value of two numbers,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,470," using the ""binary gcd"" method which avoids division and modulo"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,471, operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,472, Stein (1961).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,473, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,474, Special cases:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,475, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,476, <li>The invocations
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,477," {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,478," {@code gcd(Integer.MIN_VALUE, 0)} and"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,479," {@code gcd(0, Integer.MIN_VALUE)} throw an"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,480," {@code ArithmeticException}, because the result would be 2^31, which"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,481, is too large for an int value.</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,482," <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,483," {@code gcd(x, 0)} is the absolute value of {@code x}, except"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,484, for the special cases above.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,485," <li>The invocation {@code gcd(0, 0)} is the only one which returns"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,486, {@code 0}.</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,487, </ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,489, @param p Number.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,490, @param q Number.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,491," @return the greatest common divisor, never negative."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,492, @throws MathArithmeticException if the result cannot be represented as
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,493, a non-negative {@code int} value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,494, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,496,"ublic static int gcd(final int p, final int q) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,497,nt u = p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,498,nt v = q;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,499,f ((u == 0) || (v == 0)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,500,f ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,501,"hrow new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,502,", q);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,504,eturn FastMath.abs(u) + FastMath.abs(v);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,506,"/ keep u and v negative, as negative integers range down to"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,507,"/ -2^31, while positive numbers can only be as large as 2^31-1"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,508,/ (i.e. we can't necessarily negate a negative number without
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,509,/ overflow)
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,510,* assert u!=0 && v!=0; */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,511,f (u > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,512, = -u;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,513, // make u negative
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,514,f (v > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,515, = -v;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,516, // make v negative
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,517,/ B1. [Find power of 2]
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,518,nt k = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,519,hile ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,520,/ both even...
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,521, /= 2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,522, /= 2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,523,++; // cast out twos.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,525,f (k == 31) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,526,"hrow new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,527,", q);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,529,/ B2. Initialize: u and v have been divided by 2^k and at least
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,530,/ one is odd.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,531,nt t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,532,"/ t negative: u was odd, v may be even (t replaces v)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,533,"/ t positive: u was even, v is odd (t replaces u)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,534,o {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,535,* assert u<0 && v<0; */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,536,/ B4/B3: cast out twos from t.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,537,hile ((t & 1) == 0) { // while t is even..
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,538, /= 2; // cast out twos
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,540,"/ B5 [reset max(u,v)]"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,541,f (t > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,542, = -t;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,543, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,544, = t;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,546,/ B6/B3. at this point both u and v should be odd.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,547, = (v - u) / 2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,548,/ |u| larger: t positive (replace u)
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,549,/ |v| larger: t negative (replace v)
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,550, while (t != 0);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,551,eturn -u * (1 << k); // gcd is u*2^k
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,555, <p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,556," Gets the greatest common divisor of the absolute value of two numbers,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,557," using the ""binary gcd"" method which avoids division and modulo"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,558, operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,559, Stein (1961).
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,560, </p>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,561, Special cases:
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,562, <ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,563, <li>The invocations
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,564," {@code gcd(Long.MIN_VALUE, Long.MIN_VALUE)},"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,565," {@code gcd(Long.MIN_VALUE, 0L)} and"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,566," {@code gcd(0L, Long.MIN_VALUE)} throw an"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,567," {@code ArithmeticException}, because the result would be 2^63, which"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,568, is too large for a long value.</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,569," <li>The result of {@code gcd(x, x)}, {@code gcd(0L, x)} and"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,570," {@code gcd(x, 0L)} is the absolute value of {@code x}, except"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,571, for the special cases above.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,572," <li>The invocation {@code gcd(0L, 0L)} is the only one which returns"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,573, {@code 0L}.</li>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,574, </ul>
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,576, @param p Number.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,577, @param q Number.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,578," @return the greatest common divisor, never negative."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,579, @throws MathArithmeticException if the result cannot be represented as
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,580, a non-negative {@code long} value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,581, @since 2.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,583,"ublic static long gcd(final long p, final long q) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,584,ong u = p;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,585,ong v = q;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,586,f ((u == 0) || (v == 0)) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,587,f ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,588,"hrow new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,589,", q);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,591,eturn FastMath.abs(u) + FastMath.abs(v);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,593,"/ keep u and v negative, as negative integers range down to"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,594,"/ -2^63, while positive numbers can only be as large as 2^63-1"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,595,/ (i.e. we can't necessarily negate a negative number without
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,596,/ overflow)
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,597,* assert u!=0 && v!=0; */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,598,f (u > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,599, = -u;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,600, // make u negative
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,601,f (v > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,602, = -v;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,603, // make v negative
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,604,/ B1. [Find power of 2]
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,605,nt k = 0;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,606,hile ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,607,/ both even...
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,608, /= 2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,609, /= 2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,610,++; // cast out twos.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,612,f (k == 63) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,613,"hrow new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,614,", q);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,616,/ B2. Initialize: u and v have been divided by 2^k and at least
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,617,/ one is odd.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,618,ong t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,619,"/ t negative: u was odd, v may be even (t replaces v)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,620,"/ t positive: u was even, v is odd (t replaces u)"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,621,o {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,622,* assert u<0 && v<0; */
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,623,/ B4/B3: cast out twos from t.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,624,hile ((t & 1) == 0) { // while t is even..
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,625, /= 2; // cast out twos
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,627,"/ B5 [reset max(u,v)]"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,628,f (t > 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,629, = -t;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,630, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,631, = t;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,633,/ B6/B3. at this point both u and v should be odd.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,634, = (v - u) / 2;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,635,/ |u| larger: t positive (replace u)
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,636,/ |v| larger: t negative (replace v)
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,637, while (t != 0);
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,638,eturn -u * (1L << k); // gcd is u*2^k
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,759,"nt lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,416,"int lcm = FastMath.abs(mulAndCheck(a / ArithmeticsUtils.gcd(a, b), b));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,793,"ong lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));"
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,450,"long lcm = FastMath.abs(mulAndCheck(a / ArithmeticsUtils.gcd(a, b), b));"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1212," Subtract two integers, checking for overflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1214, @param x Minuend.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1215, @param y Subtrahend.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1216, @return the difference {@code x - y}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1217, @throws MathArithmeticException if the result can not be represented
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1218, as an {@code int}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1219, @since 1.1
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1221,"ublic static int subAndCheck(int x, int y) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1222,ong s = (long)x - (long)y;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1223,f (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1224,"hrow new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1226,eturn (int)s;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1230," Subtract two long integers, checking for overflow."
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1232, @param a Value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1233, @param b Value.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1234, @return the difference {@code a - b}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1235, @throws MathArithmeticException if the result can not be represented as a
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1236, {@code long}.
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1237, @since 1.2
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1239,"ublic static long subAndCheck(long a, long b) {"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1240,ong ret;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1241,f (b == Long.MIN_VALUE) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1242,f (a < 0) {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1243,et = a - b;
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1244, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1245,"hrow new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1247, else {
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1248,/ use additive inverse
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1249,"et = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);"
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1251,eturn ret;

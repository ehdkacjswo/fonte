is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,17,package org.apache.commons.math.stat.descriptive;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,22,import org.apache.commons.math.DimensionMismatchException;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,23,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,24,import org.apache.commons.math.stat.descriptive.moment.GeometricMean;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,25,import org.apache.commons.math.stat.descriptive.moment.Mean;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,26,import org.apache.commons.math.stat.descriptive.moment.VectorialCovariance;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,27,import org.apache.commons.math.stat.descriptive.rank.Max;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,28,import org.apache.commons.math.stat.descriptive.rank.Min;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,29,import org.apache.commons.math.stat.descriptive.summary.Sum;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,30,import org.apache.commons.math.stat.descriptive.summary.SumOfLogs;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,31,import org.apache.commons.math.stat.descriptive.summary.SumOfSquares;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,32,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,35,* <p>Computes summary statistics for a stream of data values added using the
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,36,* {@link #addValue(double[]) addValue} method. The data values are not stored in
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,37,"* memory, so this class can be used to compute statistics for very large"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,38,* data streams.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,40,* <p>The {@link StorelessUnivariateStatistic} array instances used to maintain
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,41,* summary state and compute statistics are configurable via setters.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,42,"* For example, the default implementation for the mean can be overridden by"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,43,* calling {@link #setMeanImpl(StorelessUnivariateStatistic[])}. Actual
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,44,* parameters to these methods must implement the
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,45,* {@link StorelessUnivariateStatistic} interface and configuration must be
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,46,* completed before <code>addValue</code> is called. No configuration is
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,47,"* necessary to use the default, commons-math provided implementations.</p>"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,49,* <p>Note: This class is not thread-safe. Use
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,50,* {@link SynchronizedMultivariateSummaryStatistics} if concurrent access from multiple
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,51,* threads is required.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,53,* @since 1.2
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,54,"* @version $Revision: 618097 $ $Date: 2008-02-03 22:39:08 +0100 (dim., 03 févr. 2008) $"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,56,public class MultivariateSummaryStatistics
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,57,"implements StatisticalMultivariateSummary, Serializable {"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,59,/** Serialization UID */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,60,private static final long serialVersionUID = 2271900808994826718L;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,63,* Construct a MultivariateSummaryStatistics instance
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,64,* @param k dimension of the data
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,65,"* @param isCovarianceBiasCorrected if true, the unbiased sample"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,66,"* covariance is computed, otherwise the biased population covariance"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,67,* is computed
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,69,"public MultivariateSummaryStatistics(int k, boolean isCovarianceBiasCorrected) {"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,70,this.k = k;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,72,sumImpl     = new StorelessUnivariateStatistic[k];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,73,sumSqImpl   = new StorelessUnivariateStatistic[k];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,74,minImpl     = new StorelessUnivariateStatistic[k];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,75,maxImpl     = new StorelessUnivariateStatistic[k];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,76,sumLogImpl  = new StorelessUnivariateStatistic[k];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,77,geoMeanImpl = new StorelessUnivariateStatistic[k];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,78,meanImpl    = new StorelessUnivariateStatistic[k];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,80,for (int i = 0; i < k; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,81,sumImpl[i]     = new Sum();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,82,sumSqImpl[i]   = new SumOfSquares();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,83,minImpl[i]     = new Min();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,84,maxImpl[i]     = new Max();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,85,sumLogImpl[i]  = new SumOfLogs();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,86,geoMeanImpl[i] = new GeometricMean();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,87,meanImpl[i]    = new Mean();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,90,covarianceImpl =
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,91,"new VectorialCovariance(k, isCovarianceBiasCorrected);"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,95,/** Dimension of the data. */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,96,private int k;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,98,/** Count of values that have been added */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,99,private long n = 0;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,101,/** Sum statistic implementation - can be reset by setter. */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,102,private StorelessUnivariateStatistic[] sumImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,104,/** Sum of squares statistic implementation - can be reset by setter. */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,105,private StorelessUnivariateStatistic[] sumSqImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,107,/** Minimum statistic implementation - can be reset by setter. */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,108,private StorelessUnivariateStatistic[] minImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,110,/** Maximum statistic implementation - can be reset by setter. */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,111,private StorelessUnivariateStatistic[] maxImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,113,/** Sum of log statistic implementation - can be reset by setter. */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,114,private StorelessUnivariateStatistic[] sumLogImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,116,/** Geometric mean statistic implementation - can be reset by setter. */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,117,private StorelessUnivariateStatistic[] geoMeanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,119,/** Mean statistic implementation - can be reset by setter. */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,120,private StorelessUnivariateStatistic[] meanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,122,/** Covariance statistic implementation - cannot be reset. */
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,123,private VectorialCovariance covarianceImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,126,* Return a {@link StatisticalMultivariateSummary} instance reporting current
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,127,* statistics.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,129,* @return Current values of statistics
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,131,public StatisticalMultivariateSummary getSummary() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,132,"return new StatisticalMultivariateSummaryValues(getDimension(), getMean(),"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,133,"getCovariance(), getStandardDeviation(),"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,134,"getN(), getMax(), getMin(),"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,135,"getSum(), getSumSq(), getSumLog());"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,139,* Add a value to the data
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,141,* @param value  the value to add
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,142,* @throws DimensionMismatchException if the value dimension
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,143,* does not match the one used at construction
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,145,public void addValue(double[] value)
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,146,throws DimensionMismatchException {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,147,if (value.length != k) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,148,"throw new DimensionMismatchException(value.length, k);"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,151,for (int i = 0; i < k; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,152,double v = value[i];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,153,sumImpl[i].increment(v);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,154,sumSqImpl[i].increment(v);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,155,minImpl[i].increment(v);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,156,maxImpl[i].increment(v);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,157,sumLogImpl[i].increment(v);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,158,geoMeanImpl[i].increment(v);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,159,meanImpl[i].increment(v);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,161,covarianceImpl.increment(value);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,162,n++;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,166,* Returns the dimension of the data
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,167,* @return The dimension of the data
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,169,public int getDimension() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,170,return k;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,174,* Returns the number of available values
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,175,* @return The number of available values
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,177,public long getN() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,178,return n;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,182,* Returns an array of the results of a statistic.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,183,* @param stats univariate statistic array
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,184,* @return results array
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,186,private double[] getResults(StorelessUnivariateStatistic[] stats) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,187,double[] results = new double[stats.length];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,188,for (int i = 0; i < results.length; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,189,results[i] = stats[i].getResult();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,191,return results;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,195,* Returns the sum of the values that have been added
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,196,* @return The sum or <code>Double.NaN</code> if no values have been added
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,198,public double[] getSum() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,199,return getResults(sumImpl);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,203,* Returns the sum of the squares of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,204,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,205,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,207,* @return The sum of squares
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,209,public double[] getSumSq() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,210,return getResults(sumSqImpl);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,214,* Returns the sum of the logarithms of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,215,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,216,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,218,* @return The sum of logarithms
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,220,public double[] getSumLog() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,221,return getResults(sumLogImpl);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,225,* Returns the mean of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,226,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,227,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,229,* @return the mean
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,231,public double[] getMean() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,232,return getResults(meanImpl);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,236,* Returns the standard deviation of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,237,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,238,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,240,* @return the standard deviation
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,242,public double[] getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,243,double[] stdDev = new double[k];
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,244,if (getN() < 1) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,245,"Arrays.fill(stdDev, Double.NaN);"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,246,} else if (getN() < 2) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,247,"Arrays.fill(stdDev, 0.0);"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,248,} else {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,249,RealMatrix matrix = covarianceImpl.getResult();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,250,for (int i = 0; i < k; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,251,"stdDev[i] = Math.sqrt(matrix.getEntry(i, i));"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,254,return stdDev;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,258,* Returns the covariance of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,259,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,260,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,262,* @return the variance
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,264,public RealMatrix getCovariance() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,265,return covarianceImpl.getResult();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,269,* Returns the maximum of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,270,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,271,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,273,* @return the maximum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,275,public double[] getMax() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,276,return getResults(maxImpl);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,280,* Returns the minimum of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,281,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,282,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,284,* @return the minimum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,286,public double[] getMin() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,287,return getResults(minImpl);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,291,* Returns the geometric mean of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,292,* <p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,293,*  Double.NaN is returned if no values have been added.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,295,* @return the geometric mean
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,297,public double[] getGeometricMean() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,298,return getResults(geoMeanImpl);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,302,* Generates a text report displaying
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,303,* summary statistics from values that
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,304,* have been added.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,305,* @return String with line feeds displaying statistics
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,307,public String toString() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,308,StringBuffer outBuffer = new StringBuffer();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,309,"outBuffer.append(""MultivariateSummaryStatistics:\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,310,"outBuffer.append(""n: "" + getN() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,311,"append(outBuffer, getMin(), ""min: "", "", "", ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,312,"append(outBuffer, getMax(), ""max: "", "", "", ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,313,"append(outBuffer, getMean(), ""mean: "", "", "", ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,314,"append(outBuffer, getGeometricMean(), ""geometric mean: "", "", "", ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,315,"append(outBuffer, getSumSq(), ""sum of squares: "", "", "", ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,316,"append(outBuffer, getSumLog(), ""sum of logarithms: "", "", "", ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,317,"append(outBuffer, getStandardDeviation(), ""standard deviation: "", "", "", ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,318,"outBuffer.append(""covariance: "" + getCovariance().toString() + ""\n"");"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,319,return outBuffer.toString();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,323,* Append a text representation of an array to a buffer.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,324,* @param buffer buffer to fill
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,325,* @param data data array
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,326,* @param prefix text prefix
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,327,* @param separator elements separator
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,328,* @param suffix text suffix
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,330,"private void append(StringBuffer buffer, double[] data,"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,331,"String prefix, String separator, String suffix) {"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,332,buffer.append(prefix);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,333,for (int i = 0; i < data.length; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,334,if (i > 0) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,335,buffer.append(separator);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,337,buffer.append(data[i]);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,339,buffer.append(suffix);
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,343,* Resets all statistics and storage
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,345,public void clear() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,346,this.n = 0;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,347,for (int i = 0; i < k; ++i) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,348,minImpl[i].clear();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,349,maxImpl[i].clear();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,350,sumImpl[i].clear();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,351,sumLogImpl[i].clear();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,352,sumSqImpl[i].clear();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,353,geoMeanImpl[i].clear();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,354,meanImpl[i].clear();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,356,covarianceImpl.clear();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,360,* Returns true iff <code>object</code> is a <code>SummaryStatistics</code>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,361,* instance and all statistics have the same values as this.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,362,* @param object the object to test equality against.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,363,* @return true if object equals this
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,365,public boolean equals(Object object) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,366,if (object == this ) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,367,return true;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,369,if (object instanceof MultivariateSummaryStatistics == false) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,370,return false;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,372,MultivariateSummaryStatistics stat = (MultivariateSummaryStatistics) object;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,373,"return (MathUtils.equals(stat.getGeometricMean(),"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,374,this.getGeometricMean()) &&
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,375,"MathUtils.equals(stat.getMax(), this.getMax()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,376,"MathUtils.equals(stat.getMean(),this.getMean()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,377,"MathUtils.equals(stat.getMin(),this.getMin()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,378,"MathUtils.equals(stat.getN(), this.getN()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,379,"MathUtils.equals(stat.getSum(), this.getSum()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,380,"MathUtils.equals(stat.getSumSq(),this.getSumSq()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,381,"MathUtils.equals(stat.getSumLog(),this.getSumLog()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,382,stat.getCovariance().equals(this.getCovariance()));
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,386,* Returns hash code based on values of statistics
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,388,* @return hash code
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,390,public int hashCode() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,391,int result = 31 + MathUtils.hash(getGeometricMean());
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,392,result = result * 31 + MathUtils.hash(getGeometricMean());
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,393,result = result * 31 + MathUtils.hash(getMax());
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,394,result = result * 31 + MathUtils.hash(getMean());
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,395,result = result * 31 + MathUtils.hash(getMin());
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,396,result = result * 31 + MathUtils.hash(getN());
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,397,result = result * 31 + MathUtils.hash(getSum());
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,398,result = result * 31 + MathUtils.hash(getSumSq());
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,399,result = result * 31 + MathUtils.hash(getSumLog());
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,400,result = result * 31 + getCovariance().hashCode();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,401,return result;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,404,// Getters and setters for statistics implementations
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,406,* Returns the currently configured Sum implementation
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,408,* @return the StorelessUnivariateStatistic implementing the sum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,410,public StorelessUnivariateStatistic[] getSumImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,411,return sumImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,415,* <p>Sets the implementation for the Sum.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,416,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,417,* before {@link #addValue(double[]) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,418,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,420,* @param sumImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,421,* for computing the Sum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,422,* @throws IllegalArgumentException if the array dimension
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,423,* does not match the one used at construction
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,424,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,425,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,427,public void setSumImpl(StorelessUnivariateStatistic[] sumImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,428,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,429,this.sumImpl = sumImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,433,* Returns the currently configured sum of squares implementation
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,435,* @return the StorelessUnivariateStatistic implementing the sum of squares
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,437,public StorelessUnivariateStatistic[] getSumsqImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,438,return sumSqImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,442,* <p>Sets the implementation for the sum of squares.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,443,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,444,* before {@link #addValue(double[]) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,445,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,447,* @param sumsqImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,448,* for computing the sum of squares
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,449,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,450,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,452,public void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,453,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,454,this.sumSqImpl = sumsqImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,458,* Returns the currently configured minimum implementation
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,460,* @return the StorelessUnivariateStatistic implementing the minimum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,462,public StorelessUnivariateStatistic[] getMinImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,463,return minImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,467,* <p>Sets the implementation for the minimum.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,468,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,469,* before {@link #addValue(double[]) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,470,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,472,* @param minImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,473,* for computing the minimum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,474,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,475,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,477,public void setMinImpl(StorelessUnivariateStatistic[] minImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,478,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,479,this.minImpl = minImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,483,* Returns the currently configured maximum implementation
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,485,* @return the StorelessUnivariateStatistic implementing the maximum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,487,public StorelessUnivariateStatistic[] getMaxImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,488,return maxImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,492,* <p>Sets the implementation for the maximum.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,493,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,494,* before {@link #addValue(double[]) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,495,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,497,* @param maxImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,498,* for computing the maximum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,499,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,500,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,502,public void setMaxImpl(StorelessUnivariateStatistic[] maxImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,503,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,504,this.maxImpl = maxImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,508,* Returns the currently configured sum of logs implementation
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,510,* @return the StorelessUnivariateStatistic implementing the log sum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,512,public StorelessUnivariateStatistic[] getSumLogImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,513,return sumLogImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,517,* <p>Sets the implementation for the sum of logs.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,518,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,519,* before {@link #addValue(double[]) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,520,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,522,* @param sumLogImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,523,* for computing the log sum
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,524,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,525,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,527,public void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,528,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,529,this.sumLogImpl = sumLogImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,533,* Returns the currently configured geometric mean implementation
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,535,* @return the StorelessUnivariateStatistic implementing the geometric mean
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,537,public StorelessUnivariateStatistic[] getGeoMeanImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,538,return geoMeanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,542,* <p>Sets the implementation for the geometric mean.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,543,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,544,* before {@link #addValue(double[]) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,545,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,547,* @param geoMeanImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,548,* for computing the geometric mean
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,549,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,550,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,552,public void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,553,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,554,this.geoMeanImpl = geoMeanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,558,* Returns the currently configured mean implementation
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,560,* @return the StorelessUnivariateStatistic implementing the mean
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,562,public StorelessUnivariateStatistic[] getMeanImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,563,return meanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,567,* <p>Sets the implementation for the mean.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,568,"* <p>This method must be activated before any data has been added - i.e.,"
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,569,* before {@link #addValue(double[]) addValue} has been used to add data;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,570,* otherwise an IllegalStateException will be thrown.</p>
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,572,* @param meanImpl the StorelessUnivariateStatistic instance to use
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,573,* for computing the mean
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,574,* @throws IllegalStateException if data has already been added
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,575,*  (i.e if n > 0)
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,577,public void setMeanImpl(StorelessUnivariateStatistic[] meanImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,578,checkEmpty();
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,579,this.meanImpl = meanImpl;
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,583,* Throws IllegalStateException if n > 0.
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,585,private void checkEmpty() {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,586,if (n > 0) {
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,587,throw new IllegalStateException(
True,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatistics.java,588,"""Implementations must be configured before values are added."");"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,17,package org.apache.commons.math.stat.descriptive;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,19,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,22,*  Reporting interface for basic multivariate statistics.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,24,* @since 1.2
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,25,"* @version $Revision: 480440 $ $Date: 2006-11-29 08:14:12 +0100 (mer., 29 nov. 2006) $"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,27,public interface StatisticalMultivariateSummary {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,29,* Returns the dimension of the data
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,30,* @return The dimension of the data
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,32,public int getDimension();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,34,"* Returns the <a href=""http://www.xycoon.com/arithmetic_mean.htm"">"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,35,* arithmetic mean </a> of the available values
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,36,* @return The mean or null if no values have been added.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,38,public abstract double[] getMean();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,40,* Returns the covariance of the available values.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,41,"* @return The covariance, null if no values have been added"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,42,* or a zeroed matrix for a single value set.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,44,public abstract RealMatrix getCovariance();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,46,* Returns the standard deviation of the available values.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,47,"* @return The standard deviation, null if no values have been added"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,48,* or a zeroed array for a single value set.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,50,public abstract double[] getStandardDeviation();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,52,* Returns the maximum of the available values
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,53,* @return The max or null if no values have been added.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,55,public abstract double[] getMax();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,57,* Returns the minimum of the available values
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,58,* @return The min or null if no values have been added.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,60,public abstract double[] getMin();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,62,* Returns the number of available values
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,63,* @return The number of available values
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,65,public abstract long getN();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,67,* Returns the sum of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,68,* @return The sum or null if no values have been added
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,70,public abstract double[] getSum();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,72,* Returns the sum of the squares of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,73,* @return The sum or null if no values have been added
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,75,public abstract double[] getSumSq();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,77,* Returns the sum of the logarithms of the values that have been added.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,78,* @return The sum or null if no values have been added
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummary.java,80,public abstract double[] getSumLog();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,17,package org.apache.commons.math.stat.descriptive;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,19,import java.io.Serializable;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,21,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,22,import org.apache.commons.math.util.MathUtils;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,25,*  Value object representing the results of a statistical multivariate summary.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,27,* @since 1.2
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,28,"* @version $Revision: 480440 $ $Date: 2006-11-29 08:14:12 +0100 (mer., 29 nov. 2006) $"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,30,public class StatisticalMultivariateSummaryValues
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,31,"implements Serializable, StatisticalMultivariateSummary {"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,33,/** Serialization id */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,34,private static final long serialVersionUID = 8152538650791979064L;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,36,/** Dimension of the data. */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,37,private final int k;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,39,/** The sample mean */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,40,private final double[] mean;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,42,/** The sample covariance */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,43,private final RealMatrix covariance;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,45,/** The sample standard deviation. */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,46,private double[] stdev;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,48,/** The number of observations in the sample */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,49,private final long n;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,51,/** The maximum value */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,52,private final double[] max;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,54,/** The minimum value */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,55,private final double[] min;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,57,/** The sum of the sample values */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,58,private final double[] sum;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,60,/** The sum of the squares of the sample values */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,61,private final double[] sumSq;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,63,/** The sum of the logarithms of the sample values */
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,64,private final double[] sumLog;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,67,* Constructor
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,69,* @param mean  the sample mean
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,70,* @param covariance  the sample covariance
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,71,* @param stdev  the sample standard deviation
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,72,* @param k dimension of the data
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,73,* @param n  the number of observations in the sample
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,74,* @param max  the maximum value
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,75,* @param min  the minimum value
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,76,* @param sum  the sum of the values
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,77,* @param sumSq the sum of the squares of the values
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,78,* @param sumLog the sum of the logarithms of the values
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,80,"public StatisticalMultivariateSummaryValues(int k, double[] mean,"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,81,"RealMatrix covariance, double[] stdev,"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,82,"long n, double[] max, double[] min,"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,83,"double[] sum, double[] sumSq, double[] sumLog) {"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,84,super();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,85,this.k = k;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,86,this.mean = mean;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,87,this.covariance = covariance;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,88,this.stdev = stdev;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,89,this.n = n;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,90,this.max = max;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,91,this.min = min;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,92,this.sum = sum;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,93,this.sumSq = sumSq;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,94,this.sumLog = sumLog;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,98,* Returns the dimension of the data
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,99,* @return The dimension of the data
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,101,public int getDimension() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,102,return k;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,106,* @return Returns the max.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,108,public double[] getMax() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,109,return max;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,113,* @return Returns the mean.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,115,public double[] getMean() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,116,return mean;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,120,* @return Returns the min.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,122,public double[] getMin() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,123,return min;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,127,* @return Returns the number of values.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,129,public long getN() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,130,return n;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,134,* @return Returns the sum.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,136,public double[] getSum() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,137,return sum;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,141,* @return Returns the sum of the squares.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,143,public double[] getSumSq() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,144,return sumSq;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,148,* @return Returns the sum of the logarithms.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,150,public double[] getSumLog() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,151,return sumLog;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,155,* @return Returns the standard deviation (roots of the diagonal elements)
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,157,public double[] getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,158,return stdev;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,162,* @return Returns the covariance.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,164,public RealMatrix getCovariance() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,165,return covariance;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,169,* Returns true iff <code>object</code> is a
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,170,* <code>StatisticalSummaryValues</code> instance and all statistics have
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,171,*  the same values as this.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,173,* @param object the object to test equality against.
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,174,* @return true if object equals this
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,176,public boolean equals(Object object) {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,177,if (object == this ) {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,178,return true;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,180,if (object instanceof StatisticalMultivariateSummaryValues == false) {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,181,return false;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,183,StatisticalMultivariateSummaryValues stat = (StatisticalMultivariateSummaryValues) object;
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,184,return ((stat.getDimension() == this.getDimension()) &&
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,185,"MathUtils.equals(stat.getMax(), this.getMax()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,186,"MathUtils.equals(stat.getMean(),this.getMean()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,187,"MathUtils.equals(stat.getMin(),this.getMin()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,188,"MathUtils.equals(stat.getN(), this.getN()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,189,"MathUtils.equals(stat.getSum(), this.getSum()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,190,"MathUtils.equals(stat.getSumSq(), this.getSumSq()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,191,"MathUtils.equals(stat.getSumLog(), this.getSumLog()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,192,"MathUtils.equals(stat.getStandardDeviation(), this.getStandardDeviation()) &&"
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,193,stat.getCovariance().equals(this.getCovariance()));
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,197,* Returns hash code based on values of statistics
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,199,* @return hash code
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,201,public int hashCode() {
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,202,int result = getDimension();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,203,result = result * 31 + MathUtils.hash(getMax());
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,204,result = result * 31 + MathUtils.hash(getMean());
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,205,result = result * 31 + MathUtils.hash(getMin());
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,206,result = result * 31 + MathUtils.hash(getN());
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,207,result = result * 31 + MathUtils.hash(getSum());
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,208,result = result * 31 + MathUtils.hash(getSumSq());
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,209,result = result * 31 + MathUtils.hash(getSumLog());
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,210,result = result * 31 + getCovariance().hashCode();
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,211,result = result * 31 + MathUtils.hash(getStandardDeviation());
True,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,src/java/org/apache/commons/math/stat/descriptive/StatisticalMultivariateSummaryValues.java,212,return result;
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,17,package org.apache.commons.math.stat.descriptive;
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,19,import org.apache.commons.math.DimensionMismatchException;
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,20,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,23,* Implementation of
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,24,* {@link org.apache.commons.math.stat.descriptive.MultivariateSummaryStatistics} that
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,25,* is safe to use in a multithreaded environment.  Multiple threads can safely
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,26,* operate on a single instance without causing runtime exceptions due to race
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,27,"* conditions.  In effect, this implementation makes modification and access"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,28,"* methods atomic operations for a single instance.  That is to say, as one"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,29,"* thread is computing a statistic from the instance, no other thread can modify"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,30,* the instance nor compute another statistic.
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,31,* @since 1.2
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,32,"* @version $Revision: 618097 $ $Date: 2008-02-03 22:39:08 +0100 (dim., 03 févr. 2008) $"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,34,public class SynchronizedMultivariateSummaryStatistics
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,35,extends MultivariateSummaryStatistics {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,37,/** Serialization UID */
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,38,private static final long serialVersionUID = 7099834153347155363L;
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,41,* Construct a SynchronizedMultivariateSummaryStatistics instance
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,42,* @param k dimension of the data
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,43,"* @param isCovarianceBiasCorrected if true, the unbiased sample"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,44,"* covariance is computed, otherwise the biased population covariance"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,45,* is computed
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,47,"public SynchronizedMultivariateSummaryStatistics(int k, boolean isCovarianceBiasCorrected) {"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,48,"super(k, isCovarianceBiasCorrected);"
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,52,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getSummary()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,54,public synchronized StatisticalMultivariateSummary getSummary() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,55,return super.getSummary();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,59,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#addValue(double[])
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,61,public synchronized void addValue(double[] value)
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,62,throws DimensionMismatchException {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,63,super.addValue(value);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,67,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getDimension()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,69,public synchronized int getDimension() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,70,return super.getDimension();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,74,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getN()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,76,public synchronized long getN() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,77,return super.getN();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,81,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getSum()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,83,public synchronized double[] getSum() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,84,return super.getSum();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,88,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getSummSq()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,90,public synchronized double[] getSumSq() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,91,return super.getSumSq();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,95,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getSumLog()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,97,public synchronized double[] getSumLog() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,98,return super.getSumLog();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,102,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getMean()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,104,public synchronized double[] getMean() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,105,return super.getMean();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,109,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getStandardDeviation()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,111,public synchronized double[] getStandardDeviation() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,112,return super.getStandardDeviation();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,116,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getCovariance()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,118,public synchronized RealMatrix getCovariance() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,119,return super.getCovariance();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,123,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getMax()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,125,public synchronized double[] getMax() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,126,return super.getMax();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,130,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getMin()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,132,public synchronized double[] getMin() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,133,return super.getMin();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,137,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getGeometricMean()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,139,public synchronized double[] getGeometricMean() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,140,return super.getGeometricMean();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,144,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#toString()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,146,public synchronized String toString() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,147,return super.toString();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,151,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#clear()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,153,public synchronized void clear() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,154,super.clear();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,158,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#equals()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,160,public synchronized boolean equals(Object object) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,161,return super.equals(object);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,165,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#hashCode()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,167,public synchronized int hashCode() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,168,return super.hashCode();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,172,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getSumImpl()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,174,public synchronized StorelessUnivariateStatistic[] getSumImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,175,return super.getSumImpl();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,179,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setSumImpl(StorelessUnivariateStatistic[])
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,181,public synchronized void setSumImpl(StorelessUnivariateStatistic[] sumImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,182,super.setSumImpl(sumImpl);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,186,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getSumsqImpl()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,188,public synchronized StorelessUnivariateStatistic[] getSumsqImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,189,return super.getSumsqImpl();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,193,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setSumsqImpl(StorelessUnivariateStatistic[])
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,195,public synchronized void setSumsqImpl(StorelessUnivariateStatistic[] sumsqImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,196,super.setSumsqImpl(sumsqImpl);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,200,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getMinImpl()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,202,public synchronized StorelessUnivariateStatistic[] getMinImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,203,return super.getMinImpl();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,207,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setMinImpl(StorelessUnivariateStatistic[])
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,209,public synchronized void setMinImpl(StorelessUnivariateStatistic[] minImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,210,super.setMinImpl(minImpl);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,214,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getMaxImpl()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,216,public synchronized StorelessUnivariateStatistic[] getMaxImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,217,return super.getMaxImpl();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,221,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setMaxImpl(StorelessUnivariateStatistic[])
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,223,public synchronized void setMaxImpl(StorelessUnivariateStatistic[] maxImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,224,super.setMaxImpl(maxImpl);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,228,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getSumLogImpl()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,230,public synchronized StorelessUnivariateStatistic[] getSumLogImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,231,return super.getSumLogImpl();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,235,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setSumLogImpl(StorelessUnivariateStatistic[])
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,237,public synchronized void setSumLogImpl(StorelessUnivariateStatistic[] sumLogImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,238,super.setSumLogImpl(sumLogImpl);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,242,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getGeoMeanImpl()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,244,public synchronized StorelessUnivariateStatistic[] getGeoMeanImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,245,return super.getGeoMeanImpl();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,249,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setGeoMeanImpl(StorelessUnivariateStatistic[])
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,251,public synchronized void setGeoMeanImpl(StorelessUnivariateStatistic[] geoMeanImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,252,super.setGeoMeanImpl(geoMeanImpl);
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,256,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#getMeanImpl()
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,258,public synchronized StorelessUnivariateStatistic[] getMeanImpl() {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,259,return super.getMeanImpl();
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,263,* @see org.apache.commons.math.stat.descriptive.MultivariateSummary#setMeanImpl(StorelessUnivariateStatistic[])
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,265,public synchronized void setMeanImpl(StorelessUnivariateStatistic[] meanImpl) {
True,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/SynchronizedMultivariateSummaryStatistics.java,266,super.setMeanImpl(meanImpl);
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,17,package org.apache.commons.math.stat.descriptive;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,20,import junit.framework.Test;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,21,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,22,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,24,import org.apache.commons.math.DimensionMismatchException;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,25,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,26,import org.apache.commons.math.stat.descriptive.moment.Mean;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,29,* Test cases for the {@link MultivariateSummaryStatistics} class.
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,31,"* @version $Revision: 566833 $ $Date: 2007-08-16 13:36:33 -0700 (Thu, 16 Aug 2007) $"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,34,public class MultivariateSummaryStatisticsTest extends TestCase {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,36,public MultivariateSummaryStatisticsTest(String name) {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,37,super(name);
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,40,public static Test suite() {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,41,TestSuite suite = new TestSuite(MultivariateSummaryStatisticsTest.class);
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,42,"suite.setName(""MultivariateSummaryStatistics tests"");"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,43,return suite;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,46,public void testSetterInjection() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,47,"MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,48,u.setMeanImpl(new StorelessUnivariateStatistic[] {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,49,"new sumMean(), new sumMean()"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,51,"u.addValue(new double[] { 1, 2 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,52,"u.addValue(new double[] { 3, 4 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,53,"assertEquals(4, u.getMean()[0], 1E-14);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,54,"assertEquals(6, u.getMean()[1], 1E-14);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,55,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,56,"u.addValue(new double[] { 1, 2 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,57,"u.addValue(new double[] { 3, 4 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,58,"assertEquals(4, u.getMean()[0], 1E-14);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,59,"assertEquals(6, u.getMean()[1], 1E-14);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,60,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,61,u.setMeanImpl(new StorelessUnivariateStatistic[] {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,62,"new Mean(), new Mean()"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,63,}); // OK after clear
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,64,"u.addValue(new double[] { 1, 2 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,65,"u.addValue(new double[] { 3, 4 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,66,"assertEquals(2, u.getMean()[0], 1E-14);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,67,"assertEquals(3, u.getMean()[1], 1E-14);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,70,public void testSetterIllegalState() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,71,"MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,72,"u.addValue(new double[] { 1, 2 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,73,"u.addValue(new double[] { 3, 4 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,74,try {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,75,u.setMeanImpl(new StorelessUnivariateStatistic[] {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,76,"new sumMean(), new sumMean()"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,78,"fail(""Expecting IllegalStateException"");"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,79,} catch (IllegalStateException ex) {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,80,// expected
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,85,* Bogus mean implementation to test setter injection.
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,86,* Returns the sum instead of the mean.
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,88,static class sumMean implements StorelessUnivariateStatistic {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,89,private static final long serialVersionUID = 6492471391340853423L;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,90,private double sum = 0;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,91,private long n = 0;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,92,"public double evaluate(double[] values, int begin, int length) {"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,93,return 0;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,95,public double evaluate(double[] values) {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,96,return 0;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,98,public void clear() {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,99,sum = 0;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,100,n = 0;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,102,public long getN() {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,103,return n;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,105,public double getResult() {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,106,return sum;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,108,public void increment(double d) {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,109,sum += d;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,110,n++;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,112,"public void incrementAll(double[] values, int start, int length) {"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,114,public void incrementAll(double[] values) {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,118,public void testDimension() {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,119,try {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,120,"new MultivariateSummaryStatistics(2, true).addValue(new double[3]);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,121,} catch (DimensionMismatchException dme) {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,122,// expected behavior
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,123,} catch (Exception e) {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,124,"fail(""wrong exception caught"");"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,128,/** test stats */
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,129,public void testStats() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,130,"MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,131,"assertEquals(0, u.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,132,"u.addValue(new double[] { 1, 2 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,133,"u.addValue(new double[] { 2, 3 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,134,"u.addValue(new double[] { 2, 3 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,135,"u.addValue(new double[] { 3, 4 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,136,"assertEquals( 4, u.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,137,"assertEquals( 8, u.getSum()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,138,"assertEquals(12, u.getSum()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,139,"assertEquals(18, u.getSumSq()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,140,"assertEquals(38, u.getSumSq()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,141,"assertEquals( 1, u.getMin()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,142,"assertEquals( 2, u.getMin()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,143,"assertEquals( 3, u.getMax()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,144,"assertEquals( 4, u.getMax()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,145,"assertEquals(2.4849066497880003102, u.getSumLog()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,146,"assertEquals( 4.276666119016055311, u.getSumLog()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,147,"assertEquals( 1.8612097182041991979, u.getGeometricMean()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,148,"assertEquals( 2.9129506302439405217, u.getGeometricMean()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,149,"assertEquals( 2, u.getMean()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,150,"assertEquals( 3, u.getMean()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,151,"assertEquals(Math.sqrt(2.0 / 3.0), u.getStandardDeviation()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,152,"assertEquals(Math.sqrt(2.0 / 3.0), u.getStandardDeviation()[1], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,153,"assertEquals(2.0 / 3.0, u.getCovariance().getEntry(0, 0), 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,154,"assertEquals(2.0 / 3.0, u.getCovariance().getEntry(0, 1), 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,155,"assertEquals(2.0 / 3.0, u.getCovariance().getEntry(1, 0), 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,156,"assertEquals(2.0 / 3.0, u.getCovariance().getEntry(1, 1), 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,157,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,158,"assertEquals(0, u.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,161,public void testN0andN1Conditions() throws Exception {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,162,"MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(1, true);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,163,assertTrue(Double.isNaN(u.getMean()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,164,assertTrue(Double.isNaN(u.getStandardDeviation()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,166,/* n=1 */
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,167,u.addValue(new double[] { 1 });
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,168,"assertEquals(1.0, u.getMean()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,169,"assertEquals(1.0, u.getGeometricMean()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,170,"assertEquals(0.0, u.getStandardDeviation()[0], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,172,/* n=2 */
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,173,u.addValue(new double[] { 2 });
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,174,assertTrue(u.getStandardDeviation()[0] > 0);
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,178,public void testNaNContracts() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,179,"MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(1, true);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,180,assertTrue(Double.isNaN(u.getMean()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,181,assertTrue(Double.isNaN(u.getMin()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,182,assertTrue(Double.isNaN(u.getStandardDeviation()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,183,assertTrue(Double.isNaN(u.getGeometricMean()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,185,u.addValue(new double[] { 1.0 });
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,186,assertFalse(Double.isNaN(u.getMean()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,187,assertFalse(Double.isNaN(u.getMin()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,188,assertFalse(Double.isNaN(u.getStandardDeviation()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,189,assertFalse(Double.isNaN(u.getGeometricMean()[0]));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,193,public void testGetSummary() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,194,"MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,195,StatisticalMultivariateSummary summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,196,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,197,"u.addValue(new double[] { 1, 2 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,198,summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,199,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,200,"u.addValue(new double[] { 2, 5 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,201,summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,202,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,203,"u.addValue(new double[] { 2, 2 });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,204,summary = u.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,205,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,208,public void testSerialization() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,209,"MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,210,// Empty test
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,211,TestUtils.checkSerializedEquality(u);
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,212,MultivariateSummaryStatistics s = (MultivariateSummaryStatistics) TestUtils.serializeAndRecover(u);
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,213,StatisticalMultivariateSummary summary = s.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,214,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,216,// Add some data
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,217,"u.addValue(new double[] { 2d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,218,"u.addValue(new double[] { 1d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,219,"u.addValue(new double[] { 3d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,220,"u.addValue(new double[] { 4d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,221,"u.addValue(new double[] { 5d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,223,// Test again
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,224,TestUtils.checkSerializedEquality(u);
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,225,s = (MultivariateSummaryStatistics) TestUtils.serializeAndRecover(u);
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,226,summary = s.getSummary();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,227,"verifySummary(u, summary);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,231,public void testEqualsAndHashCode() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,232,"MultivariateSummaryStatistics u = new MultivariateSummaryStatistics(2, true);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,233,MultivariateSummaryStatistics t = null;
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,234,int emptyHash = u.hashCode();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,235,assertTrue(u.equals(u));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,236,assertFalse(u.equals(t));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,237,assertFalse(u.equals(new Double(0)));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,238,"t = new MultivariateSummaryStatistics(2, true);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,239,assertTrue(t.equals(u));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,240,assertTrue(u.equals(t));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,241,"assertEquals(emptyHash, t.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,243,// Add some data to u
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,244,"u.addValue(new double[] { 2d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,245,"u.addValue(new double[] { 1d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,246,"u.addValue(new double[] { 3d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,247,"u.addValue(new double[] { 4d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,248,"u.addValue(new double[] { 5d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,249,assertFalse(t.equals(u));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,250,assertFalse(u.equals(t));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,251,assertTrue(u.hashCode() != t.hashCode());
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,253,//Add data in same order to t
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,254,"t.addValue(new double[] { 2d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,255,"t.addValue(new double[] { 1d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,256,"t.addValue(new double[] { 3d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,257,"t.addValue(new double[] { 4d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,258,"t.addValue(new double[] { 5d, 1d });"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,259,assertTrue(t.equals(u));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,260,assertTrue(u.equals(t));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,261,"assertEquals(u.hashCode(), t.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,263,// Clear and make sure summaries are indistinguishable from empty summary
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,264,u.clear();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,265,t.clear();
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,266,assertTrue(t.equals(u));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,267,assertTrue(u.equals(t));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,268,"assertEquals(emptyHash, t.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,269,"assertEquals(emptyHash, u.hashCode());"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,272,"private void verifySummary(MultivariateSummaryStatistics u, StatisticalMultivariateSummary s) {"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,273,"assertEquals(s.getN(), u.getN());"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,274,for (int i = 0; i < u.getDimension(); ++i) {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,275,"checkValue(s.getSum()[i], u.getSum()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,276,"checkValue(s.getStandardDeviation()[i], u.getStandardDeviation()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,277,"checkValue(s.getMean()[i], u.getMean()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,278,"checkValue(s.getMin()[i], u.getMin()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,279,"checkValue(s.getMax()[i], u.getMax()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,280,"checkValue(s.getSumSq()[i], u.getSumSq()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,281,"checkValue(s.getSumLog()[i], u.getSumLog()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,282,"checkValue(s.getMax()[i], u.getMax()[i], 1.0e-10);"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,286,"private void checkValue(double expected, double actual, double tolerance) {"
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,287,if (Double.isNaN(expected)) {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,288,assertTrue(Double.isNaN(actual));
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,289,} else {
True,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,290,"assertEquals(expected, actual, tolerance);"

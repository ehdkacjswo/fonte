is_addition,old_file_path,new_file_path,line_num,content
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,17,package org.apache.commons.math.linear;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,19,import org.apache.commons.math.Field;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,20,import org.apache.commons.math.fraction.Fraction;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,21,import org.apache.commons.math.fraction.FractionConversionException;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,22,import org.apache.commons.math.fraction.FractionField;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,23,import org.apache.commons.math.linear.decomposition.FieldLUDecompositionImpl;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,24,import org.apache.commons.math.linear.decomposition.NonSquareMatrixException;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,26,import junit.framework.Test;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,27,import junit.framework.TestCase;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,28,import junit.framework.TestSuite;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,31,* Test cases for the {@link SparseFieldMatrix} class.
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,33,"* @version $Revision: 728186 $ $Date: 2009-04-20 11:42:11 -0700 (Mon, 20 Apr 2009) $"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,35,public class SparseFieldMatrixTest extends TestCase {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,36,// 3 x 3 identity matrix
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,37,"protected Fraction[][] id = { {new Fraction(1), new Fraction(0), new Fraction(0) }, { new Fraction(0), new Fraction(1), new Fraction(0) }, { new Fraction(0), new Fraction(0), new Fraction(1) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,38,// Test data for group operations
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,39,"protected Fraction[][] testData = { { new Fraction(1), new Fraction(2), new Fraction(3) }, { new Fraction(2), new Fraction(5), new Fraction(3) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,40,"{ new Fraction(1), new Fraction(0), new Fraction(8) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,41,protected Fraction[][] testDataLU = null;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,42,"protected Fraction[][] testDataPlus2 = { { new Fraction(3), new Fraction(4), new Fraction(5) }, { new Fraction(4), new Fraction(7), new Fraction(5) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,43,"{ new Fraction(3), new Fraction(2), new Fraction(10) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,44,"protected Fraction[][] testDataMinus = { { new Fraction(-1), new Fraction(-2), new Fraction(-3) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,45,"{ new Fraction(-2), new Fraction(-5), new Fraction(-3) }, { new Fraction(-1), new Fraction(0), new Fraction(-8) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,46,"protected Fraction[] testDataRow1 = { new Fraction(1), new Fraction(2), new Fraction(3) };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,47,"protected Fraction[] testDataCol3 = { new Fraction(3), new Fraction(3), new Fraction(8) };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,48,"protected Fraction[][] testDataInv = { { new Fraction(-40), new Fraction(16), new Fraction(9) }, { new Fraction(13), new Fraction(-5), new Fraction(-3) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,49,"{ new Fraction(5), new Fraction(-2), new Fraction(-1) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,50,"protected Fraction[] preMultTest = { new Fraction(8), new Fraction(12), new Fraction(33) };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,51,"protected Fraction[][] testData2 = { { new Fraction(1), new Fraction(2), new Fraction(3) }, { new Fraction(2), new Fraction(5), new Fraction(3) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,52,"protected Fraction[][] testData2T = { { new Fraction(1), new Fraction(2) }, { new Fraction(2), new Fraction(5) }, { new Fraction(3), new Fraction(3) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,53,"protected Fraction[][] testDataPlusInv = { { new Fraction(-39), new Fraction(18), new Fraction(12) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,54,"{ new Fraction(15), new Fraction(0), new Fraction(0) }, { new Fraction(6), new Fraction(-2), new Fraction(7) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,56,// lu decomposition tests
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,57,"protected Fraction[][] luData = { { new Fraction(2), new Fraction(3), new Fraction(3) }, { new Fraction(0), new Fraction(5), new Fraction(7) }, { new Fraction(6), new Fraction(9), new Fraction(8) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,58,protected Fraction[][] luDataLUDecomposition = null;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,60,// singular matrices
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,61,"protected Fraction[][] singular = { { new Fraction(2), new Fraction(3) }, { new Fraction(2), new Fraction(3) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,62,"protected Fraction[][] bigSingular = { { new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,63,"{ new Fraction(2), new Fraction(5), new Fraction(3), new Fraction(4) }, { new Fraction(7), new Fraction(3), new Fraction(256), new Fraction(1930) }, { new Fraction(3), new Fraction(7), new Fraction(6), new Fraction(8) } }; // 4th"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,65,// row
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,67,// 1st
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,69,// 2nd
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,70,"protected Fraction[][] detData = { { new Fraction(1), new Fraction(2), new Fraction(3) }, { new Fraction(4), new Fraction(5), new Fraction(6) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,71,"{ new Fraction(7), new Fraction(8), new Fraction(10) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,72,"protected Fraction[][] detData2 = { { new Fraction(1), new Fraction(3) }, { new Fraction(2), new Fraction(4) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,74,// vectors
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,75,"protected Fraction[] testVector = { new Fraction(1), new Fraction(2), new Fraction(3) };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,76,"protected Fraction[] testVector2 = { new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4) };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,78,// submatrix accessor tests
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,79,protected Fraction[][] subTestData = null;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,81,// array selections
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,82,"protected Fraction[][] subRows02Cols13 = { {new Fraction(2), new Fraction(4) }, { new Fraction(4), new Fraction(8) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,83,"protected Fraction[][] subRows03Cols12 = { { new Fraction(2), new Fraction(3) }, { new Fraction(5), new Fraction(6) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,84,"protected Fraction[][] subRows03Cols123 = { { new Fraction(2), new Fraction(3), new Fraction(4) }, { new Fraction(5), new Fraction(6), new Fraction(7) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,86,// effective permutations
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,87,"protected Fraction[][] subRows20Cols123 = { { new Fraction(4), new Fraction(6), new Fraction(8) }, { new Fraction(2), new Fraction(3), new Fraction(4) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,88,protected Fraction[][] subRows31Cols31 = null;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,90,// contiguous ranges
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,91,protected Fraction[][] subRows01Cols23 = null;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,92,"protected Fraction[][] subRows23Cols00 = { { new Fraction(2) }, { new Fraction(4) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,93,protected Fraction[][] subRows00Cols33 = { { new Fraction(4) } };
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,95,// row matrices
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,96,"protected Fraction[][] subRow0 = { { new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,97,"protected Fraction[][] subRow3 = { { new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,99,// column matrices
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,100,protected Fraction[][] subColumn1 = null;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,101,protected Fraction[][] subColumn3 = null;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,103,// tolerances
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,104,protected double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,105,protected double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,106,protected Field<Fraction> field = FractionField.getInstance();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,108,public SparseFieldMatrixTest(String name) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,109,super(name);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,110,setupFractionArrays();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,113,private void setupFractionArrays() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,114,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,115,"testDataLU = new Fraction[][]{ { new Fraction(2), new Fraction(5), new Fraction(3) }, { new Fraction(.5d), new Fraction(-2.5d), new Fraction(6.5d) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,116,"{ new Fraction(0.5d), new Fraction(0.2d), new Fraction(.2d) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,117,"luDataLUDecomposition = new Fraction[][]{ { new Fraction(6), new Fraction(9), new Fraction(8) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,118,"{ new Fraction(0), new Fraction(5), new Fraction(7) }, { new Fraction(0.33333333333333), new Fraction(0), new Fraction(0.33333333333333) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,119,"subTestData = new Fraction [][]{ { new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,120,"{ new Fraction(1.5), new Fraction(2.5), new Fraction(3.5), new Fraction(4.5) }, { new Fraction(2), new Fraction(4), new Fraction(6), new Fraction(8) }, { new Fraction(4), new Fraction(5), new Fraction(6), new Fraction(7) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,121,"subRows31Cols31 = new Fraction[][]{ { new Fraction(7), new Fraction(5) }, { new Fraction(4.5), new Fraction(2.5) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,122,"subRows01Cols23 = new Fraction[][]{ { new Fraction(3), new Fraction(4) }, { new Fraction(3.5), new Fraction(4.5) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,123,"subColumn1 = new Fraction [][]{ { new Fraction(2) }, { new Fraction(2.5) }, { new Fraction(4) }, { new Fraction(5) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,124,"subColumn3 = new Fraction[][]{ { new Fraction(4) }, { new Fraction(4.5) }, { new Fraction(8) }, { new Fraction(7) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,125,} catch (FractionConversionException e) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,126,"// ignore, can't happen"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,132,public static Test suite() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,133,TestSuite suite = new TestSuite(SparseFieldMatrixTest.class);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,134,"suite.setName(""SparseFieldMatrix<Fraction> Tests"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,135,return suite;
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,138,/** test dimensions */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,139,public void testDimensions() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,140,SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,141,SparseFieldMatrix<Fraction> m2 = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,142,"assertEquals(""testData row dimension"", 3, m.getRowDimension());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,143,"assertEquals(""testData column dimension"", 3, m.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,144,"assertTrue(""testData is square"", m.isSquare());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,145,"assertEquals(""testData2 row dimension"", m2.getRowDimension(), 2);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,146,"assertEquals(""testData2 column dimension"", m2.getColumnDimension(), 3);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,147,"assertTrue(""testData2 is not square"", !m2.isSquare());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,150,/** test copy functions */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,151,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,152,SparseFieldMatrix<Fraction> m1 = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,153,FieldMatrix<Fraction> m2 = m1.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,154,assertTrue(m2 instanceof SparseFieldMatrix);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,155,"assertEquals((m2), m1);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,156,SparseFieldMatrix<Fraction> m3 = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,157,FieldMatrix<Fraction> m4 = m3.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,158,assertTrue(m4 instanceof SparseFieldMatrix);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,159,"assertEquals((m4), m3);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,162,/** test add */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,163,public void testAdd() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,164,SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,165,SparseFieldMatrix<Fraction> mInv = createSparseMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,166,SparseFieldMatrix<Fraction> mDataPlusInv = createSparseMatrix(testDataPlusInv);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,167,FieldMatrix<Fraction> mPlusMInv = m.add(mInv);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,168,for (int row = 0; row < m.getRowDimension(); row++) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,169,for (int col = 0; col < m.getColumnDimension(); col++) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,170,"assertEquals(""sum entry entry"","
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,171,"mDataPlusInv.getEntry(row, col).doubleValue(), mPlusMInv.getEntry(row, col).doubleValue(),"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,172,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,177,/** test add failure */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,178,public void testAddFail() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,179,SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,180,SparseFieldMatrix<Fraction> m2 = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,181,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,182,m.add(m2);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,183,"fail(""IllegalArgumentException expected"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,184,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,185,// ignored
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,190,/** test m-n = m + -n */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,191,public void testPlusMinus() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,192,SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,193,SparseFieldMatrix<Fraction> n = createSparseMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,194,"assertClose(""m-n = m + -n"", m.subtract(n),"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,195,"n.scalarMultiply(new Fraction(-1)).add(m), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,196,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,197,m.subtract(createSparseMatrix(testData2));
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,198,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,199,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,200,// ignored
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,204,/** test multiply */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,205,public void testMultiply() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,206,SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,207,SparseFieldMatrix<Fraction> mInv = createSparseMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,208,SparseFieldMatrix<Fraction> identity = createSparseMatrix(id);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,209,SparseFieldMatrix<Fraction> m2 = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,210,"assertClose(""inverse multiply"", m.multiply(mInv), identity,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,211,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,212,"assertClose(""inverse multiply"", m.multiply(new FieldMatrixImpl<Fraction>(testDataInv)), identity,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,213,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,214,"assertClose(""inverse multiply"", mInv.multiply(m), identity,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,215,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,216,"assertClose(""identity multiply"", m.multiply(identity), m,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,217,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,218,"assertClose(""identity multiply"", identity.multiply(mInv), mInv,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,219,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,220,"assertClose(""identity multiply"", m2.multiply(identity), m2,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,221,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,222,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,223,m.multiply(createSparseMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,224,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,225,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,226,// ignored
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,230,// Additional Test for RealMatrixImplTest.testMultiply
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,232,"private Fraction[][] d3 = new Fraction[][] { { new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4) }, { new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,233,"private Fraction[][] d4 = new Fraction[][] { { new Fraction(1) }, { new Fraction(2) }, { new Fraction(3) }, { new Fraction(4) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,234,"private Fraction[][] d5 = new Fraction[][] { { new Fraction(30) }, { new Fraction(70) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,236,public void testMultiply2() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,237,FieldMatrix<Fraction> m3 = createSparseMatrix(d3);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,238,FieldMatrix<Fraction> m4 = createSparseMatrix(d4);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,239,FieldMatrix<Fraction> m5 = createSparseMatrix(d5);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,240,"assertClose(""m3*m4=m5"", m3.multiply(m4), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,243,/** test trace */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,244,public void testTrace() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,245,FieldMatrix<Fraction> m = createSparseMatrix(id);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,246,"assertEquals(""identity trace"", 3d, m.getTrace().doubleValue(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,247,m = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,248,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,249,m.getTrace();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,250,"fail(""Expecting NonSquareMatrixException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,251,} catch (NonSquareMatrixException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,252,// ignored
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,256,/** test sclarAdd */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,257,public void testScalarAdd() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,258,FieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,259,"assertClose(""scalar add"", createSparseMatrix(testDataPlus2),"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,260,"m.scalarAdd(new Fraction(2)), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,263,/** test operate */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,264,public void testOperate() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,265,FieldMatrix<Fraction> m = createSparseMatrix(id);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,266,"assertClose(""identity operate"", testVector, m.operate(testVector),"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,267,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,268,"assertClose(""identity operate"", testVector, m.operate("
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,269,"new FieldVectorImpl<Fraction>(testVector)).getData(), entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,270,m = createSparseMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,271,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,272,m.operate(testVector);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,273,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,274,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,275,// ignored
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,279,/** test issue MATH-209 */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,280,public void testMath209() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,281,FieldMatrix<Fraction> a = createSparseMatrix(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,282,"{ new Fraction(1), new Fraction(2) }, { new Fraction(3), new Fraction(4) }, { new Fraction(5), new Fraction(6) } });"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,283,"Fraction[] b = a.operate(new Fraction[] { new Fraction(1), new Fraction(1) });"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,284,"assertEquals(a.getRowDimension(), b.length);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,285,"assertEquals(3.0, b[0].doubleValue(), 1.0e-12);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,286,"assertEquals(7.0, b[1].doubleValue(), 1.0e-12);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,287,"assertEquals(11.0, b[2].doubleValue(), 1.0e-12);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,290,/** test transpose */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,291,public void testTranspose() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,293,FieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,294,FieldMatrix<Fraction> mIT = new FieldLUDecompositionImpl<Fraction>(m).getSolver().getInverse().transpose();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,295,FieldMatrix<Fraction> mTI = new FieldLUDecompositionImpl<Fraction>(m.transpose()).getSolver().getInverse();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,296,"assertClose(""inverse-transpose"", mIT, mTI, normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,297,m = createSparseMatrix(testData2);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,298,FieldMatrix<Fraction> mt = createSparseMatrix(testData2T);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,299,"assertClose(""transpose"",mt,m.transpose(),normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,302,/** test preMultiply by vector */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,303,public void testPremultiplyVector() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,304,FieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,305,"assertClose(""premultiply"", m.preMultiply(testVector), preMultTest,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,306,normTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,307,"assertClose(""premultiply"", m.preMultiply("
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,308,"new FieldVectorImpl<Fraction>(testVector).getData()), preMultTest, normTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,309,m = createSparseMatrix(bigSingular);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,310,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,311,m.preMultiply(testVector);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,312,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,313,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,314,// ignored
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,318,public void testPremultiply() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,319,FieldMatrix<Fraction> m3 = createSparseMatrix(d3);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,320,FieldMatrix<Fraction> m4 = createSparseMatrix(d4);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,321,FieldMatrix<Fraction> m5 = createSparseMatrix(d5);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,322,"assertClose(""m3*m4=m5"", m4.preMultiply(m3), m5, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,324,SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,325,SparseFieldMatrix<Fraction> mInv = createSparseMatrix(testDataInv);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,326,SparseFieldMatrix<Fraction> identity = createSparseMatrix(id);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,327,"assertClose(""inverse multiply"", m.preMultiply(mInv), identity,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,328,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,329,"assertClose(""inverse multiply"", mInv.preMultiply(m), identity,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,330,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,331,"assertClose(""identity multiply"", m.preMultiply(identity), m,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,332,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,333,"assertClose(""identity multiply"", identity.preMultiply(mInv), mInv,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,334,entryTolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,335,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,336,m.preMultiply(createSparseMatrix(bigSingular));
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,337,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,338,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,339,// ignored
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,343,public void testGetVectors() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,344,FieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,345,"assertClose(""get row"", m.getRow(0), testDataRow1, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,346,"assertClose(""get col"", m.getColumn(2), testDataCol3, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,347,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,348,m.getRow(10);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,349,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,350,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,351,// ignored
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,353,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,354,m.getColumn(-1);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,355,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,356,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,357,// ignored
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,361,public void testGetEntry() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,362,FieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,363,"assertEquals(""get entry"", m.getEntry(0, 1).doubleValue(), 2d, entryTolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,364,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,365,"m.getEntry(10, 4);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,366,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,367,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,368,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,372,/** test examples in user guide */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,373,public void testExamples() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,374,// Create a real matrix with two rows and three columns
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,375,"Fraction[][] matrixData = { { new Fraction(1), new Fraction(2), new Fraction(3) }, { new Fraction(2), new Fraction(5), new Fraction(3) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,376,FieldMatrix<Fraction> m = createSparseMatrix(matrixData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,377,"// One more with three rows, two columns"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,378,"Fraction[][] matrixData2 = { { new Fraction(1), new Fraction(2) }, { new Fraction(2), new Fraction(5) }, { new Fraction(1), new Fraction(7) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,379,FieldMatrix<Fraction> n = createSparseMatrix(matrixData2);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,380,// Now multiply m by n
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,381,FieldMatrix<Fraction> p = m.multiply(n);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,382,"assertEquals(2, p.getRowDimension());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,383,"assertEquals(2, p.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,384,// Invert p
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,385,FieldMatrix<Fraction> pInverse = new FieldLUDecompositionImpl<Fraction>(p).getSolver().getInverse();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,386,"assertEquals(2, pInverse.getRowDimension());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,387,"assertEquals(2, pInverse.getColumnDimension());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,389,// Solve example
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,390,"Fraction[][] coefficientsData = { { new Fraction(2), new Fraction(3), new Fraction(-2) }, { new Fraction(-1), new Fraction(7), new Fraction(6) },"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,391,"{ new Fraction(4), new Fraction(-3), new Fraction(-5) } };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,392,FieldMatrix<Fraction> coefficients = createSparseMatrix(coefficientsData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,393,"Fraction[] constants = { new Fraction(1), new Fraction(-2), new Fraction(1) };"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,394,Fraction[] solution = new FieldLUDecompositionImpl<Fraction>(coefficients).getSolver().solve(constants);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,395,"assertEquals((new Fraction(2).multiply((solution[0])).add(new Fraction(3).multiply(solution[1])).subtract(new Fraction(2).multiply(solution[2]))).doubleValue(),"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,396,"constants[0].doubleValue(), 1E-12);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,397,"assertEquals(((new Fraction(-1).multiply(solution[0])).add(new Fraction(7).multiply(solution[1])).add(new Fraction(6).multiply(solution[2]))).doubleValue(),"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,398,"constants[1].doubleValue(), 1E-12);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,399,"assertEquals(((new Fraction(4).multiply(solution[0])).subtract(new Fraction(3).multiply( solution[1])).subtract(new Fraction(5).multiply(solution[2]))).doubleValue(),"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,400,"constants[2].doubleValue(), 1E-12);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,404,// test submatrix accessors
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,405,public void testSubMatrix() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,406,FieldMatrix<Fraction> m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,407,FieldMatrix<Fraction> mRows23Cols00 = createSparseMatrix(subRows23Cols00);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,408,FieldMatrix<Fraction> mRows00Cols33 = createSparseMatrix(subRows00Cols33);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,409,FieldMatrix<Fraction> mRows01Cols23 = createSparseMatrix(subRows01Cols23);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,410,FieldMatrix<Fraction> mRows02Cols13 = createSparseMatrix(subRows02Cols13);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,411,FieldMatrix<Fraction> mRows03Cols12 = createSparseMatrix(subRows03Cols12);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,412,FieldMatrix<Fraction> mRows03Cols123 = createSparseMatrix(subRows03Cols123);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,413,FieldMatrix<Fraction> mRows20Cols123 = createSparseMatrix(subRows20Cols123);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,414,FieldMatrix<Fraction> mRows31Cols31 = createSparseMatrix(subRows31Cols31);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,415,"assertEquals(""Rows23Cols00"", mRows23Cols00, m.getSubMatrix(2, 3, 0, 0));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,416,"assertEquals(""Rows00Cols33"", mRows00Cols33, m.getSubMatrix(0, 0, 3, 3));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,417,"assertEquals(""Rows01Cols23"", mRows01Cols23, m.getSubMatrix(0, 1, 2, 3));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,418,"assertEquals(""Rows02Cols13"", mRows02Cols13,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,419,"m.getSubMatrix(new int[] { 0, 2 }, new int[] { 1, 3 }));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,420,"assertEquals(""Rows03Cols12"", mRows03Cols12,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,421,"m.getSubMatrix(new int[] { 0, 3 }, new int[] { 1, 2 }));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,422,"assertEquals(""Rows03Cols123"", mRows03Cols123,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,423,"m.getSubMatrix(new int[] { 0, 3 }, new int[] { 1, 2, 3 }));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,424,"assertEquals(""Rows20Cols123"", mRows20Cols123,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,425,"m.getSubMatrix(new int[] { 2, 0 }, new int[] { 1, 2, 3 }));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,426,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,427,"m.getSubMatrix(new int[] { 3, 1 }, new int[] { 3, 1 }));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,428,"assertEquals(""Rows31Cols31"", mRows31Cols31,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,429,"m.getSubMatrix(new int[] { 3, 1 }, new int[] { 3, 1 }));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,431,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,432,"m.getSubMatrix(1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,433,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,434,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,435,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,437,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,438,"m.getSubMatrix(-1, 1, 2, 2);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,439,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,440,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,441,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,443,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,444,"m.getSubMatrix(1, 0, 2, 2);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,445,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,446,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,447,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,449,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,450,"m.getSubMatrix(1, 0, 2, 4);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,451,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,452,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,453,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,455,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,456,"m.getSubMatrix(new int[] {}, new int[] { 0 });"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,457,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,458,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,459,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,461,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,462,"m.getSubMatrix(new int[] { 0 }, new int[] { 4 });"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,463,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,464,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,465,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,469,public void testGetRowMatrix() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,470,FieldMatrix<Fraction> m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,471,FieldMatrix<Fraction> mRow0 = createSparseMatrix(subRow0);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,472,FieldMatrix<Fraction> mRow3 = createSparseMatrix(subRow3);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,473,"assertEquals(""Row0"", mRow0, m.getRowMatrix(0));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,474,"assertEquals(""Row3"", mRow3, m.getRowMatrix(3));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,475,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,476,m.getRowMatrix(-1);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,477,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,478,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,479,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,481,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,482,m.getRowMatrix(4);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,483,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,484,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,485,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,489,public void testGetColumnMatrix() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,490,FieldMatrix<Fraction> m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,491,FieldMatrix<Fraction> mColumn1 = createSparseMatrix(subColumn1);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,492,FieldMatrix<Fraction> mColumn3 = createSparseMatrix(subColumn3);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,493,"assertEquals(""Column1"", mColumn1, m.getColumnMatrix(1));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,494,"assertEquals(""Column3"", mColumn3, m.getColumnMatrix(3));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,495,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,496,m.getColumnMatrix(-1);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,497,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,498,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,499,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,501,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,502,m.getColumnMatrix(4);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,503,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,504,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,505,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,509,public void testGetRowVector() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,510,FieldMatrix<Fraction> m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,511,FieldVector<Fraction> mRow0 = new FieldVectorImpl<Fraction>(subRow0[0]);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,512,FieldVector<Fraction> mRow3 = new FieldVectorImpl<Fraction>(subRow3[0]);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,513,"assertEquals(""Row0"", mRow0, m.getRowVector(0));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,514,"assertEquals(""Row3"", mRow3, m.getRowVector(3));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,515,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,516,m.getRowVector(-1);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,517,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,518,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,519,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,521,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,522,m.getRowVector(4);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,523,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,524,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,525,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,529,public void testGetColumnVector() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,530,FieldMatrix<Fraction> m = createSparseMatrix(subTestData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,531,FieldVector<Fraction> mColumn1 = columnToVector(subColumn1);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,532,FieldVector<Fraction> mColumn3 = columnToVector(subColumn3);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,533,"assertEquals(""Column1"", mColumn1, m.getColumnVector(1));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,534,"assertEquals(""Column3"", mColumn3, m.getColumnVector(3));"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,535,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,536,m.getColumnVector(-1);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,537,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,538,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,539,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,541,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,542,m.getColumnVector(4);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,543,"fail(""Expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,544,} catch (MatrixIndexException ex) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,545,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,549,private FieldVector<Fraction> columnToVector(Fraction[][] column) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,550,Fraction[] data = new Fraction[column.length];
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,551,for (int i = 0; i < data.length; ++i) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,552,data[i] = column[i][0];
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,554,"return new FieldVectorImpl<Fraction>(data, false);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,557,public void testEqualsAndHashCode() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,558,SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,559,SparseFieldMatrix<Fraction> m1 = (SparseFieldMatrix<Fraction>) m.copy();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,560,SparseFieldMatrix<Fraction> mt = (SparseFieldMatrix<Fraction>) m.transpose();
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,561,assertTrue(m.hashCode() != mt.hashCode());
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,562,"assertEquals(m.hashCode(), m1.hashCode());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,563,"assertEquals(m, m);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,564,"assertEquals(m, m1);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,565,assertFalse(m.equals(null));
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,566,assertFalse(m.equals(mt));
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,567,assertFalse(m.equals(createSparseMatrix(bigSingular)));
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,570,/* Disable for now
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,571,public void testToString() {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,572,SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,573,"assertEquals(""SparseFieldMatrix<Fraction>{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"","
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,574,m.toString());
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,575,"m = new SparseFieldMatrix<Fraction>(field, 1, 1);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,576,"assertEquals(""SparseFieldMatrix<Fraction>{{0.0}}"", m.toString());"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,580,public void testSetSubMatrix() throws Exception {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,581,SparseFieldMatrix<Fraction> m = createSparseMatrix(testData);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,582,"m.setSubMatrix(detData2, 1, 1);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,583,FieldMatrix<Fraction> expected = createSparseMatrix(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,584,"{ new Fraction(1), new Fraction(2), new Fraction(3) }, { new Fraction(2), new Fraction(1), new Fraction(3) }, { new Fraction(1), new Fraction(2), new Fraction(4) } });"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,585,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,587,"m.setSubMatrix(detData2, 0, 0);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,588,expected = createSparseMatrix(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,589,"{ new Fraction(1), new Fraction(3), new Fraction(3) }, { new Fraction(2), new Fraction(4), new Fraction(3) }, { new Fraction(1), new Fraction(2), new Fraction(4) } });"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,590,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,592,"m.setSubMatrix(testDataPlus2, 0, 0);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,593,expected = createSparseMatrix(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,594,"{ new Fraction(3), new Fraction(4), new Fraction(5) }, { new Fraction(4), new Fraction(7), new Fraction(5) }, { new Fraction(3), new Fraction(2), new Fraction(10) } });"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,595,"assertEquals(expected, m);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,597,// javadoc example
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,598,SparseFieldMatrix<Fraction> matrix =
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,599,createSparseMatrix(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,600,"{ new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4) }, { new Fraction(5), new Fraction(6), new Fraction(7), new Fraction(8) }, { new Fraction(9), new Fraction(0), new Fraction(1), new Fraction(2) } });"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,601,"matrix.setSubMatrix(new Fraction[][] { { new Fraction(3), new Fraction(4) }, { new Fraction(5), new Fraction(6) } }, 1, 1);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,602,expected = createSparseMatrix(new Fraction[][] {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,603,"{ new Fraction(1), new Fraction(2), new Fraction(3), new Fraction(4) }, { new Fraction(5), new Fraction(3), new Fraction(4), new Fraction(8) }, { new Fraction(9), new Fraction(5), new Fraction(6), new Fraction(2) } });"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,604,"assertEquals(expected, matrix);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,606,// dimension overflow
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,607,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,608,"m.setSubMatrix(testData, 1, 1);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,609,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,610,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,611,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,613,// dimension underflow
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,614,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,615,"m.setSubMatrix(testData, -1, 1);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,616,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,617,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,618,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,620,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,621,"m.setSubMatrix(testData, 1, -1);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,622,"fail(""expecting MatrixIndexException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,623,} catch (MatrixIndexException e) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,624,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,627,// null
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,628,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,629,"m.setSubMatrix(null, 1, 1);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,630,"fail(""expecting NullPointerException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,631,} catch (NullPointerException e) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,632,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,634,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,635,"new SparseFieldMatrix<Fraction>(field, 0, 0);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,636,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,637,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,638,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,641,// ragged
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,642,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,643,"m.setSubMatrix(new Fraction[][] { { new Fraction(1) }, { new Fraction(2), new Fraction(3) } }, 0, 0);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,644,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,645,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,646,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,649,// empty
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,650,try {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,651,"m.setSubMatrix(new Fraction[][] { {} }, 0, 0);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,652,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,653,} catch (IllegalArgumentException e) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,654,// expected
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,659,// --------------- -----------------Protected methods
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,661,/** verifies that two matrices are close (1-norm) */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,662,"protected void assertClose(String msg, FieldMatrix<Fraction> m, FieldMatrix<Fraction> n,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,663,double tolerance) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,664,for(int i=0; i < m.getRowDimension(); i++){
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,665,for(int j=0; j < m.getColumnDimension(); j++){
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,666,"assertEquals(msg, m.getEntry(i,j).doubleValue(), n.getEntry(i,j).doubleValue(), tolerance);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,672,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,673,"protected void assertClose(String msg, Fraction[] m, Fraction[] n,"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,674,double tolerance) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,675,if (m.length != n.length) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,676,"fail(""vectors not same length"");"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,678,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,679,"assertEquals(msg + "" "" + i + "" elements differ"", m[i].doubleValue(), n[i].doubleValue(),"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,680,tolerance);
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,684,private SparseFieldMatrix<Fraction> createSparseMatrix(Fraction[][] data) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,685,"SparseFieldMatrix<Fraction> matrix = new SparseFieldMatrix<Fraction>(field, data.length, data[0].length);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,686,for (int row = 0; row < data.length; row++) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,687,for (int col = 0; col < data[row].length; col++) {
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,688,"matrix.setEntry(row, col, data[row][col]);"
True,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,src/test/org/apache/commons/math/linear/SparseFieldMatrixTest.java,691,return matrix;

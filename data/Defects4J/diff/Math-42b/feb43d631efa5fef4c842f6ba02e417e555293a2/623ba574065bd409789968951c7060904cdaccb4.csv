is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,104,PolyX[j] = xFitter.fit();
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,102,yPolyX[j] = new PolynomialFunction(xFitter.fit());
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,126,PolyY[i] = yFitter.fit();
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,124,xPolyY[i] = new PolynomialFunction(yFitter.fit());
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,26,import org.apache.commons.math.analysis.ParametricUnivariateRealFunction;
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,127,or (int j = n -2; j >=0; j--) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,128,for (int j = n - 2; j >= 0; j--) {
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,284,/         s.append(Double.toString(coefficients[0])); XXX
False,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,304,/             s.append(Double.toString(absAi)); XXX
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,360,* Dedicated parametric polynomial class.
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,362,public static class Parametric implements ParametricUnivariateRealFunction {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,363,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,364,"public double[] gradient(double x, double[] parameters) {"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,365,final double[] gradient = new double[parameters.length];
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,366,double xn = 1.0;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,367,for (int i = 0; i < parameters.length; ++i) {
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,368,gradient[i] = xn;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,369,xn *= x;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,371,return gradient;
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,374,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,375,"public double value(final double x, final double[] parameters) {"
True,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,src/main/java/org/apache/commons/math/analysis/polynomials/PolynomialFunction.java,376,"return PolynomialFunction.evaluate(parameters, x);"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,21,mport org.apache.commons.math.analysis.ParametricUnivariateRealFunction;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,32,ublic class PolynomialFitter {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,33,** Fitter for the coefficients. */
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,34,rivate final CurveFitter fitter;
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,31,public class PolynomialFitter extends CurveFitter {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,43, @param degree maximal degree of the polynomial
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,44, @param optimizer optimizer to use for the fitting
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,40,* @param degree Maximal degree of the polynomial.
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,41,* @param optimizer Optimizer to use for the fitting.
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,47,his.fitter = new CurveFitter(optimizer);
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,44,super(optimizer);
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,52," Add an observed weighted (x,y) point to the sample."
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,54, @param weight weight of the observed point in the fit
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,55, @param x abscissa of the point
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,56," @param y observed value of the point at x, after fitting we should"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,57, have P(x) as close as possible to this value
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,59,"ublic void addObservedPoint(double weight, double x, double y) {"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,60,"itter.addObservedPoint(weight, x, y);"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,64, Remove all observations.
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,65, @since 2.2
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,67,ublic void clearObservations() {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,68,itter.clearObservations();
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,74, @return polynomial function best fitting the observed points
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,51,* @return the coefficients of the polynomial that best fits the observed points.
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,78,ublic PolynomialFunction fit() {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,79,"eturn new PolynomialFunction(fitter.fit(new ParametricPolynomial(), new double[degree + 1]));"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,83, Dedicated parametric polynomial class.
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,85,rivate static class ParametricPolynomial implements ParametricUnivariateRealFunction {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,87,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,88,"ublic double[] gradient(double x, double[] parameters) {"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,89,inal double[] gradient = new double[parameters.length];
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,90,ouble xn = 1.0;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,91,or (int i = 0; i < parameters.length; ++i) {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,92,radient[i] = xn;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,93,n *= x;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,95,eturn gradient;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,98,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,99,"ublic double value(final double x, final double[] parameters) {"
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,100,ouble y = 0;
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,101,or (int i = parameters.length - 1; i >= 0; --i) {
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,102, = y * x + parameters[i];
False,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,104,eturn y;
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,55,public double[] fit() {
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,56,"return fit(new PolynomialFunction.Parametric(), new double[degree + 1]);"
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,30,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,47,olynomialFunction fitted = fitter.fit();
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,46,PolynomialFunction fitted = new PolynomialFunction(fitter.fit());
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,52,"ssertEquals(0.0, error, 1.0e-6);"
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,51,"Assert.assertEquals(0.0, error, 1.0e-6);"
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,73,olynomialFunction fitted = fitter.fit();
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,70,PolynomialFunction fitted = new PolynomialFunction(fitter.fit());
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,79,ssertTrue(FastMath.abs(error) < 0.1);
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,76,Assert.assertTrue(FastMath.abs(error) < 0.1);
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,82,ssertTrue(maxError > 0.01);
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,79,Assert.assertTrue(maxError > 0.01);
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,118,ssertTrue(solvable || (degree == 0));
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,115,Assert.assertTrue(solvable || (degree == 0));
False,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,120,ssertTrue((! solvable) && (degree > 0));
True,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/PolynomialFitterTest.java,117,Assert.assertTrue((! solvable) && (degree > 0));

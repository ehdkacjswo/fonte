is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,298, = 0;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,298,final int last = observations.length - 1;
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,302,inal double range = observations[observations.length - 1].getX() -
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,303,bservations[0].getX();
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,305,f (range == 0) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,301,final double xRange = observations[last].getX() - observations[0].getX();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,302,if (xRange == 0) {
False,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,308,mega = 2 * Math.PI / range;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,305,omega = 2 * Math.PI / xRange;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,307,double yMin = Double.POSITIVE_INFINITY;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,308,double yMax = Double.NEGATIVE_INFINITY;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,309,for (int i = 1; i < observations.length; ++i) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,310,final double y = observations[i].getY();
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,311,if (y < yMin) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,312,yMin = y;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,314,if (y > yMax) {
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,315,yMax = y;
True,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/HarmonicFitter.java,318,a = 0.5 * (yMax - yMin);
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,20,mport static org.junit.Assert.assertEquals;
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,21,mport static org.junit.Assert.assertTrue;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,24,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,25,import org.apache.commons.math.exception.ZeroException;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,30,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,33,@Test(expected=NumberIsTooSmallException.class)
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,34,public void testPreconditions1() {
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,35,HarmonicFitter fitter =
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,36,new HarmonicFitter(new LevenbergMarquardtOptimizer());
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,38,final double[] fitted = fitter.fit();
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,41,"// This test fails (throwing ""ConvergenceException"" instead)."
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,42,//     @Test(expected=ZeroException.class)
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,43,//     public void testPreconditions2() {
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,44,//         HarmonicFitter fitter =
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,45,//             new HarmonicFitter(new LevenbergMarquardtOptimizer());
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,47,//         final double x = 1.2;
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,48,"//         fitter.addObservedPoint(1, x, 1);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,49,"//         fitter.addObservedPoint(1, x, -1);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,50,"//         fitter.addObservedPoint(1, x, 0.5);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,51,"//         fitter.addObservedPoint(1, x, 0);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,53,//         final double[] fitted = fitter.fit();
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,47,"ssertEquals(a, fitted[0], 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,48,"ssertEquals(w, fitted[1], 1.0e-13);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,49,"ssertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1e-13);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,70,"Assert.assertEquals(a, fitted[0], 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,71,"Assert.assertEquals(w, fitted[1], 1.0e-13);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,72,"Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1e-13);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,54,ssertTrue(FastMath.abs(f.value(x) - ff.value(x)) < 1e-13);
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,77,Assert.assertTrue(FastMath.abs(f.value(x) - ff.value(x)) < 1e-13);
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,70,.value(x) + 0.01 * randomizer.nextGaussian());
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,93,f.value(x) + 0.01 * randomizer.nextGaussian());
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,74,"ssertEquals(a, fitted[0], 7.6e-4);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,75,"ssertEquals(w, fitted[1], 2.7e-3);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,76,"ssertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.3e-2);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,97,"Assert.assertEquals(a, fitted[0], 7.6e-4);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,98,"Assert.assertEquals(w, fitted[1], 2.7e-3);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,99,"Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.3e-2);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,102,@Test
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,103,public void testTinyVariationsData() {
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,104,Random randomizer = new Random(64925784252l);
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,106,HarmonicFitter fitter =
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,107,new HarmonicFitter(new LevenbergMarquardtOptimizer());
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,108,for (double x = 0.0; x < 10.0; x += 0.1) {
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,109,"fitter.addObservedPoint(1, x, 1e-7 * randomizer.nextGaussian());"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,112,final double[] fitted = fitter.fit();
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,113,"// This test serves to cover the part of the code of ""guessAOmega"""
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,114,// when the algorithm using integrals fails.
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,92,.value(x) + 0.01 * randomizer.nextGaussian());
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,129,f.value(x) + 0.01 * randomizer.nextGaussian());
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,96,"ssertEquals(a, fitted[0], 1.2e-3);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,97,"ssertEquals(w, fitted[1], 3.3e-3);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,98,"ssertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.7e-2);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,133,"Assert.assertEquals(a, fitted[0], 1.2e-3);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,134,"Assert.assertEquals(w, fitted[1], 3.3e-3);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,135,"Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.7e-2);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,139,"ssertEquals(a, fitted[0], 7.6e-4);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,140,"ssertEquals(w, fitted[1], 3.5e-3);"
False,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,141,"ssertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,176,"Assert.assertEquals(a, fitted[0], 7.6e-4);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,177,"Assert.assertEquals(w, fitted[1], 3.5e-3);"
True,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,src/test/java/org/apache/commons/math/optimization/fitting/HarmonicFitterTest.java,178,"Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);"

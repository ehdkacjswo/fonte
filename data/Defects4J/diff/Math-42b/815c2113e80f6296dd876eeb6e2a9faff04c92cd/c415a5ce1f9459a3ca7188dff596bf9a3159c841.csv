is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,2, Copyright 2004 The Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,14, limitations under the License.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,17,ackage org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,20, Normal (Gauss) Distribution.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,21, Instances of NormalDistribution objects should be created using
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,22," {@link DistributionFactory#createNormalDistribution(double, double)}.<p>"
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,24, <p>
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,25, References:<p>
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,26, <ul>
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,27," <li><a href=""http://mathworld.wolfram.com/NormalDistribution.html"">"
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,28, Normal Distribution</a></li>
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,29, </ul>
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,30, </p>
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,32, @version $Revision: 1.5 $ $Date: 2004/04/27 04:37:58 $
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,34,ublic interface NormalDistribution extends ContinuousDistribution {
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,36, Access the mean.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,37, @return mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,39,ouble getMean();
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,41, Modify the mean.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,42, @param mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,44,oid setMean(double mean);
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,46, Access the standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,47, @return standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,49,ouble getStandardDeviation();
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,51, Modify the standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,52, @param sd standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,54,oid setStandardDeviation(double sd);
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,57, Access algorithm used to calculate cumulative probability
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,58, @return cdfAlgorithm the value of cumulative probability
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,60,ublic NormalCDFAlgorithm getCdfAlgorithm();
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,63, Modify the algorithm used to calculate cumulative probability
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,64, @param normalCDF the algorithm used to calculate cumulative probability
False,src/java/org/apache/commons/math/distribution/NormalDistribution.java,src/java/org/apache/commons/math/distribution/NormalDistribution.java,66,ublic void setCdfAlgorithm(NormalCDFAlgorithm normalCDF);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,2, Copyright 2004 The Apache Software Foundation.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,5, you may not use this file except in compliance with the License.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,6, You may obtain a copy of the License at
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,13, See the License for the specific language governing permissions and
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,14, limitations under the License.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,17,ackage org.apache.commons.math.distribution;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,22, Default implementation of
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,23, {@link org.apache.commons.math.distribution.NormalDistribution}.<p>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,24, You can choose the algorithm used to calculate cumulative probability
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,25, using method {@link #setCdfAlgorithm}. The deafault is the Cody algorithm
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,26, {@link org.apache.commons.math.distribution.NormalCDFPreciseAlgorithm}
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,28, @version $Revision: 1.6 $ $Date: 2004/04/27 16:42:34 $
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,30,ublic class NormalDistributionImpl extends AbstractContinuousDistribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,31,"mplements NormalDistribution, Serializable {"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,33,** The mean of this distribution. */
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,34,rivate double mean = 0;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,36,** The standard deviation of this distribution. */
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,37,rivate double standardDeviation = 1;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,39,** The algorithm used to compute cumulative probabilities. */
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,40,rivate NormalCDFAlgorithm cdfAlgorithm = new NormalCDFPreciseAlgorithm();
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,43, Create a normal distribution using the given mean and standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,44, @param mean mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,45, @param sd standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,47,"ublic NormalDistributionImpl(double mean, double sd){"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,48,uper();
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,49,etMean(mean);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,50,etStandardDeviation(sd);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,53, Creates normal distribution with the mean equal to zero and standard
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,54, deviation equal to one.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,56,ublic NormalDistributionImpl(){
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,57,"his(0.0, 1.0);"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,60, Access the mean.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,61, @return mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,63,ublic double getMean() {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,64,eturn mean;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,67, Modify the mean.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,68, @param mean for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,70,ublic void setMean(double mean) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,71,his.mean = mean;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,75, Access the standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,76, @return standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,78,ublic double getStandardDeviation() {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,79,eturn standardDeviation;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,83, Modify the standard deviation.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,84, @param sd standard deviation for this distribution
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,86,ublic void setStandardDeviation(double sd) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,87,f (sd <= 0.0) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,88,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,89,"Standard deviation must be positive."");"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,91,tandardDeviation = sd;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,95," For this disbution, X, this method returns P(X &lt; <code>x</code>)."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,96, @param x the value at which the CDF is evaluated.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,97, @return CDF evaluted at <code>x</code>.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,99,ublic double cumulativeProbability(double x) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,100,ouble z = (x - mean) / standardDeviation;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,101,eturn cdfAlgorithm.cdf(z);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,106," For this distribution, X, this method returns the critical point x, such"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,107, that P(X &lt; x) = <code>p</code>.<p>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,108, Provided implementation is adopted from
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,109," <a href=""http://www.r-project.org/"">R statistical package</a> function"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,110, <code>qnorm(...)</code>.<p>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,111, References:
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,112, <ul>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,113, <li>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,114,"  Beasley, J. D. and S. G. Springer (1977)."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,115,"  <a href=""http://lib.stat.cmu.edu/apstat/111"">"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,116,"	Algorithm AS 111: The percentage points of the normal distribution</a>,"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,117,"	Applied Statistics, 26, 118-121."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,118, </li>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,119, <li>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,120,"  Wichura, M.J. (1988)."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,121,"  <a href=""http://lib.stat.cmu.edu/apstat/241"">"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,122,  Algorithm AS 241: The Percentage Points of the Normal Distribution.</a>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,123,"  Applied Statistics, 37, 477-484."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,124, </li>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,125, </ul>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,127, @param p the desired probability
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,128," @return x, such that P(X &lt; x) = <code>p</code>"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,130,ublic double inverseCumulativeProbability(double p) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,131,f (p < 0.0 || p > 1.0) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,132,hrow new IllegalArgumentException(
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,133,"p must be between 0.0 and 1.0, inclusive."");"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,136,"ouble r, val;"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,137,ouble q = p - 0.5;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,139,f (Math.abs(q) <= .425) {/* 0.075 <= p <= 0.925 */
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,140, = 0.180625 - q*q;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,141,al =
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,142, * (((((((r * 2509.0809287301226727 +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,143,3430.575583588128105) * r + 67265.770927008700853) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,144,5921.953931549871457) * r + 13731.693765509461125) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,145,971.5909503065514427) * r + 133.14166789178437745) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,146,.387132872796366608) /
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,147,((((((r * 5226.495278852854561 +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,148,8729.085735721942674) * r + 39307.89580009271061) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,149,1213.794301586595867) * r + 5394.1960214247511077) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,150,87.1870074920579083) * r + 42.313330701600911252) * r + 1.);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,151," else { //closer than 0.075 from {0,1} boundary"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,152,f (q > 0) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,153, = 1 - p;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,154, else {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,155, = p;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,157, = Math.sqrt(- Math.log(r));
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,158,f (r <= 5.0) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,159, += -1.6;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,160,al = (((((((r * 7.7454501427834140764e-4 +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,161,.0227238449892691845833) * r + 0.24178072517745061177) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,162, + 1.27045825245236838258) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,163,.64784832476320460504) * r + 5.7694972214606914055) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,164, + 4.6303378461565452959) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,165,.42343711074968357734) /
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,166,((((((r *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,167,.05075007164441684324e-9 + 5.475938084995344946e-4) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,168, + 0.0151986665636164571966) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,169,.14810397642748007459) * r + 0.68976733498510000455) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,170, + 1.6763848301838038494) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,171,.05319162663775882187) * r + 1.0);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,172, else { //very close to  0 or 1
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,173, += -5.;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,174,al = (((((((r * 2.01033439929228813265e-7 +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,175,.71155556874348757815e-5) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,176,.0012426609473880784386) * r + 0.026532189526576123093) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,177, + 0.29656057182850489123) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,178,.7848265399172913358) * r + 5.4637849111641143699) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,179, + 6.6579046435011037772) /
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,180,((((((r *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,181,.04426310338993978564e-15 + 1.4215117583164458887e-7)*
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,182, + 1.8463183175100546818e-5) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,183,.868691311456132591e-4) * r + 0.0148753612908506148525) *
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,184, + 0.13692988092273580531) * r +
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,185,.59983220655588793769) * r + 1.0);
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,187,f(q < 0.0) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,188,al = -val;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,191,eturn mean + standardDeviation * val;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,196, Access algorithm used to calculate cumulative probability
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,197, @return cdfAlgorithm the value of cumulative probability
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,199,ublic NormalCDFAlgorithm getCdfAlgorithm() {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,200,eturn cdfAlgorithm;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,205, Modify the algorithm used to calculate cumulative probability
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,206, @param normalCDF the algorithm used to calculate cumulative probability
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,208,ublic void setCdfAlgorithm(NormalCDFAlgorithm normalCDF) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,209,dfAlgorithm = normalCDF;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,214," Access the domain value lower bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,215, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,216, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,218, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,219," @return domain value lower bound, i.e."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,220,         P(X &lt; <i>lower bound</i>) &lt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,222,rotected double getDomainLowerBound(double p) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,223,eturn -Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,227," Access the domain value upper bound, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,228, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,229, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,231, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,232," @return domain value upper bound, i.e."
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,233,         P(X &lt; <i>upper bound</i>) &gt; <code>p</code>
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,235,rotected double getDomainUpperBound(double p) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,236,eturn Double.MAX_VALUE;
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,240," Access the initial domain value, based on <code>p</code>, used to"
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,241, bracket a CDF root.  This method is used by
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,242, {@link #inverseCumulativeProbability(double)} to find critical values.
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,244, @param p the desired probability for the critical value
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,245, @return initial domain value
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,247,rotected double getInitialDomain(double p) {
False,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java,248,eturn 0.0;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,2, Copyright 2004 The Apache Software Foundation.
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,4," Licensed under the Apache License, Version 2.0 (the ""License"");"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,5, you may not use this file except in compliance with the License.
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,6, You may obtain a copy of the License at
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,8,      http://www.apache.org/licenses/LICENSE-2.0
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,10," Unless required by applicable law or agreed to in writing, software"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,11," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,12," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,13, See the License for the specific language governing permissions and
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,14, limitations under the License.
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,17,ackage org.apache.commons.math.distribution;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,19,mport org.apache.commons.math.MathException;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,21,mport junit.framework.TestCase;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,24,  Tests for NormalDistribution implementation
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,26," ""True"" results are taken from R - the same as in Mathematica"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,29,ublic class NormalDistributionTest extends TestCase {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,31,rivate NormalDistribution z;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,32,rivate static final double PRECISION = 10e-6;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,33,rivate static final double M = 2.1;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,34,rivate static final double SD = 1.4;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,37, Constructor for NormalDistributionTest.
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,38, @param arg0
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,40,ublic NormalDistributionTest(String arg0) {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,41,uper(arg0);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,44,ublic static void main(String[] args) {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,45,unit.swingui.TestRunner.run(NormalDistributionTest.class);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,48,rotected void setUp() throws Exception {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,49,uper.setUp();
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,50," = DistributionFactory.newInstance().createNormalDistribution(M, SD);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,53,rotected void tearDown() throws Exception {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,54,uper.tearDown();
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,55, = null;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,58,ublic void testCumulativeProbabilitydoubleM_MINUS_2SD() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,59,"estProbability(M - 2*SD, 0.02275013);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,62,ublic void testCumulativeProbabilitydoubleM_MINUS_SD() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,63,"estProbability(M - SD, 0.1586553);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,66,ublic void testCumulativeProbabilitydoubleM() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,67,"estProbability(M, 0.5);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,70,ublic void testCumulativeProbabilitydoubleM_PLUS_SD() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,71,"estProbability(M + SD, 0.8413447);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,74,ublic void testCumulativeProbabilitydoubleM_PLUS_2SD() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,75,"estProbability(M + 2*SD, 0.9772499);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,78,ublic void testCumulativeProbabilitydoubleM_PLUS_3SD() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,79,"estProbability(M + 3*SD, 0.9986501);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,82,ublic void testCumulativeProbabilitydoubleM_PLUS_4SD() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,83,"estProbability(M + 4*SD, 0.9999683);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,86,ublic void testCumulativeProbabilitydoubleM_PLUS_5SD() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,87,"estProbability(M + 5*SD, 0.9999997);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,90,ublic void testInverseCumulativeProbability0() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,91,"ssertEquals(Double.isNaN(z.inverseCumulativeProbability(0.0)), true);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,94,ublic void testInverseCumulativeProbability001() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,95,"estValue(-2.226325, .001);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,98,ublic void testInverseCumulativeProbability010() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,99,"estValue(-1.156887, .010);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,102,ublic void testInverseCumulativeProbability025() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,103,"estValue(-0.6439496, .025);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,106,ublic void testInverseCumulativeProbability050() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,107,"estValue(-0.2027951, .050);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,110,ublic void testInverseCumulativeProbability100() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,111,"estValue(0.3058278, .100);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,114,ublic void testInverseCumulativeProbability900() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,115,"estValue(3.894172, .900);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,118,ublic void testInverseCumulativeProbability950() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,119,"estValue(4.402795, .950);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,122,ublic void testInverseCumulativeProbability975() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,123,"estValue(4.84395, .975);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,126,ublic void testInverseCumulativeProbability990() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,127,"estValue(5.356887, .990);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,130,ublic void testInverseCumulativeProbability999() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,131,"estValue(6.426325, .999);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,134,ublic void testInverseCumulativeProbability1() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,135,"ssertEquals(Double.isNaN(z.inverseCumulativeProbability(1.0)), true);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,138,ublic void testGetMean() {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,139,"ssertEquals(M, z.getMean(), 0);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,142,ublic void testSetMean() throws MathException {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,143,ouble mu = Math.random();
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,144,.setMean(mu);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,145,"ssertEquals(mu, z.getMean(), 0);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,146,"ssertEquals(0.5d, z.cumulativeProbability(mu), PRECISION);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,149,ublic void testGetStandardDeviation() {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,150,"ssertEquals(SD, z.getStandardDeviation(), 0);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,153,ublic void testSetStandardDeviation() throws MathException{
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,154,ouble sigma = 0.1d + Math.random();
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,155,.setStandardDeviation(sigma);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,156,"ssertEquals(sigma, z.getStandardDeviation(), 0);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,157,"ssertEquals(0.84134475, z.cumulativeProbability(z.getMean() + z.getStandardDeviation()), PRECISION );"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,160,ublic void testGetCdfAlgorithm() {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,161,ssertTrue(z.getCdfAlgorithm() != null);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,164,ublic void testSetCdfAlgorithm() {
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,165,.setCdfAlgorithm(new NormalCDFFastAlgorithm());
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,166,ssertTrue(z.getCdfAlgorithm() instanceof NormalCDFFastAlgorithm);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,169,"rivate void testProbability(double x, double expected) throws MathException {"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,170,ouble actual = Double.NaN;
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,171,.setCdfAlgorithm(new NormalCDFPreciseAlgorithm());
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,172,ctual =  z.cumulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,173,"ssertEquals(expected, actual, PRECISION);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,174,.setCdfAlgorithm(new NormalCDFFastAlgorithm());
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,175,ctual =  z.cumulativeProbability(x);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,176,"ssertEquals(expected, actual, PRECISION);"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,179,"rivate void testValue(double expected, double p) throws MathException {"
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,180,ouble actual = z.inverseCumulativeProbability(p);
False,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,181,"ssertEquals(expected, actual, PRECISION);"

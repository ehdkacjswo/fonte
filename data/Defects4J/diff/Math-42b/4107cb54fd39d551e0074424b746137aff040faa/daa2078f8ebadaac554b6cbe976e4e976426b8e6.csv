is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,4,* this work for additional information regarding copyright ownership.
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,7,* the License.  You may obtain a copy of the License at
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,14,* See the License for the specific language governing permissions and
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,15,* limitations under the License.
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,18,package org.apache.commons.math.stat.correlation;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,20,import org.apache.commons.math.MathRuntimeException;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,21,import org.apache.commons.math.linear.DenseRealMatrix;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,22,import org.apache.commons.math.linear.RealMatrix;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,23,import org.apache.commons.math.stat.ranking.NaturalRanking;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,24,import org.apache.commons.math.stat.ranking.RankingAlgorithm;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,27,* <p>Spearman's rank correlation. This implementation performs a rank
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,28,* transformation on the input data and then computes {@link PearsonsCorrelation}
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,29,* on the ranked data.</p>
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,31,"* <p>By default, ranks are computed using {@link NaturalRanking} with default"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,32,"* strategies for handling NaNs and ties in the data (NaNs maximal, ties averaged)."
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,33,* The ranking algorithm can be set using a constructor argument.</p>
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,35,* @since 2.0
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,36,* @version $Revision:$ $Date:$
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,39,public class SpearmansCorrelation {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,41,/** Input data */
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,42,private final RealMatrix data;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,44,/** Ranking algorithm  */
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,45,private final RankingAlgorithm rankingAlgorithm;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,47,/** Rank correlation */
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,48,private final PearsonsCorrelation rankCorrelation;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,51,* Create a SpearmansCorrelation with the given input data matrix
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,52,* and ranking algorithm.
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,54,* @param dataMatrix matrix of data with columns representing
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,55,* variables to correlate
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,56,* @param rankingAlgorithm ranking algorithm
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,58,"public SpearmansCorrelation(final RealMatrix dataMatrix, final RankingAlgorithm rankingAlgorithm) {"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,59,this.data = dataMatrix.copy();
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,60,this.rankingAlgorithm = rankingAlgorithm;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,61,rankTransform(data);
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,62,rankCorrelation = new PearsonsCorrelation(data);
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,66,* Create a SpearmansCorrelation from the given data matrix.
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,68,* @param dataMatrix matrix of data with columns representing
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,69,* variables to correlate
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,71,public SpearmansCorrelation(final RealMatrix dataMatrix) {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,72,"this(dataMatrix, new NaturalRanking());"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,76,* Create a SpearmansCorrelation without data.
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,78,public SpearmansCorrelation() {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,79,data = null;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,80,this.rankingAlgorithm = new NaturalRanking();
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,81,rankCorrelation = null;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,85,* Calculate the Spearman Rank Correlation Matrix.
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,87,* @return Spearman Rank Correlation Matrix
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,89,public RealMatrix getCorrelationMatrix() {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,90,return rankCorrelation.getCorrelationMatrix();
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,94,* Returns a {@link PearsonsCorrelation} instance constructed from the
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,95,"* ranked input data. That is,"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,96,* <code>new SpearmansCorrelation(matrix).getRankCorrelation()</code>
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,97,* is equivalent to
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,98,* <code>new PearsonsCorrelation(rankTransform(matrix))</code> where
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,99,* <code>rankTransform(matrix)</code> is the result of applying the
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,100,* configured <code>RankingAlgorithm</code> to each of the columns of
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,101,* <code>matrix.</code>
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,103,* @return PearsonsCorrelation among ranked column data
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,105,public PearsonsCorrelation getRankCorrelation() {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,106,return rankCorrelation;
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,110,* Computes the Spearman's rank correlation matrix for the columns of the
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,111,* input matrix.
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,113,* @param matrix matrix with columns representing variables to correlate
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,114,* @return correlation matrix
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,116,public RealMatrix computeCorrelationMatrix(RealMatrix matrix) {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,117,RealMatrix matrixCopy = matrix.copy();
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,118,rankTransform(matrixCopy);
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,119,return new PearsonsCorrelation().computeCorrelationMatrix(matrixCopy);
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,123,* Computes the Spearman's rank correlation matrix for the columns of the
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,124,* input rectangular array.  The columns of the array represent values
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,125,* of variables to be correlated.
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,127,* @param data matrix with columns representing variables to correlate
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,128,* @return correlation matrix
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,130,public RealMatrix computeCorrelationMatrix(double[][] data) {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,131,return computeCorrelationMatrix(new DenseRealMatrix(data));
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,135,* Computes the Spearman's rank correlation coefficient between the two arrays.
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,137,* </p>Throws IllegalArgumentException if the arrays do not have the same length
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,138,* or their common length is less than 2</p>
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,140,* @param xArray first data array
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,141,* @param yArray second data array
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,142,* @return Returns Spearman's rank correlation coefficient for the two arrays
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,143,* @throws  IllegalArgumentException if the arrays lengths do not match or
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,144,* there is insufficient data
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,146,"public double correlation(final double[] xArray, final double[] yArray)"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,147,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,148,if (xArray.length == yArray.length && xArray.length > 1) {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,149,"return new PearsonsCorrelation().correlation(rankingAlgorithm.rank(xArray),"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,150,rankingAlgorithm.rank(yArray));
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,152,else {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,153,throw MathRuntimeException.createIllegalArgumentException(
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,154,"""invalid array dimensions. xArray has size {0}; yArray has {1} elements"","
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,155,"xArray.length, yArray.length);"
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,160,* Applies rank transform to each of the columns of <code>matrix</code>
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,161,* using the current <code>rankingAlgorithm</code>
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,163,* @param matrix matrix to transform
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,165,private void rankTransform(RealMatrix matrix) {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,166,for (int i = 0; i < matrix.getColumnDimension(); i++) {
True,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,src/java/org/apache/commons/math/stat/correlation/SpearmansCorrelation.java,167,"matrix.setColumn(i, rankingAlgorithm.rank(matrix.getColumn(i)));"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,14,* See the License for the specific language governing permissions and
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,15,* limitations under the License.
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,17,package org.apache.commons.math.stat.correlation;
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,19,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,20,import org.apache.commons.math.linear.DenseRealMatrix;
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,21,import org.apache.commons.math.linear.RealMatrix;
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,24,* Test cases for Spearman's rank correlation
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,26,* @since 2.0
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,27,* @version $Revision:$ $Date:$
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,29,public class SpearmansRankCorrelationTest extends PearsonsCorrelationTest {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,31,protected void setUp() throws Exception {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,32,super.setUp();
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,35,protected void tearDown() throws Exception {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,36,super.tearDown();
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,40,* Test Longley dataset against R.
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,42,public void testLongly() throws Exception {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,43,"RealMatrix matrix = createRealMatrix(longleyData, 16, 7);"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,44,SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,45,RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,46,double[] rData = new double[] {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,47,"1, 0.982352941176471, 0.985294117647059, 0.564705882352941, 0.2264705882352941, 0.976470588235294,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,48,"0.976470588235294, 0.982352941176471, 1, 0.997058823529412, 0.664705882352941, 0.2205882352941176,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,49,"0.997058823529412, 0.997058823529412, 0.985294117647059, 0.997058823529412, 1, 0.638235294117647,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,50,"0.2235294117647059, 0.9941176470588236, 0.9941176470588236, 0.564705882352941, 0.664705882352941,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,51,"0.638235294117647, 1, -0.3411764705882353, 0.685294117647059, 0.685294117647059, 0.2264705882352941,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,52,"0.2205882352941176, 0.2235294117647059, -0.3411764705882353, 1, 0.2264705882352941, 0.2264705882352941,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,53,"0.976470588235294, 0.997058823529412, 0.9941176470588236, 0.685294117647059, 0.2264705882352941, 1, 1,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,54,"0.976470588235294, 0.997058823529412, 0.9941176470588236, 0.685294117647059, 0.2264705882352941, 1, 1"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,56,"TestUtils.assertEquals(""Spearman's correlation matrix"", createRealMatrix(rData, 7, 7), correlationMatrix, 10E-15);"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,60,* Test R swiss fertility dataset.
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,62,public void testSwiss() throws Exception {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,63,"RealMatrix matrix = createRealMatrix(swissData, 47, 5);"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,64,SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,65,RealMatrix correlationMatrix = corrInstance.getCorrelationMatrix();
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,66,double[] rData = new double[] {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,67,"1, 0.2426642769364176, -0.660902996352354, -0.443257690360988, 0.4136455623012432,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,68,"0.2426642769364176, 1, -0.598859938748963, -0.650463814145816, 0.2886878090882852,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,69,"-0.660902996352354, -0.598859938748963, 1, 0.674603831406147, -0.4750575257171745,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,70,"-0.443257690360988, -0.650463814145816, 0.674603831406147, 1, -0.1444163088302244,"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,71,"0.4136455623012432, 0.2886878090882852, -0.4750575257171745, -0.1444163088302244, 1"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,73,"TestUtils.assertEquals(""Spearman's correlation matrix"", createRealMatrix(rData, 5, 5), correlationMatrix, 10E-15);"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,77,* Constant column
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,79,public void testConstant() {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,80,"double[] noVariance = new double[] {1, 1, 1, 1};"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,81,"double[] values = new double[] {1, 2, 3, 4};"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,82,"assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance, values)));"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,86,* Insufficient data
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,88,public void testInsufficientData() {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,89,double[] one = new double[] {1};
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,90,double[] two = new double[] {2};
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,91,try {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,92,"new SpearmansCorrelation().correlation(one, two);"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,93,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,94,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,95,// Expected
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,97,"RealMatrix matrix = new DenseRealMatrix(new double[][] {{0},{1}});"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,98,try {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,99,new SpearmansCorrelation(matrix);
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,100,"fail(""Expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,101,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,102,// Expected
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,106,public void testConsistency() {
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,107,"RealMatrix matrix = createRealMatrix(longleyData, 16, 7);"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,108,SpearmansCorrelation corrInstance = new SpearmansCorrelation(matrix);
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,109,double[][] data = matrix.getData();
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,110,double[] x = matrix.getColumn(0);
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,111,double[] y = matrix.getColumn(1);
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,112,"assertEquals(new SpearmansCorrelation().correlation(x, y),"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,113,"corrInstance.getCorrelationMatrix().getEntry(0, 1), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,114,"TestUtils.assertEquals(""Correlation matrix"", corrInstance.getCorrelationMatrix(),"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,115,"new SpearmansCorrelation().computeCorrelationMatrix(data), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,118,// Not relevant here
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,119,public void testStdErrorConsistency() throws Exception {}
True,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,src/test/org/apache/commons/math/stat/correlation/SpearmansRankCorrelationTest.java,120,public void testCovarianceConsistency() throws Exception {}

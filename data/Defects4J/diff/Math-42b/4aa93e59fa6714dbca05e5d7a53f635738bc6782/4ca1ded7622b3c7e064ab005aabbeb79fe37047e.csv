is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,318,"NKNOWN_ADDITIONAL_EQUATION(""unknown additional equation""),"
False,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,320,"NMATCHED_ODE_IN_EXTENDED_SET(""ode does not match the main ode set in the extended set""),"
True,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java,319,"UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,50,ublic abstract class AbstractIntegrator implements ExpandableFirstOrderIntegrator {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,50,public abstract class AbstractIntegrator implements FirstOrderIntegrator {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,80,rivate transient ExpandableFirstOrderDifferentialEquations equations;
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,80,private transient ExpandableStatefulODE equations;
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,188,** Set the differential equations.
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,189, @param equations differential equations to integrate
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,190," @see #computeDerivatives(double, double[], double[])"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,188,/** Set the equations.
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,189,* @param equations equations to set
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,192,rotected void setEquations(final ExpandableFirstOrderDifferentialEquations equations) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,191,protected void setEquations(final ExpandableStatefulODE equations) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,197,"ublic double integrate(FirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,198,"ouble t0, double[] y0, double t, double[] y)"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,196,"public double integrate(final FirstOrderDifferentialEquations equations,"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,197,"final double t0, final double[] y0, final double t, final double[] y)"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,200,"eturn integrate(new ExpandableFirstOrderDifferentialEquations(equations), t0, y0, t, y);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,200,if (y0.length != equations.getDimension()) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,201,"throw new DimensionMismatchException(y0.length, equations.getDimension());"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,203,if (y.length != equations.getDimension()) {
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,204,"throw new DimensionMismatchException(y.length, equations.getDimension());"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,207,// prepare expandable stateful equations
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,208,final ExpandableStatefulODE expandable = new ExpandableStatefulODE(equations);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,209,expandable.setTime(t0);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,210,expandable.setPrimaryState(y0);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,212,// perform integration
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,213,"integrate(expandable, t);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,215,// extract results back from the stateful equations
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,216,"System.arraycopy(expandable.getPrimaryState(), 0, y, 0, y.length);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,217,return expandable.getTime();
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,221,/** Integrate a set of differential equations up to the given time.
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,222,* <p>This method solves an Initial Value Problem (IVP).</p>
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,223,"* <p>The set of differential equations is composed of a main set, which"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,224,* can be extended by some sets of secondary equations. The set of
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,225,* equations must be already set up with initial time and partial states.
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,226,"* At integration completion, the final time and partial states will be"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,227,* available in the same object.</p>
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,228,* <p>Since this method stores some internal state variables made
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,229,* available in its public interface during integration ({@link
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,230,"* #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,231,* @param equations complete set of differential equations to integrate
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,232,* @param t target time for the integration
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,233,* (can be set to a value smaller than <code>t0</code> for backward integration)
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,234,* @throws MathIllegalStateException if the integrator cannot perform integration
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,235,* @throws MathIllegalArgumentException if integration parameters are wrong (typically
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,236,* too small integration span)
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,238,"public abstract void integrate(ExpandableStatefulODE equations, double t)"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,239,"throws MathIllegalStateException, MathIllegalArgumentException;"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,338,** Perform some sanity checks on the integration parameters.
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,339, @param ode differential equations set
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,340, @param t0 start time
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,341, @param y0 state vector at t0
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,376,/** Check the integration span.
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,343, @param y placeholder where to put the state vector
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,344, @exception DimensionMismatchException if some inconsistency is detected
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,347,"rotected void sanityChecks(final ExpandableFirstOrderDifferentialEquations ode,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,348,"inal double t0, final double[] y0,"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,349,"inal double t, final double[] y)"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,350,"hrows DimensionMismatchException, NumberIsTooSmallException {"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,352,f (ode.getMainSetDimension() != y0.length) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,353,"hrow new DimensionMismatchException(ode.getDimension(), y0.length);"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,356,f (ode.getMainSetDimension() != y.length) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,357,"hrow new DimensionMismatchException(ode.getDimension(), y.length);"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,380,"protected void sanityChecks(final ExpandableStatefulODE equations, final double t)"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,381,throws NumberIsTooSmallException {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,360,"f (FastMath.abs(t - t0) <= 1.0e-12 * FastMath.max(FastMath.abs(t0), FastMath.abs(t))) {"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,383,"final double threshold = 1000 * FastMath.ulp(FastMath.max(FastMath.abs(equations.getTime()),"
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,384,FastMath.abs(t)));
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,385,final double dt = FastMath.abs(equations.getTime() - t);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,386,if (dt <= threshold) {
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,362,"astMath.abs(t - t0),"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,363,".0e-12 * FastMath.max(FastMath.abs(t0), FastMath.abs(t)),"
False,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,364,alse);
True,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java,388,"dt, threshold, false);"
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,18,ackage org.apache.commons.math.ode;
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,22, This class is a container for additional state parameters and their associated
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,23, evolution equation.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,24, <p>
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,25, It is a container allowing the integrator to keep constant consistency between
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,26, additional states and the corresponding equations. It allows to set additional
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,27," state values, get current additional state value and derivatives by reference"
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,28, on the associated additional equations.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,29, </p>
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,31, @see ExpandableFirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,32, @see AdditionalEquations
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,34, @version $Id$
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,35, @since 3.0
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,37,lass AdditionalStateAndEquations {
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,39,** Additional equations set. */
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,40,rivate final AdditionalEquations addEquations;
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,42,** Current additional state. */
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,43,rivate double[] addState;
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,45,** Current additional state derivatives. */
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,46,rivate double[] addStateDot;
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,48,** Create a new instance based on one set of additional equations.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,49, @param addEqu additional equations.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,51,ublic AdditionalStateAndEquations(final AdditionalEquations addEqu) {
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,52,his.addEquations = addEqu;
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,55,** Get a reference to the current value of the additional state.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,56," <p>The array returned is a true reference to the state array, so it may be"
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,57, used to store data into it.</>
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,58, @return a reference current value of the additional state.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,60,ublic double[] getAdditionalState() {
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,61,eturn addState;
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,64,** Get a reference to the current value of the additional state derivatives.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,65," <p>The array returned is a true reference to the state array, so it may be"
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,66, used to store data into it.</>
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,67, @return a reference current value of the additional state derivatives.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,69,ublic double[] getAdditionalStateDot() {
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,70,eturn addStateDot;
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,73,** Get the instance of the current additional equations.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,74, @return current value of the additional equations.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,76,ublic AdditionalEquations getAdditionalEquations() {
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,77,eturn addEquations;
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,80,** Set a value to additional state.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,81, @param state additional state value.
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,83,ublic void setAdditionalState(final double[] state) {
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,84,his.addState    = state.clone();
False,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,src/main/java/org/apache/commons/math/ode/AdditionalStateAndEquations.java,85,his.addStateDot = new double[state.length];
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,18,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,25,* Class mapping the part of a complete state or derivative that pertains
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,26,* to a specific differential equation.
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,27,* <p>
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,28,* Instances of this class are guaranteed to be immutable.
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,29,* </p>
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,30,* @see SecondaryEquations
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,31,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,32,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,34,public class EquationsMapper implements Serializable {
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,36,/** Serializable UID. */
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,37,private static final long serialVersionUID = 20110925L;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,39,/** Index of the first equation element in complete state arrays. */
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,40,final int firstIndex;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,42,/** Dimension of the secondary state parameters. */
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,43,final int dimension;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,45,/** simple constructor.
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,46,* @param firstIndex index of the first equation element in complete state arrays
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,47,* @param dimension dimension of the secondary state parameters
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,49,"public EquationsMapper(final int firstIndex, final int dimension) {"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,50,this.firstIndex = firstIndex;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,51,this.dimension  = dimension;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,54,/** Get the index of the first equation element in complete state arrays.
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,55,* @return index of the first equation element in complete state arrays
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,57,public int getFirstIndex() {
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,58,return firstIndex;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,61,/** Get the dimension of the secondary state parameters.
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,62,* @return dimension of the secondary state parameters
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,64,public int getDimension() {
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,65,return dimension;
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,68,/** Extract equation data from a complete state or derivative array.
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,69,* @param complete complete state or derivative array from which
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,70,* equation data should be retrieved
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,71,* @param equationData placeholder where to put equation data
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,72,* @throws DimensionMismatchException if the dimension of the equation data does not
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,73,* match the mapper dimension
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,75,"public void extractEquationData(double[] complete, double[] equationData)"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,76,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,77,if (equationData.length != dimension) {
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,78,"throw new DimensionMismatchException(equationData.length, dimension);"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,80,"System.arraycopy(complete, firstIndex, equationData, 0, dimension);"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,83,/** Insert equation data into a complete state or derivative array.
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,84,* @param equationData equation data to be inserted into the complete array
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,85,* @param complete placeholder where to put equation data (only the
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,86,* part corresponding to the equation will be overwritten)
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,87,* @throws DimensionMismatchException if the dimension of the equation data does not
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,88,* match the mapper dimension
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,90,"public void insertEquationData(double[] equationData, double[] complete)"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,91,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,92,if (equationData.length != dimension) {
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,93,"throw new DimensionMismatchException(equationData.length, dimension);"
True,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,src/main/java/org/apache/commons/math/ode/EquationsMapper.java,95,"System.arraycopy(equationData, 0, complete, firstIndex, dimension);"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,17,ackage org.apache.commons.math.ode;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,19,mport java.util.ArrayList;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,20,mport java.util.List;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,22,mport org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,23,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,27," This class represents a combined set of first order differential equations,"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,28, with at least a main set of equations expandable by some sets of additional
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,29, equations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,30, <p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,31, This class extends the {@link FirstOrderDifferentialEquations}. It allows to
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,32, identify which part of a complete set of differential equations correspond to
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,33, the main set and which part correspond to the expansion sets.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,34, </p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,35, <p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,36, One typical use case is the computation of the jacobian matrix for some ODE.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,37," The main set of equations corresponds to the raw ODE, and we add to this set"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,38, another bunch of equations which represent the jacobian matrix of the main
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,39," set. In that case, we want the integrator to use <em>only</em> the main set"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,40, to estimate the errors and hence the step sizes. It should <em>not</em> use
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,41, the additional equations in this computation.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,42, The {@link ExpandableFirstOrderIntegrator integrator} will be able to know
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,43, where the main set ends and so where the expansion sets begin.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,44, </p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,45, <p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,46, We consider that the main set always corresponds to the first equations and
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,47, the expansion sets to the last equations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,48, </p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,50, @see FirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,51, @see JacobianMatrices
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,53, @version $Id$
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,54, @since 3.0
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,57,ublic class ExpandableFirstOrderDifferentialEquations implements FirstOrderDifferentialEquations {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,59,** Main set of differential equations. */
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,60,rivate final FirstOrderDifferentialEquations mainSet;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,62,** Additional sets of equations and associated states. */
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,63,rivate final List<AdditionalStateAndEquations> addedSets;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,65,** Create a new instance of ExpandableFirstOrderDifferentialEquations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,66, @param fode the main set of differential equations to be integrated.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,68,ublic ExpandableFirstOrderDifferentialEquations(final FirstOrderDifferentialEquations fode) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,69,his.mainSet   = fode;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,70,his.addedSets = new ArrayList<AdditionalStateAndEquations>();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,73,** Return the dimension of the whole state vector.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,74, <p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,75, The whole state vector results in the assembly of the main set of
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,76," equations and, if there are some, the added sets of equations."
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,77, </p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,78, @return dimension of the whole state vector
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,80,ublic int getDimension()
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,81,hrows MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,82,nt dimension = this.getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,83,ry {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,84,or (AdditionalStateAndEquations stateAndEqu : addedSets) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,85,imension += stateAndEqu.getAdditionalEquations().getDimension();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,87,eturn dimension;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,88, catch (Exception e) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,89,"/ TODO we should not catch Exception, and we should identify the offending additional equation"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,90,hrow new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,94,** Return the dimension of the main set of equations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,95, <p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,96, The main set of equations represents the first part of an ODE state.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,97, The error estimations and adaptive step size computation should be
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,98," done on this first part only, not on the final part of the state"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,99, which represents expansion sets of equations considered as secondary.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,100, </p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,101," @return dimension of the main set of equations, must be lesser than or"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,102, equal to the {@link #getDimension() total dimension}
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,104,ublic int getMainSetDimension() {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,105,eturn mainSet.getDimension();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,108,** Return the cumulated dimension of all added sets of equations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,109, @return dimension of all added sets of equations
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,110, @throws IllegalArgumentException if some additional equation is unknown
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,112,ublic int getAddedSetsDimension()
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,113,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,114,nt addDim = 0;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,115,ry {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,116,or (AdditionalStateAndEquations stateAndEqu : addedSets) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,117,ddDim += stateAndEqu.getAdditionalEquations().getDimension();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,119,eturn addDim;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,120, catch (Exception e) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,121,"/ TODO we should not catch Exception, and we should identify the offending additional equation"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,122,hrow new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,126,** Return the dimension of one added set of equations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,127, @param  addEqu Additional equations used as a reference for selection
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,128, @return dimension of the added set of equations
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,129, @throws IllegalArgumentException if additional equation is unknown
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,131,ublic int getAddedSetDimension(final AdditionalEquations addEqu) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,132,eturn selectStateAndEquations(addEqu).getAdditionalEquations().getDimension();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,135,** Get the current time derivative of the total state vector.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,136, @param t current value of the independent <I>time</I> variable
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,137, @param y array containing the current value of the state vector
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,138, @param yDot placeholder array where to put the time derivative of the state vector
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,140,"ublic void computeDerivatives(final double t, final double[] y, final double[] yDot) {"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,142,/ Add contribution for the main set of equations
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,143,nt index = getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,144,ouble[] m = new double[index];
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,145,ouble[] mDot = new double[index];
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,146,/ update current main state
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,147,"ystem.arraycopy(y, 0, m, 0, index);"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,148,/ compute derivatives
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,149,"ainSet.computeDerivatives(t, m, mDot);"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,150,/ update main state contribution in global array
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,151,"ystem.arraycopy(mDot, 0, yDot, 0, index);"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,153,/ Add contribution for additional equations
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,154,or (final AdditionalStateAndEquations stateAndEqu : addedSets) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,155,inal double[] p    = stateAndEqu.getAdditionalState();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,156,inal double[] pDot = stateAndEqu.getAdditionalStateDot();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,158,/ update current additional state
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,159,"ystem.arraycopy(y, index, p, 0, p.length);"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,161,/ compute additional derivatives
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,162,"tateAndEqu.getAdditionalEquations().computeDerivatives(t, m, mDot, p, pDot);"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,164,/ update each additional state contribution in global array
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,165,"ystem.arraycopy(pDot, 0, yDot, index, p.length);"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,167,/ incrementing index
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,168,ndex += p.length;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,173,** Add a set of user-specified equations to be integrated along with
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,174,  the main set of equations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,176, @param addEqu additional equations
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,177," @see #setInitialAdditionalState(double[], AdditionalEquations)"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,178, @see #getCurrentAdditionalState(AdditionalEquations)
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,180,ublic void addAdditionalEquations(final AdditionalEquations addEqu) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,181,ddedSets.add(new AdditionalStateAndEquations(addEqu));
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,184,** Get the instance of the main set of equations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,185, @return current value of the main set of equations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,187,ublic FirstOrderDifferentialEquations getMainSet() {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,188,eturn mainSet;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,191,** Set initial additional state.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,192, @param addState additional state
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,193, @param addEqu additional equations used as a reference for selection
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,194, @throws IllegalArgumentException if additional equation is unknown
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,196,"ublic void setInitialAdditionalState(final double[] addState, final AdditionalEquations addEqu) {"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,197,electStateAndEquations(addEqu).setAdditionalState(addState);
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,200,** Set current additional state.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,201, <p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,202, The total current state computed by the integrator
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,203, is dispatched here to the various additional states.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,204, </p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,205, @param currentState total current state
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,206, @throws IllegalArgumentException if additional equation is unknown
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,208,ublic void setCurrentAdditionalState(final double[] currentState)
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,209,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,210,nt index = getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,211,ry {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,212,or (AdditionalStateAndEquations stateAndEqu : addedSets) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,213,inal int addDim = stateAndEqu.getAdditionalEquations().getDimension();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,214,inal double[] addState = new double[addDim];
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,215,"ystem.arraycopy(currentState, index, addState, 0, addDim);"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,216,tateAndEqu.setAdditionalState(addState);
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,217,ndex += addDim;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,219, catch (Exception e) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,220,"/ TODO we should not catch Exception, and we should identify the offending additional equation"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,221,hrow new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,225,** Get current additional state.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,226, @param addEqu additional equations used as a reference for selection
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,227, @return current additional state
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,228, @throws IllegalArgumentException if additional equation is unknown
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,230,ublic double[] getCurrentAdditionalState(final AdditionalEquations addEqu) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,231,eturn selectStateAndEquations(addEqu).getAdditionalState();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,234,** Get all current additional states accumulated.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,235, @return current additional states
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,236, @throws IllegalArgumentException if additional equation is unknown
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,238,ublic double[] getCurrentAdditionalStates()
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,239,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,240,nt index = 0;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,241,inal double[] cumulState = new double[getAddedSetsDimension()];
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,242,ry {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,243,or (AdditionalStateAndEquations stateAndEqu : addedSets) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,244,inal int addDim = stateAndEqu.getAdditionalEquations().getDimension();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,245,inal double[] addState = stateAndEqu.getAdditionalState();
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,246,"ystem.arraycopy(addState, 0, cumulState, index, addDim);"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,247,ndex += addDim;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,249,eturn cumulState;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,250, catch (Exception e) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,251,"/ TODO we should not catch Exception, and we should identify the offending additional equation"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,252,hrow new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,256,** Select additional state and equations pair in the list.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,257, @param  addEqu Additional equations used as a reference for selection
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,258, @return additional state and equations pair
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,259, @throws IllegalArgumentException if additional equation is unknown
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,261,rivate AdditionalStateAndEquations selectStateAndEquations(final AdditionalEquations addEqu)
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,262,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,263,or (AdditionalStateAndEquations stateAndEqu : addedSets) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,264,f (stateAndEqu.getAdditionalEquations() == addEqu) {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,265,eturn stateAndEqu;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,268,"/ TODO we should not catch Exception, and we should identify the offending additional equation"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderDifferentialEquations.java,269,hrow new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_ADDITIONAL_EQUATION);
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,18,ackage org.apache.commons.math.ode;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,20,mport org.apache.commons.math.exception.MathIllegalArgumentException;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,21,mport org.apache.commons.math.exception.MathIllegalStateException;
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,24, This interface represents a first order integrator for expandable
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,25, differential equations.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,26, <p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,27, The classes devoted to solve expandable first order differential equations
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,28, should implement this interface. The problems which can be handled should
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,29, implement the {@link ExpandableFirstOrderDifferentialEquations} interface.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,30, </p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,32, @see ExpandableFirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,34, @version $Id$
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,35, @since 3.0
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,38,ublic interface ExpandableFirstOrderIntegrator extends FirstOrderIntegrator {
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,40,** Integrate a set of differential equations up to the given time.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,41, <p>This method solves an Initial Value Problem (IVP).</p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,42," <p>The set of differential equations is composed of a main set, which"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,43, can be extended by some sets of additional equations.</p>
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,44, <p>Since this method stores some internal state variables made
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,45, available in its public interface during integration ({@link
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,46," #getCurrentSignedStepsize()}), it is <em>not</em> thread-safe.</p>"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,47, @param equations complete set of differential equations to integrate
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,48, @param t0 initial time
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,49, @param y0 initial value of the main state vector at t0
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,50, @param t target time for the integration
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,51, (can be set to a value smaller than <code>t0</code> for backward integration)
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,52, @param y placeholder where to put the main state vector at each successful
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,53,"  step (and hence at the end of integration), can be the same object as y0"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,54," @return stop time, will be the same as target time if integration reached its"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,55," target, but may be different if some {@link"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,56, org.apache.commons.math.ode.events.EventHandler} stops it at some point.
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,57, @throws MathIllegalStateException if the integrator cannot perform integration
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,58, @throws MathIllegalArgumentException if integration parameters are wrong (typically
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,59, too small integration span)
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,61,"ouble integrate(ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,62,"ouble t0, double[] y0, double t, double[] y)"
False,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,src/main/java/org/apache/commons/math/ode/ExpandableFirstOrderIntegrator.java,63,"hrows MathIllegalStateException, MathIllegalArgumentException;"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,17,package org.apache.commons.math.ode;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,20,import java.util.List;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,22,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,26,"* This class represents a combined set of first order differential equations,"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,27,* with at least a primary set of equations expandable by some sets of secondary
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,28,* equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,29,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,30,* One typical use case is the computation of the Jacobian matrix for some ODE.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,31,"* In this case, the primary set of equations corresponds to the raw ODE, and we"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,32,* add to this set another bunch of secondary equations which represent the Jacobian
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,33,* matrix of the primary set.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,34,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,35,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,36,* We want the integrator to use <em>only</em> the primary set to estimate the
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,37,* errors and hence the step sizes. It should <em>not</em> use the secondary
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,38,* equations in this computation. The {@link AbstractIntegrator integrator} will
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,39,* be able to know where the primary set ends and so where the secondary sets begin.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,40,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,42,* @see FirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,43,* @see JacobianMatrices
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,45,* @version $Id$
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,46,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,49,public class ExpandableStatefulODE {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,51,/** Primary differential equation. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,52,private final FirstOrderDifferentialEquations primary;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,54,/** Mapper for primary equation. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,55,private final EquationsMapper primaryMapper;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,57,/** Time. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,58,private double time;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,60,/** State. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,61,private final double[] primaryState;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,63,/** State derivative. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,64,private final double[] primaryStateDot;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,66,/** Components of the expandable ODE. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,67,private List<SecondaryComponent> components;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,69,/** Build an expandable set from its primary ODE set.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,70,* @param ode the primary set of differential equations to be integrated.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,72,public ExpandableStatefulODE(final FirstOrderDifferentialEquations primary) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,73,final int n          = primary.getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,74,this.primary         = primary;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,75,"this.primaryMapper   = new EquationsMapper(0, n);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,76,this.time            = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,77,this.primaryState    = new double[n];
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,78,this.primaryStateDot = new double[n];
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,79,this.components      = new ArrayList<ExpandableStatefulODE.SecondaryComponent>();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,82,/** Get the primary set of differential equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,83,* @return primary set of differential equations
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,85,public FirstOrderDifferentialEquations getPrimary() {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,86,return primary;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,89,/** Return the dimension of the complete set of equations.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,90,* <p>
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,91,* The complete set of equations correspond to the primary set plus all secondary sets.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,92,* </p>
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,93,* @return dimension of the complete set of equations
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,95,public int getTotalDimension() {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,96,if (components.isEmpty()) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,97,"// there are no secondary equations, the complete set is limited to the primary set"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,98,return primaryMapper.getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,99,} else {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,100,"// there are secondary equations, the complete set ends after the last set"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,101,final EquationsMapper lastMapper = components.get(components.size() - 1).mapper;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,102,return lastMapper.getFirstIndex() + lastMapper.getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,106,/** Get the current time derivative of the complete state vector.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,107,* @param t current value of the independent <I>time</I> variable
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,108,* @param y array containing the current value of the complete state vector
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,109,* @param yDot placeholder array where to put the time derivative of the complete state vector
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,111,"public void computeDerivatives(final double t, final double[] y, final double[] yDot) {"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,113,// compute derivatives of the primary equations
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,114,"primaryMapper.extractEquationData(y, primaryState);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,115,"primary.computeDerivatives(t, primaryState, primaryStateDot);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,116,"primaryMapper.insertEquationData(primaryStateDot, yDot);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,118,// Add contribution for secondary equations
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,119,for (final SecondaryComponent component : components) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,120,"component.mapper.extractEquationData(y, component.state);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,121,"component.equation.computeDerivatives(t, primaryState, primaryStateDot,"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,122,"component.state, component.stateDot);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,123,"component.mapper.insertEquationData(component.stateDot, yDot);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,128,/** Add a set of secondary equations to be integrated along with the primary set.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,129,* @param secondary secondary equations set
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,130,* @return index of the secondary equation in the expanded state
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,132,public int addSecondaryEquations(final SecondaryEquations secondary) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,134,final int firstIndex;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,135,if (components.isEmpty()) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,136,// lazy creation of the components list
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,137,components = new ArrayList<ExpandableStatefulODE.SecondaryComponent>();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,138,firstIndex = primary.getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,139,} else {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,140,final SecondaryComponent last = components.get(components.size() - 1);
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,141,firstIndex = last.mapper.getFirstIndex() + last.mapper.getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,144,"components.add(new SecondaryComponent(secondary, firstIndex));"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,146,return components.size() - 1;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,150,/** Get an equations mapper for the primary equations set.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,151,* @return mapper for the primary set
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,152,* @see #getSecondaryMappers()
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,154,public EquationsMapper getPrimaryMapper() {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,155,return primaryMapper;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,158,/** Get the equations mappers for the secondary equations sets.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,159,* @return equations mappers for the secondary equations sets
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,160,* @see #getPrimaryMapper()
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,162,public EquationsMapper[] getSecondaryMappers() {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,163,final EquationsMapper[] mappers = new EquationsMapper[components.size()];
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,164,for (int i = 0; i < mappers.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,165,mappers[i] = components.get(i).mapper;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,167,return mappers;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,170,/** Set current time.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,171,* @param time current time
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,173,public void setTime(final double time) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,174,this.time = time;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,177,/** Get current time.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,178,* @return current time
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,180,public double getTime() {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,181,return time;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,184,/** Set primary part of the current state.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,185,* @param primaryState primary part of the current state
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,186,* @throws DimensionMismatchException if the dimension of the array does not
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,187,* match the primary set
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,189,public void setPrimaryState(final double[] primaryState) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,191,// safety checks
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,192,if (primaryState.length != this.primaryState.length) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,193,"throw new DimensionMismatchException(primaryState.length, this.primaryState.length);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,196,// set the data
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,197,"System.arraycopy(primaryState, 0, this.primaryState, 0, primaryState.length);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,201,/** Get primary part of the current state.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,202,* @return primary part of the current state
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,204,public double[] getPrimaryState() {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,205,return primaryState.clone();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,208,/** Get primary part of the current state derivative.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,209,* @return primary part of the current state derivative
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,211,public double[] getPrimaryStateDot() {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,212,return primaryStateDot.clone();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,215,/** Set secondary part of the current state.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,216,* @param index index of the part to set as returned by {@link
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,217,* #addSecondaryEquations(SecondaryEquations)}
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,218,* @param secondaryState secondary part of the current state
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,219,* @throws DimensionMismatchException if the dimension of the partial state does not
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,220,* match the selected equations set dimension
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,222,"public void setSecondaryState(final int index, final double[] secondaryState)"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,223,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,225,// get either the secondary state
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,226,double[] localArray = components.get(index).state;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,228,// safety checks
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,229,if (secondaryState.length != localArray.length) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,230,"throw new DimensionMismatchException(secondaryState.length, localArray.length);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,233,// set the data
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,234,"System.arraycopy(secondaryState, 0, localArray, 0, secondaryState.length);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,238,/** Get secondary part of the current state.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,239,* @param index index of the part to set as returned by {@link
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,240,* #addSecondaryEquations(SecondaryEquations)}
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,241,* @return secondary part of the current state
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,243,public double[] getSecondaryState(final int index) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,244,return components.get(index).state.clone();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,247,/** Get secondary part of the current state derivative.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,248,* @param index index of the part to set as returned by {@link
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,249,* #addSecondaryEquations(SecondaryEquations)}
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,250,* @return secondary part of the current state derivative
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,252,public double[] getSecondaryStateDot(final int index) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,253,return components.get(index).stateDot.clone();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,256,/** Set the complete current state.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,257,* @param completeState complete current state to copy data from
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,258,* @throws DimensionMismatchException if the dimension of the complete state does not
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,259,* match the complete equations sets dimension
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,261,public void setCompleteState(final double[] completeState)
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,262,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,264,// safety checks
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,265,if (completeState.length != getTotalDimension()) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,266,"throw new DimensionMismatchException(completeState.length, getTotalDimension());"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,269,// set the data
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,270,"primaryMapper.extractEquationData(completeState, primaryState);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,271,for (final SecondaryComponent component : components) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,272,"component.mapper.extractEquationData(completeState, component.state);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,277,/** Get the complete current state.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,278,* @return complete current state
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,279,* @throws DimensionMismatchException if the dimension of the complete state does not
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,280,* match the complete equations sets dimension
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,282,public double[] getCompleteState() {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,284,// allocate complete array
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,285,double[] completeState = new double[getTotalDimension()];
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,287,// set the data
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,288,"primaryMapper.insertEquationData(primaryState, completeState);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,289,for (final SecondaryComponent component : components) {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,290,"component.mapper.insertEquationData(component.state, completeState);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,293,return completeState;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,297,/** Components of the compound stateful ODE. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,298,private static class SecondaryComponent {
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,301,/** Secondary differential equation. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,302,private final SecondaryEquations equation;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,304,/** Mapper between local and complete arrays. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,305,private final EquationsMapper mapper;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,307,/** State. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,308,private final double[] state;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,310,/** State derivative. */
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,311,private final double[] stateDot;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,313,/** Simple constructor.
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,314,* @param equation secondary differential equation
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,315,* @param first index index to use for the first element in the complete arrays
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,317,"public SecondaryComponent(final SecondaryEquations equation, final int firstIndex) {"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,318,final int n   = equation.getDimension();
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,319,this.equation = equation;
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,320,"mapper        = new EquationsMapper(firstIndex, n);"
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,321,state         = new double[n];
True,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,src/main/java/org/apache/commons/math/ode/ExpandableStatefulODE.java,322,stateDot      = new double[n];
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,17,ackage org.apache.commons.math.ode;
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,20,** This interface represents a first order differential equations set
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,21, with a main set of equations and an extension set.
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,23, <p>
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,24, This interface is a simple extension on the {@link
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,25, FirstOrderDifferentialEquations} that allows to identify which part
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,26, of a complete set of differential equations correspond to the main
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,27, set and which part correspond to the extension set.
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,28, </p>
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,29, <p>
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,30, One typical use case is the computation of Jacobians. The main
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,31," set of equations correspond to the raw ode, and we add to this set"
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,32, another bunch of equations which represent the jacobians of the
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,33," main set. In that case, we want the integrator to use <em>only</em>"
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,34, the main set to estimate the errors and hence the step sizes. It should
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,35, <em>not</em> use the additional equations in this computation. If the
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,36," complete ode implements this interface, the {@link FirstOrderIntegrator"
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,37, integrator} will be able to know where the main set ends and where the
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,38, extended set begins.
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,39, </p>
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,40, <p>
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,41, We consider that the main set always corresponds to the first equations
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,42, and the extended set to the last equations.
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,43, </p>
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,45, @see FirstOrderDifferentialEquations
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,47, @version $Id$
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,48, @since 2.2
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,51,ublic interface ExtendedFirstOrderDifferentialEquations extends FirstOrderDifferentialEquations {
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,53,** Return the dimension of the main set of equations.
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,54, <p>
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,55, The main set of equations represent the first part of an ODE state.
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,56, The error estimations and adaptive step size computation should be
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,57," done on this first part only, not on the final part of the state"
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,58, which represent an extension set of equations which are considered
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,59, secondary.
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,60, </p>
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,61," @return dimension of the main set of equations, must be lesser than or"
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,62, equal to the {@link #getDimension() total dimension}
False,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,src/main/java/org/apache/commons/math/ode/ExtendedFirstOrderDifferentialEquations.java,64,nt getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,28, This class defines a set of {@link AdditionalEquations additional equations} to
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,29," compute the jacobian matrices with respect to the initial state vector and, if"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,30," any, to some parameters of the main ODE set."
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,28,* This class defines a set of {@link SecondaryEquations secondary equations} to
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,29,"* compute the Jacobian matrices with respect to the initial state vector and, if"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,30,"* any, to some parameters of the primary ODE set."
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,32, It is intended to be packed into an {@link ExpandableFirstOrderDifferentialEquations}
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,33," in conjunction with a main set of ODE, which may be:"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,32,* It is intended to be packed into an {@link ExpandableStatefulODE}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,33,"* in conjunction with a primary set of ODE, which may be:"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,38, In order to compute jacobian matrices with respect to some parameters of the
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,39," main ODE set, the following parameter jacobian providers may be set:"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,38,* In order to compute Jacobian matrices with respect to some parameters of the
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,39,"* primary ODE set, the following parameter Jacobian providers may be set:"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,46, @see ExpandableFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,46,* @see ExpandableStatefulODE
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,55,ublic class JacobianMatrices implements AdditionalEquations {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,55,public class JacobianMatrices {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,58,rivate ExpandableFirstOrderDifferentialEquations efode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,58,private ExpandableStatefulODE efode;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,60,** FODE without exact main jacobian computation skill. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,61,rivate FirstOrderDifferentialEquations fode = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,60,/** Index of the instance in the expandable set. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,61,private int index;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,63,** FODE with exact main jacobian computation skill. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,64,rivate MainStateJacobianProvider jode = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,63,/** FODE with exact primary Jacobian computation skill. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,64,private MainStateJacobianProvider jode;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,66,** FODE without exact parameter jacobian computation skill. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,67,rivate ParameterizedODE pode = null;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,69,** FODE with exact parameter jacobian computation skill. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,70,rivate List<ParameterJacobianProvider> pjp = new ArrayList<ParameterJacobianProvider>();;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,72,** List of parameters selected for parameter jacobian computation. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,73,rivate List<ParameterConfiguration> selectedParameters = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,66,/** FODE without exact parameter Jacobian computation skill. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,67,private ParameterizedODE pode;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,78,** Parameters dimension. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,79,rivate int paramDim = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,72,/** Selected parameters for parameter Jacobian computation. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,73,private ParameterConfiguration[] selectedParameters;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,81,** Current main state jacobian matrix in a row. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,82,rivate double[] mainJacobianInARow;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,75,/** FODE with exact parameter Jacobian computation skill. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,76,private List<ParameterJacobianProvider> jacobianProviders;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,84,** Current parameters jacobian matrices in a row. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,85,rivate double[] parameterJacobiansInARow = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,78,/** Parameters dimension. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,79,private int paramDim;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,87,** Step used for finite difference computation of jacobian matrix
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,88,  w.r.t. main state vector. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,89,rivate double[] hY = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,81,/** Boolean for selected parameters consistency. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,82,private boolean dirtyParameter;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,91,** Boolean for fode consistency. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,92,rivate boolean dirtyMainState = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,84,/** State and parameters Jacobian matrices in a row. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,85,private double[] matricesData;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,94,** Boolean for selected parameters consistency. */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,95,rivate boolean dirtyParameter = false;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,97,** Simple constructor for an additional equations set computing jacobian matrices.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,98, <p>This additional equations set is added internally to the expandable
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,99, first order differential equations set thanks to the
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,100, {@link ExpandableFirstOrderDifferentialEquations#addAdditionalEquations(AdditionalEquations)}
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,101, method.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,102, @param extended the expandable first order differential equations set
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,103, @param jode the main first order differential equations set to extend
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,104, @exception IllegalArgumentException if jode does not match the main set to be extended given by
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,105,            {@link ExpandableFirstOrderDifferentialEquations#getMainSet() extended.getMainSet()}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,87,/** Simple constructor for a secondary equations set computing Jacobian matrices.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,88,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,89,* Parameters must belong to the supported ones given by {@link
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,90,"* Parameterizable#getParametersNames()}, so the primary set of differential"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,91,* equations must be {@link Parameterizable}.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,92,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,93,* <p>Note that each selection clears the previous selected parameters.</p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,95,* @param fode the primary first order differential equations set to extend
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,96,* @param hY step used for finite difference computation with respect to state vector
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,97,* @param parameters parameters to consider for Jacobian matrices processing
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,98,* (may be null if parameters Jacobians is not desired)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,99,* @exception MathIllegalArgumentException if one parameter is not supported
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,100,* or there is a dimension mismatch with {@code hY}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,102,"public JacobianMatrices(final FirstOrderDifferentialEquations fode, final double[] hY,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,103,final String... parameters)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,104,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,105,"this(new MainStateJacobianWrapper(fode, hY), parameters);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,108,/** Simple constructor for a secondary equations set computing Jacobian matrices.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,109,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,110,* Parameters must belong to the supported ones given by {@link
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,111,"* Parameterizable#getParametersNames()}, so the primary set of differential"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,112,* equations must be {@link Parameterizable}.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,113,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,114,* <p>Note that each selection clears the previous selected parameters.</p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,116,* @param jode the primary first order differential equations set to extend
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,117,* @param parameters parameters to consider for Jacobian matrices processing
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,118,* (may be null if parameters Jacobians is not desired)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,119,* @exception MathIllegalArgumentException if one parameter is not supported
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,107,"ublic JacobianMatrices(final ExpandableFirstOrderDifferentialEquations extended,"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,108,inal MainStateJacobianProvider jode)
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,109,hrows IllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,121,"public JacobianMatrices(final MainStateJacobianProvider jode,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,122,final String... parameters)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,123,throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,111,"heckCompatibility(extended, jode);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,125,this.efode = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,126,this.index = -1;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,113,fode = extended;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,114,tateDim = efode.getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,115,ainJacobianInARow = new double[stateDim * stateDim];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,117,fode.addAdditionalEquations(this);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,118,etInitialMainStateJacobian();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,129,this.pode = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,131,this.stateDim = jode.getDimension();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,133,if (parameters == null) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,134,selectedParameters = null;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,135,paramDim = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,136,} else {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,137,this.selectedParameters = new ParameterConfiguration[parameters.length];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,138,for (int i = 0; i < parameters.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,139,"selectedParameters[i] = new ParameterConfiguration(parameters[i], Double.NaN);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,141,paramDim = parameters.length;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,143,this.dirtyParameter = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,145,this.jacobianProviders = new ArrayList<ParameterJacobianProvider>();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,147,// set the default initial state Jacobian to the identity
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,148,// and the default initial parameters Jacobian to the null matrix
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,149,matricesData = new double[(stateDim + paramDim) * stateDim];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,150,for (int i = 0; i < stateDim; ++i) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,151,matricesData[i * (stateDim + 1)] = 1.0;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,121,** Simple constructor for an additional equations set computing jacobian matrices.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,122, <p>This additional equations set is added internally to the expandable
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,123, first order differential equations set thanks to the
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,124, {@link ExpandableFirstOrderDifferentialEquations#addAdditionalEquations(AdditionalEquations)}
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,125, method.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,126, @param extended the expandable first order differential equations set
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,127, @param fode the main first order differential equations set to extend
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,128, @exception IllegalArgumentException if fode does not match the main set to be extended given by
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,129,            {@link ExpandableFirstOrderDifferentialEquations#getMainSet() extended.getMainSet()}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,156,/** Register the variational equations for the Jacobians matrices to the expandable set.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,157,* @exception MathIllegalArgumentException if the primary set of the expandable set does
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,158,* not match the one used to build the instance
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,159,* @see ExpandableStatefulODE#addSecondaryEquations(SecondaryEquations)
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,131,"ublic JacobianMatrices(final ExpandableFirstOrderDifferentialEquations extended,"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,132,inal FirstOrderDifferentialEquations fode)
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,133,hrows IllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,135,"heckCompatibility(extended, fode);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,137,fode = extended;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,138,tateDim = efode.getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,139,ainJacobianInARow = new double[stateDim * stateDim];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,140,his.fode = fode;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,141,irtyMainState = true;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,142,fode.addAdditionalEquations(this);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,143,etInitialMainStateJacobian();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,161,public void registerVariationalEquations(final ExpandableStatefulODE expandable)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,162,throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,164,// safety checks
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,165,final FirstOrderDifferentialEquations ode = (jode instanceof MainStateJacobianWrapper) ?
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,166,((MainStateJacobianWrapper) jode).ode :
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,167,jode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,168,if (expandable.getPrimary() != ode) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,169,throw new MathIllegalArgumentException(LocalizedFormats.UNMATCHED_ODE_IN_EXPANDED_SET);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,172,efode = expandable;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,173,index = efode.addSecondaryEquations(new JacobiansSecondaryEquations());
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,174,"efode.setSecondaryState(index, matricesData);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,146,** Add a parameter jacobian provider.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,147, @param pjp the parameter jacobian provider to compute exactly the parameter jacobian matrix
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,178,/** Add a parameter Jacobian provider.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,179,* @param provider the parameter Jacobian provider to compute exactly the parameter Jacobian matrix
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,149,ublic void setParameterJacobianProvider(final ParameterJacobianProvider pjp) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,150,his.pjp.add(pjp);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,181,public void addParameterJacobianProvider(final ParameterJacobianProvider provider) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,182,jacobianProviders.add(provider);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,153,** Add a parameter jacobian provider.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,154, @param pjp the parameterized ODE to compute by finite difference the parameter jacobian matrix
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,185,/** Add a parameter Jacobian provider.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,186,* @param pode the parameterized ODE to compute the parameter Jacobian matrix using finite differences
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,161,** Select the parameters to consider for jacobian matrices processing.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,162, <p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,163, Parameters must belong to the supported ones given by {@link
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,164," Parameterizable#getParametersNames()}, so the main set of differential"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,165, equations must be {@link Parameterizable}.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,166, </p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,167, <p>Note that each selection clears the previous selected parameters.</p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,169, @param parameters parameters to consider for jacobian matrices processing
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,170, @exception IllegalArgumentException if one parameter is not supported
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,172,ublic void selectParameters(final String... parameters) throws IllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,174,electedParameters = new ArrayList<ParameterConfiguration>();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,175,or (String param : parameters) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,176,"electedParameters.add(new ParameterConfiguration(param, Double.NaN));"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,178,aramDim = parameters.length;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,179,arameterJacobiansInARow = new double[paramDim * stateDim];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,180,etInitialParameterJacobians();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,184,  difference the jacobian matrix.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,194,*  difference the Jacobian matrix.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,186, Needed if and only if the main ODE set is a {@link ParameterizedODE}
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,187, and the parameter has been {@link #selectParameters(String ...) selected}
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,196,* Needed if and only if the primary ODE set is a {@link ParameterizedODE}.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,190," For pval, a non zero value of the parameter, pval * Math.sqrt(MathUtils.EPSILON)"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,191, is a reasonable value for such a step.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,199,"* Given a non zero parameter value pval for the parameter, a reasonable value"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,200,* for such a step is {@code pval * FastMath.sqrt(MathUtils.EPSILON)}.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,194, A zero value for such a step doesn't enable to compute the parameter jacobian matrix.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,203,* A zero value for such a step doesn't enable to compute the parameter Jacobian matrix.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,196, @param parameter parameter to consider for jacobian processing
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,197, @param hP step for jacobian finite difference computation w.r.t. the specified parameter
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,205,* @param parameter parameter to consider for Jacobian processing
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,206,* @param hP step for Jacobian finite difference computation w.r.t. the specified parameter
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,203,oolean found = false;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,207,ound = true;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,209,reak;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,216,return;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,212,f (!found) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,213,"hrow new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER,"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,214,arameter);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,218,** Set the steps in order to compute by finite difference the jacobian
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,219,  matrix with respect to main state.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,220, <p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,221, Needed if and only if the main set is a {@link FirstOrderDifferentialEquations}.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,222, </p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,223, <p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,224, Zero values for those steps don't enable to compute the main state jacobian matrix.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,225, </p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,226, @param hY step used for finite difference computation with respect to state vector
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,227, @exception IllegalArgumentException if the hY has not the dimension of the main state
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,228, given by {@link ExpandableFirstOrderDifferentialEquations#getMainSetDimension()}
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,230,ublic void setMainStateSteps(final double[] hY) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,220,"throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER, parameter);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,232,f (fode != null) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,233,/ Check dimension
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,234,"heckDimension(stateDim, hY);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,235,his.hY = hY.clone();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,236,irtyMainState = true;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,240,** Set the initial value of the jacobian matrix with respect to state.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,241, @param dYdY0 initial jacobian matrix w.r.t. state
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,224,/** Set the initial value of the Jacobian matrix with respect to state.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,225,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,226,"* If this method is not called, the initial value of the Jacobian"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,227,* matrix with respect to state is set to identity.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,228,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,229,* @param dYdY0 initial Jacobian matrix w.r.t. state
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,244,ublic void setInitialMainStateJacobian(final double[][] dYdY0) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,232,public void setInitialMainStateJacobian(final double[][] dYdY0)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,233,throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,251,nt index = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,240,int i = 0;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,253,"ystem.arraycopy(row, 0, mainJacobianInARow, index, stateDim);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,254,ndex += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,242,"System.arraycopy(row, 0, matricesData, i, stateDim);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,243,i += stateDim;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,256,/ set initial additional state value in expandable fode
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,257,"fode.setInitialAdditionalState(mainJacobianInARow, this);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,246,if (efode != null) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,247,"efode.setSecondaryState(index, matricesData);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,260,** Set the initial value of the jacobian matrix with respect to one parameter.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,261, <p>The parameter must be {@link #selectParameters(String...) selected}.</p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,252,/** Set the initial value of a column of the Jacobian matrix with respect to one parameter.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,253,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,254,"* If this method is not called for some parameter, the initial value of"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,255,* the column of the Jacobian matrix with respect to this parameter is set to zero.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,256,* </p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,263, @param dYdP initial jacobian matrix w.r.t. the parameter
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,264, @exception IllegalArgumentException if matrix dimensions are incorrect
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,258,* @param dYdP initial Jacobian column vector with respect to the parameter
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,259,* @exception MathIllegalArgumentException if a parameter is not supported
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,266,"ublic void setInitialParameterJacobian(final String pName, final double[] dYdP) {"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,261,"public void setInitialParameterJacobian(final String pName, final double[] dYdP)"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,262,throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,271,/ store the matrix in a global single dimension array
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,272,oolean found = false;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,273,nt index = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,267,// store the column in a global single dimension array
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,268,int i = stateDim * stateDim;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,276,"ystem.arraycopy(dYdP, 0, parameterJacobiansInARow, index, stateDim);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,277,ouble[] p = new double[this.getDimension()];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,278,ndex = stateDim * stateDim;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,279,"ystem.arraycopy(mainJacobianInARow, 0, p, 0, index);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,280,"ystem.arraycopy(parameterJacobiansInARow, 0, p, index, stateDim * paramDim);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,281,/ set initial additional state value in expandable fode
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,282,"fode.setInitialAdditionalState(p, this);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,283,ound = true;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,284,reak;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,271,"System.arraycopy(dYdP, 0, matricesData, i, stateDim);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,272,if (efode != null) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,273,"efode.setSecondaryState(index, matricesData);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,275,return;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,286,ndex += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,277,i += stateDim;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,288,f (! found) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,289,"hrow new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER,"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,290,Name);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,294,** Set the default initial value of the jacobian matrix with respect to state.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,295, <p>dYdY0 is set to the identity matrix.</p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,297,ublic void setInitialMainStateJacobian() {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,298,inal double[][] dYdY0 = new double[stateDim][stateDim];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,299,or (int i = 0; i < stateDim; ++i) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,300,YdY0[i][i] = 1.0;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,302,etInitialMainStateJacobian(dYdY0);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,305,** Set the default initial value of the jacobian matrix with respect to one parameter.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,306, <p>The parameter must be {@link #selectParameters(String...) selected}.</p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,307, <p>dYdP is set to the null matrix.</p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,308, @param pName parameter name
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,310,ublic void setInitialParameterJacobian(final String pName) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,311,"etInitialParameterJacobian(pName, new double[stateDim]);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,314,** Set the default initial values of jacobian matrices with respect to all parameters.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,316,ublic void setInitialParameterJacobians() {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,317,or (ParameterConfiguration param: selectedParameters) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,318,etInitialParameterJacobian(param.getParameterName());
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,280,"throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER, pName);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,322,** Set default initial values for jacobian matrices.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,323, <p>dYdY0 is set to the identity matrix and all dYdP are set to zero.</p>
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,325,ublic void setInitialJacobians() {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,326,etInitialMainStateJacobian();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,327,etInitialParameterJacobians();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,330,** Get the current value of the jacobian matrix with respect to state.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,331, @param dYdY0 current jacobian matrix with respect to state.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,284,/** Get the current value of the Jacobian matrix with respect to state.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,285,* @param dYdY0 current Jacobian matrix with respect to state.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,336,ouble[] p = efode.getCurrentAdditionalState(this);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,290,double[] p = efode.getSecondaryState(index);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,346,** Get the current value of the jacobian matrix with respect to one parameter.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,347, @param pName name of the parameter for the computed jacobian matrix
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,348, @param dYdP current jacobian matrix with respect to the named parameter
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,300,/** Get the current value of the Jacobian matrix with respect to one parameter.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,301,* @param pName name of the parameter for the computed Jacobian matrix
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,302,* @param dYdP current Jacobian matrix with respect to the named parameter
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,353,ouble[] p = efode.getCurrentAdditionalState(this);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,307,double[] p = efode.getSecondaryState(index);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,366,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,367,ublic int getDimension() {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,368,eturn stateDim * (stateDim + paramDim);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,320,/** Check array dimensions.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,321,* @param expected expected dimension
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,322,* @param array (may be null if expected is 0)
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,323,* @throws DimensionMismatchException if the array dimension does not match the expected one
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,325,"private void checkDimension(final int expected, final Object array)"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,326,throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,327,int arrayDimension = (array == null) ? 0 : Array.getLength(array);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,328,if (arrayDimension != expected) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,329,"throw new DimensionMismatchException(arrayDimension, expected);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,371,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,372,"ublic void computeDerivatives(final double t, final double[] y, final double[] yDot,"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,373,"inal double[] z, final double[] zDot) {"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,333,/** Local implementation of secondary equations.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,334,* <p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,335,* This class is an inner class to ensure proper scheduling of calls
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,336,* by forcing the use of {@link JacobianMatrices#registerVariationalEquations(ExpandableStatefulODE)}.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,337,* </p>
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,339,private class JacobiansSecondaryEquations implements SecondaryEquations {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,375,/ Lazy initialization
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,376,f (dirtyMainState) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,377,"ode = new MainStateJacobianWrapper(fode, hY);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,378,irtyMainState = false;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,380,f (dirtyParameter && (paramDim != 0)) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,381,"jp.add(new ParameterJacobianWrapper(jode, pode, selectedParameters));"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,382,irtyParameter = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,341,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,342,public int getDimension() {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,343,return stateDim * (stateDim + paramDim);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,385,/ variational equations:
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,386,/ from d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dy0]/dt and d[dy/dp]/dt
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,346,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,347,"public void computeDerivatives(final double t, final double[] y, final double[] yDot,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,348,"final double[] z, final double[] zDot) {"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,388,/ compute jacobian matrix with respect to main state
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,389,ouble[][] dFdY = new double[stateDim][stateDim];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,390,"ode.computeMainStateJacobian(t, y, yDot, dFdY);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,350,// Lazy initialization
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,351,if (dirtyParameter && (paramDim != 0)) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,352,"jacobianProviders.add(new ParameterJacobianWrapper(jode, pode, selectedParameters));"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,353,dirtyParameter = false;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,392,/ Dispatch jacobian matrix in the compound additional state vector
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,393,or (int i = 0; i < stateDim; ++i) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,394,inal double[] dFdYi = dFdY[i];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,395,or (int j = 0; j < stateDim; ++j) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,396,ouble s = 0;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,397,inal int startIndex = j;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,398,nt zIndex = startIndex;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,399,or (int l = 0; l < stateDim; ++l) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,400, += dFdYi[l] * z[zIndex];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,401,Index += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,356,// variational equations:
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,357,// from d[dy/dt]/dy0 and d[dy/dt]/dp to d[dy/dy0]/dt and d[dy/dp]/dt
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,359,// compute Jacobian matrix with respect to primary state
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,360,double[][] dFdY = new double[stateDim][stateDim];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,361,"jode.computeMainStateJacobian(t, y, yDot, dFdY);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,363,// Dispatch Jacobian matrix in the compound secondary state vector
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,364,for (int i = 0; i < stateDim; ++i) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,365,final double[] dFdYi = dFdY[i];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,366,for (int j = 0; j < stateDim; ++j) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,367,double s = 0;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,368,final int startIndex = j;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,369,int zIndex = startIndex;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,370,for (int l = 0; l < stateDim; ++l) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,371,s += dFdYi[l] * z[zIndex];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,372,zIndex += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,374,zDot[startIndex + i * stateDim] = s;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,403,Dot[startIndex + i * stateDim] = s;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,407,f (paramDim != 0) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,408,/ compute jacobian matrices with respect to parameters
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,409,ouble[] dFdP = new double[stateDim];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,410,nt startIndex = stateDim * stateDim;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,411,or (ParameterConfiguration param: selectedParameters) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,412,oolean found = false;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,413,or (ParameterJacobianProvider provider: pjp) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,414,f (provider.isSupported(param.getParameterName())) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,415,ry {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,416,"rovider.computeParameterJacobian(t, y, yDot, param.getParameterName(), dFdP);"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,417,or (int i = 0; i < stateDim; ++i) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,418,inal double[] dFdYi = dFdY[i];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,419,nt zIndex = startIndex;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,420,ouble s = dFdP[i];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,421,or (int l = 0; l < stateDim; ++l) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,422, += dFdYi[l] * z[zIndex];
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,423,Index++;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,378,if (paramDim != 0) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,379,// compute Jacobian matrices with respect to parameters
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,380,double[] dFdP = new double[stateDim];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,381,int startIndex = stateDim * stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,382,for (ParameterConfiguration param: selectedParameters) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,383,boolean found = false;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,384,for (ParameterJacobianProvider provider: jacobianProviders) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,385,if (provider.isSupported(param.getParameterName())) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,386,try {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,387,"provider.computeParameterJacobian(t, y, yDot, param.getParameterName(), dFdP);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,388,for (int i = 0; i < stateDim; ++i) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,389,final double[] dFdYi = dFdY[i];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,390,int zIndex = startIndex;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,391,double s = dFdP[i];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,392,for (int l = 0; l < stateDim; ++l) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,393,s += dFdYi[l] * z[zIndex];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,394,zIndex++;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,396,zDot[startIndex + i] = s;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,425,Dot[startIndex + i] = s;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,398,startIndex += stateDim;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,399,found = true;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,400,break;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,401,} catch (IllegalArgumentException iae) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,427,tartIndex += stateDim;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,428,ound = true;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,429,reak;
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,430, catch (IllegalArgumentException iae) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,434,f (! found) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,435,"hrow new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER,"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,436,aram);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,405,if (! found) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,406,"throw new MathIllegalArgumentException(LocalizedFormats.UNKNOWN_PARAMETER,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,407,param);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,443,** Check compatibility between the main set in the expandable ode and an ordinary ode.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,444, @param expended expandable ode containing a main set
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,445, @param ode single ode to check
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,446, @throws MathIllegalArgumentException if single ode doesn't match the main ode set in the extended ode
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,415,/** Wrapper class to compute jacobian matrices by finite differences for ODE
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,416,*  which do not compute them by themselves.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,448,"rivate void checkCompatibility(final ExpandableFirstOrderDifferentialEquations extended,"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,449,inal FirstOrderDifferentialEquations ode)
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,450,hrows MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,418,private static class MainStateJacobianWrapper implements MainStateJacobianProvider {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,420,/** Raw ODE without jacobians computation skill to be wrapped into a MainStateJacobianProvider. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,421,private final FirstOrderDifferentialEquations ode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,423,/** Steps for finite difference computation of the jacobian df/dy w.r.t. state. */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,424,private final double[] hY;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,426,/** Wrap a {@link FirstOrderDifferentialEquations} into a {@link MainStateJacobianProvider}.
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,427,"* @param ode original ODE problem, without jacobians computation skill"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,428,* @param hY step sizes to compute the jacobian df/dy
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,429,* @see JacobianMatrices#setMainStateSteps(double[])
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,431,"public MainStateJacobianWrapper(final FirstOrderDifferentialEquations ode,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,432,final double[] hY) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,433,this.ode = ode;
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,434,this.hY = hY.clone();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,452,f (!(ode == extended.getMainSet())) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,453,hrow new MathIllegalArgumentException(LocalizedFormats.UNMATCHED_ODE_IN_EXTENDED_SET);
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,437,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,438,public int getDimension() {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,439,return ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,457,** Check array dimensions.
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,458, @param expected expected dimension
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,459, @param array (may be null if expected is 0)
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,460, @throws DimensionMismatchException if the array dimension does not match the expected one
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,462,"rivate void checkDimension(final int expected, final Object array)"
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,463,hrows DimensionMismatchException {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,464,nt arrayDimension = (array == null) ? 0 : Array.getLength(array);
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,465,f (arrayDimension != expected) {
False,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,466,"hrow new DimensionMismatchException(arrayDimension, expected);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,442,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,443,"public void computeDerivatives(double t, double[] y, double[] yDot) {"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,444,"ode.computeDerivatives(t, y, yDot);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,447,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,448,"public void computeMainStateJacobian(double t, double[] y, double[] yDot,"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,449,double[][] dFdY) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,451,final int n = ode.getDimension();
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,452,final double[] tmpDot = new double[n];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,454,for (int j = 0; j < n; ++j) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,455,final double savedYj = y[j];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,456,y[j] += hY[j];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,457,"ode.computeDerivatives(t, y, tmpDot);"
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,458,for (int i = 0; i < n; ++i) {
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,459,dFdY[i][j] = (tmpDot[i] - yDot[i]) / hY[j];
True,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,src/main/java/org/apache/commons/math/ode/JacobianMatrices.java,461,y[j] = savedYj;
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,17,ackage org.apache.commons.math.ode;
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,19,** Wrapper class to compute jacobian matrices by finite differences for ODE
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,20,  which do not compute them by themselves.
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,22, @version $Id$
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,23, @since 3.0
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,25,lass MainStateJacobianWrapper implements MainStateJacobianProvider {
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,27,** Raw ODE without jacobians computation skill to be wrapped into a MainStateJacobianProvider. */
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,28,rivate final FirstOrderDifferentialEquations ode;
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,30,** Steps for finite difference computation of the jacobian df/dy w.r.t. state. */
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,31,rivate final double[] hY;
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,33,** Wrap a {@link FirstOrderDifferentialEquations} into a {@link MainStateJacobianProvider}.
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,34," @param ode original ODE problem, without jacobians computation skill"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,35, @param hY step sizes to compute the jacobian df/dy
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,36, @see JacobianMatrices#setMainStateSteps(double[])
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,38,"ublic MainStateJacobianWrapper(final FirstOrderDifferentialEquations ode,"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,39,inal double[] hY) {
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,40,his.ode = ode;
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,41,his.hY = hY.clone();
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,44,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,45,ublic int getDimension() {
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,46,eturn ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,49,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,50,"ublic void computeDerivatives(double t, double[] y, double[] yDot) {"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,51,"de.computeDerivatives(t, y, yDot);"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,54,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,55,"ublic void computeMainStateJacobian(double t, double[] y, double[] yDot,"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,56,ouble[][] dFdY) {
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,58,inal int n = ode.getDimension();
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,59,inal double[] tmpDot = new double[n];
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,61,or (int j = 0; j < n; ++j) {
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,62,inal double savedYj = y[j];
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,63,[j] += hY[j];
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,64,"de.computeDerivatives(t, y, tmpDot);"
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,65,or (int i = 0; i < n; ++i) {
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,66,FdY[i][j] = (tmpDot[i] - yDot[i]) / hY[j];
False,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/MainStateJacobianWrapper.java,68,[j] = savedYj;
False,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,21,** Interface to compute exactly jacobian matrix for some parameter
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,21,/** Interface to compute exactly Jacobian matrix for some parameter
False,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,29,** Compute the jacobian matrix of ODE with respect to one parameter.
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,29,/** Compute the Jacobian matrix of ODE with respect to one parameter.
False,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,36, @param dFdP placeholder array where to put the jacobian matrix of the
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianProvider.java,36,* @param dFdP placeholder array where to put the Jacobian matrix of the
False,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,23,** Wrapper class to compute jacobian matrices by finite differences for ODE
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,23,/** Wrapper class to compute Jacobian matrices by finite differences for ODE
False,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,34,** Raw ODE without jacobian computation skill to be wrapped into a ParameterJacobianProvider. */
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,34,/** Raw ODE without Jacobian computation skill to be wrapped into a ParameterJacobianProvider. */
False,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,37,** Steps for finite difference computation of the jacobian df/dp w.r.t. parameters. */
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,37,/** Steps for finite difference computation of the Jacobian df/dp w.r.t. parameters. */
False,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,42," @param pode additional problem, without parametre jacobian computation skill"
False,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,43, @param paramsAndSteps parameters and steps to compute the jacobians df/dp
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,42,"* @param pode secondary problem, without parameter Jacobian computation skill"
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,43,* @param paramsAndSteps parameters and steps to compute the Jacobians df/dp
False,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,48,inal Collection<ParameterConfiguration> paramsAndSteps) {
True,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,src/main/java/org/apache/commons/math/ode/ParameterJacobianWrapper.java,48,final ParameterConfiguration[] paramsAndSteps) {
False,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,19,** Interface to compute by finite difference jacobian matrix for some parameter
True,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,src/main/java/org/apache/commons/math/ode/ParameterizedODE.java,19,/** Interface to compute by finite difference Jacobian matrix for some parameter
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,21, This interface allows users to add their own differential equations to a main
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,21,* This interface allows users to add secondary differential equations to a primary
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,25, with a main set of differential equations. One example is optimal control where
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,25,* with a primary set of differential equations. One example is optimal control where
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,29, This interface allows users to add such equations to a main set of {@link
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,29,* This interface allows users to add such equations to a primary set of {@link
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,32, ExpandableFirstOrderDifferentialEquations#addAdditionalEquations(AdditionalEquations)}
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,32,* ExpandableStatefulODE#addSecondaryEquations(SecondaryEquations)}
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,35, @see ExpandableFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,35,* @see ExpandableStatefulODE
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,39,ublic interface AdditionalEquations {
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,39,public interface SecondaryEquations {
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,41,** Get the dimension of the additional state parameters.
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,42, @return dimension of the additional state parameters
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,41,/** Get the dimension of the secondary state parameters.
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,42,* @return dimension of the secondary state parameters
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,46,** Compute the derivatives related to the additional state parameters.
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,46,/** Compute the derivatives related to the secondary state parameters.
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,48, @param y array containing the current value of the main state vector
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,49, @param yDot array containing the derivative of the main state vector
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,50, @param z array containing the current value of the additional state vector
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,51, @param zDot placeholder array where to put the derivative of the additional state vector
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,48,* @param primary array containing the current value of the primary state vector
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,49,* @param primaryDot array containing the derivative of the primary state vector
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,50,* @param secondary array containing the current value of the secondary state vector
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,51,* @param secondaryDot placeholder array where to put the derivative of the secondary state vector
False,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,53,"oid computeDerivatives(double t, double[] y, double[] yDot, double[] z, double[] zDot);"
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,53,"void computeDerivatives(double t, double[] primary, double[] primaryDot,"
True,src/main/java/org/apache/commons/math/ode/AdditionalEquations.java,src/main/java/org/apache/commons/math/ode/SecondaryEquations.java,54,"double[] secondary, double[] secondaryDot);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,23,mport org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,23,import org.apache.commons.math.ode.ExpandableStatefulODE;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,192,"ublic double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,193,"inal double t0, final double[] z0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,194,"inal double t, final double[] z)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,192,"public void integrate(final ExpandableStatefulODE equations, final double t)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,197,"anityChecks(equations, t0, z0, t, z);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,195,"sanityChecks(equations, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,200,inal boolean forward = t > t0;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,198,final boolean forward = t > equations.getTime();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,203,inal int totalDim = equations.getDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,204,inal int mainDim  = equations.getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,205,inal double[] y0  = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,206,inal double[] y   = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,207,"ystem.arraycopy(z0, 0, y0, 0, mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,208,"ystem.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,209,f (y != y0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,210,"ystem.arraycopy(y0, 0, y, 0, totalDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,212,inal double[] yDot = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,201,final double[] y0   = equations.getCompleteState();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,202,final double[] y    = y0.clone();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,203,final double[] yDot = new double[y.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,216,"nterpolator.reinitialize(y, forward);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,207,"interpolator.reinitialize(y, forward,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,208,"equations.getPrimaryMapper(), equations.getSecondaryMappers());"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,225,"tart(t0, y, t);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,217,"start(equations.getTime(), y, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,320,/ dispatch result between main and additional states
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,321,"ystem.arraycopy(y, 0, z, 0, z.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,322,quations.setCurrentAdditionalState(y);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,312,// dispatch results
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,313,equations.setTime(stepStart);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,314,equations.setCompleteState(y);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,324,inal double stopTime = stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java,326,eturn stopTime;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,23,mport org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,23,import org.apache.commons.math.ode.ExpandableStatefulODE;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,89,"ublic abstract double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,90,"inal double t0, final double[] y0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,91,"inal double t, final double[] y)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsIntegrator.java,89,"public abstract void integrate(final ExpandableStatefulODE equations, final double t)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,26,mport org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,26,import org.apache.commons.math.ode.ExpandableStatefulODE;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,209,"ublic double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,210,"inal double t0, final double[] z0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,211,"inal double t, final double[] z)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,209,"public void integrate(final ExpandableStatefulODE equations,final double t)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,214,"anityChecks(equations, t0, z0, t, z);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,212,"sanityChecks(equations, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,217,inal boolean forward = t > t0;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,215,final boolean forward = t > equations.getTime();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,220,inal int totalDim = equations.getDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,221,inal int mainDim  = equations.getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,222,inal double[] y0  = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,223,inal double[] y   = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,224,"ystem.arraycopy(z0, 0, y0, 0, mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,225,"ystem.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,226,f (y != y0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,227,"ystem.arraycopy(y0, 0, y, 0, totalDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,229,inal double[] yDot = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,230,inal double[] yTmp = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,231,inal double[] predictedScaled = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,218,final double[] y0   = equations.getCompleteState();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,219,final double[] y    = y0.clone();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,220,final double[] yDot = new double[y.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,221,final double[] yTmp = new double[y.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,222,final double[] predictedScaled = new double[y.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,236,"nterpolator.reinitialize(y, forward);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,227,"interpolator.reinitialize(y, forward,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,228,"equations.getPrimaryMapper(), equations.getSecondaryMappers());"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,245,"tart(t0, y, t);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,237,"start(equations.getTime(), y, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,298,"ystem.arraycopy(yTmp, 0, y, 0, totalDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,290,"System.arraycopy(yTmp, 0, y, 0, y.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,338,/ dispatch result between main and additional states
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,339,"ystem.arraycopy(y, 0, z, 0, z.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,340,quations.setCurrentAdditionalState(y);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,330,// dispatch results
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,331,equations.setTime(stepStart);
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,332,equations.setCompleteState(y);
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,342,inal double stopTime  = stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,343,tepStart = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,344,tepSize  = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,345,eturn stopTime;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java,334,resetInternalState();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,26,mport org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,26,import org.apache.commons.math.ode.ExpandableStatefulODE;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,46, If the Ordinary Differential Equations is an {@link ExpandableFirstOrderDifferentialEquations
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,46,* If the Ordinary Differential Equations is an {@link ExpandableStatefulODE
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,48, <em>only</em> the {@link ExpandableFirstOrderDifferentialEquations#getMainSet() main part}
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,48,* <em>only</em> the {@link ExpandableStatefulODE#getMainSet() main part}
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,216,** Perform some sanity checks on the integration parameters.
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,217, @param equations differential equations set
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,218, @param t0 start time
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,219, @param y0 state vector at t0
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,220, @param t target time for the integration
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,221, @param y placeholder where to put the state vector
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,222, @exception DimensionMismatchException if some inconsistency is detected
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,223, @exception NumberIsTooSmallException if integration span is too small
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,216,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,226,"rotected void sanityChecks(final ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,227,"inal double t0, final double[] y0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,228,"inal double t, final double[] y)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,218,"protected void sanityChecks(final ExpandableStatefulODE equations, final double t)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,231,"uper.sanityChecks(equations, t0, y0, t, y);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,221,"super.sanityChecks(equations, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,233,ainSetDimension = equations.getMainSetDimension();
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,223,mainSetDimension = equations.getPrimaryMapper().getDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,352,"ublic abstract double integrate (ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,353,"ouble t0, double[] y0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,354,"ouble t, double[] y)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.java,342,"public abstract void integrate (ExpandableStatefulODE equations, double t)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,21,import org.apache.commons.math.ode.EquationsMapper;
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,148,"inal double[] y, final double[][] yDotK, final boolean forward) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,149,"uper.reinitialize(integrator, y, yDotK, forward);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,149,"final double[] y, final double[][] yDotK, final boolean forward,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,150,"final EquationsMapper primaryMapper,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,151,final EquationsMapper[] secondaryMappers) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java,152,"super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,25,import org.apache.commons.math.ode.EquationsMapper;
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,283,"inal double[] y, final double[][] yDotK, final boolean forward) {"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,284,"final double[] y, final double[][] yDotK, final boolean forward,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,285,"final EquationsMapper primaryMapper,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,286,final EquationsMapper[] secondaryMappers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,285,"uper.reinitialize(integrator, y, yDotK, forward);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,288,"super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,457,hrows IOException {
True,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java,460,"throws IOException, ClassNotFoundException {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,22,mport org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,22,import org.apache.commons.math.ode.ExpandableStatefulODE;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,192,"ublic double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,193,"inal double t0, final double[] z0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,194,"inal double t, final double[] z)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,192,"public void integrate(final ExpandableStatefulODE equations, final double t)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,197,"anityChecks(equations, t0, z0, t, z);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,195,"sanityChecks(equations, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,200,inal boolean forward = t > t0;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,198,final boolean forward = t > equations.getTime();
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,203,inal int totalDim = equations.getDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,204,inal int mainDim  = equations.getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,205,inal double[] y0  = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,206,inal double[] y   = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,207,"ystem.arraycopy(z0, 0, y0, 0, mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,208,"ystem.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,201,final double[] y0  = equations.getCompleteState();
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,202,final double[] y = y0.clone();
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,210,f (y != y0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,211,"ystem.arraycopy(y0, 0, y, 0, totalDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,213,inal double[][] yDotK = new double[stages][totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,214,inal double[] yTmp    = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,215,inal double[] yDotTmp = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,204,final double[][] yDotK = new double[stages][y.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,205,final double[] yTmp    = new double[y.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,206,final double[] yDotTmp = new double[y.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,219,"nterpolator.reinitialize(this, yTmp, yDotK, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,220,nterpolator.storeTime(t0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,210,"interpolator.reinitialize(this, yTmp, yDotK, forward,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,211,"equations.getPrimaryMapper(), equations.getSecondaryMappers());"
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,212,interpolator.storeTime(equations.getTime());
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,223,tepStart         = t0;
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,215,stepStart         = equations.getTime();
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,334,/ dispatch result between main and additional states
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,335,"ystem.arraycopy(y, 0, z, 0, z.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,336,quations.setCurrentAdditionalState(y);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,326,// dispatch results
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,327,equations.setTime(stepStart);
True,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,328,equations.setCompleteState(y);
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,338,inal double stopTime = stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java,340,eturn stopTime;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,23,mport org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,23,import org.apache.commons.math.ode.ExpandableStatefulODE;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,544,"ublic double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,545,"inal double t0, final double[] z0, final double t, final double[] z)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,544,"public void integrate(final ExpandableStatefulODE equations, final double t)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,548,"anityChecks(equations, t0, z0, t, z);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,547,"sanityChecks(equations, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,551,inal boolean forward = t > t0;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,550,final boolean forward = t > equations.getTime();
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,554,inal int totalDim = equations.getDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,555,inal int mainDim  = equations.getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,556,inal double[] y0 = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,557,inal double[] y  = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,558,"ystem.arraycopy(z0, 0, y0, 0, mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,559,"ystem.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,560,inal double[] yDot0   = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,561,inal double[] y1      = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,562,inal double[] yTmp    = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,563,inal double[] yTmpDot = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,553,final double[] y0      = equations.getCompleteState();
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,554,final double[] y       = y0.clone();
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,555,final double[] yDot0   = new double[y.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,556,final double[] y1      = new double[y.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,557,final double[] yTmp    = new double[y.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,558,final double[] yTmpDot = new double[y.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,568,iagonal[k] = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,569,1Diag[k] = new double[totalDim];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,563,diagonal[k] = new double[y.length];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,564,y1Diag[k] = new double[y.length];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,609,"MidDots, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,610,nterpolator.storeTime(t0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,604,"yMidDots, forward,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,605,"equations.getPrimaryMapper(),"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,606,equations.getSecondaryMappers());
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,607,interpolator.storeTime(equations.getTime());
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,612,tepStart = t0;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,609,stepStart = equations.getTime();
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,943,/ dispatch result between main and additional states
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,944,"ystem.arraycopy(y, 0, z, 0, z.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,945,quations.setCurrentAdditionalState(y);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,940,// dispatch results
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,941,equations.setTime(stepStart);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,942,equations.setCompleteState(y);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,947,inal double stopTime = stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java,949,eturn stopTime;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,24,import org.apache.commons.math.ode.EquationsMapper;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,97,** Interpolation polynoms. */
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,98,rivate double[][] polynoms;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,98,/** Interpolation polynomials. */
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,99,private double[][] polynomials;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,103,** Degree of the interpolation polynoms. */
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,104,/** Degree of the interpolation polynomials. */
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,130,* @param primaryMapper equations mapper for the primary equations set
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,131,* @param secondaryMappers equations mappers for the secondary equations sets
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,133,inal boolean forward) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,136,"final boolean forward,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,137,"final EquationsMapper primaryMapper,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,138,final EquationsMapper[] secondaryMappers) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,135,"uper(y, forward);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,140,"super(y, forward, primaryMapper, secondaryMappers);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,164,/ copy the interpolation polynoms (up to the current degree only)
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,165,f (interpolator.polynoms == null) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,166,olynoms = null;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,169,// copy the interpolation polynomials (up to the current degree only)
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,170,if (interpolator.polynomials == null) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,171,polynomials = null;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,170,or (int i = 0; i < polynoms.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,171,olynoms[i] = new double[dimension];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,172,"ystem.arraycopy(interpolator.polynoms[i], 0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,173,"olynoms[i], 0, dimension);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,175,for (int i = 0; i < polynomials.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,176,polynomials[i] = new double[dimension];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,177,"System.arraycopy(interpolator.polynomials[i], 0,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,178,"polynomials[i], 0, dimension);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,182, interpolation polynoms up to the given degree
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,187,* interpolation polynomials up to the given degree
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,188,olynoms      = null;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,193,polynomials   = null;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,194,f (polynoms != null) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,195,"ystem.arraycopy(polynoms, 0, newPols, 0, polynoms.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,196,or (int i = polynoms.length; i < newPols.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,199,if (polynomials != null) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,200,"System.arraycopy(polynomials, 0, newPols, 0, polynomials.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,201,for (int i = polynomials.length; i < newPols.length; ++i) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,204,olynoms = newPols;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,209,polynomials = newPols;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,240,f ((polynoms == null) || (polynoms.length <= (mu + 4))) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,245,if ((polynomials == null) || (polynomials.length <= (mu + 4))) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,254,olynoms[0][i] = currentState[i];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,255,olynoms[1][i] = ydiff;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,256,olynoms[2][i] = aspl;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,257,olynoms[3][i] = bspl;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,259,polynomials[0][i] = currentState[i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,260,polynomials[1][i] = ydiff;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,261,polynomials[2][i] = aspl;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,262,polynomials[3][i] = bspl;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,265,olynoms[4][i] = 16 * (yMidDots[0][i] - ph0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,270,polynomials[4][i] = 16 * (yMidDots[0][i] - ph0);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,269,olynoms[5][i] = 16 * (yMidDots[1][i] - ph1);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,274,polynomials[5][i] = 16 * (yMidDots[1][i] - ph1);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,273,olynoms[6][i] = 16 * (yMidDots[2][i] - ph2 + polynoms[4][i]);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,278,polynomials[6][i] = 16 * (yMidDots[2][i] - ph2 + polynomials[4][i]);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,277,olynoms[7][i] = 16 * (yMidDots[3][i] - ph3 + 3 * polynoms[5][i]);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,282,polynomials[7][i] = 16 * (yMidDots[3][i] - ph3 + 3 * polynomials[5][i]);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,282,olynoms[j+4][i] =
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,283,6 * (yMidDots[j][i] + fac1 * polynoms[j+2][i] - fac2 * polynoms[j][i]);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,287,polynomials[j+4][i] =
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,288,16 * (yMidDots[j][i] + fac1 * polynomials[j+2][i] - fac2 * polynomials[j][i]);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,301,inal double e = polynoms[currentDegree][i] / scale[i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,306,final double e = polynomials[currentDegree][i] / scale[i];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,312,inal double oneMinusThetaH) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,317,final double oneMinusThetaH) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,327,inal double p0 = polynoms[0][i];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,328,inal double p1 = polynoms[1][i];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,329,inal double p2 = polynoms[2][i];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,330,inal double p3 = polynoms[3][i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,332,final double p0 = polynomials[0][i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,333,final double p1 = polynomials[1][i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,334,final double p2 = polynomials[2][i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,335,final double p3 = polynomials[3][i];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,336,ouble c = polynoms[currentDegree][i];
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,341,double c = polynomials[currentDegree][i];
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,340, = polynoms[j][i] + c * d * theta05;
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,345,c = polynomials[j][i] + c * d * theta05;
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,370,ut.writeDouble(polynoms[k][l]);
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,375,out.writeDouble(polynomials[k][l]);
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,379,hrows IOException {
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,384,"throws IOException, ClassNotFoundException {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,392,olynoms[k][l] = in.readDouble();
True,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.java,397,polynomials[k][l] = in.readDouble();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,24,mport org.apache.commons.math.ode.ExpandableFirstOrderDifferentialEquations;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,24,import org.apache.commons.math.ode.ExpandableStatefulODE;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,93,"ublic double integrate(final ExpandableFirstOrderDifferentialEquations equations,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,94,"inal double t0, final double[] z0,"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,95,"inal double t, final double[] z)"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,93,"public void integrate(final ExpandableStatefulODE equations, final double t)"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,98,"anityChecks(equations, t0, z0, t, z);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,96,"sanityChecks(equations, t);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,101,inal boolean forward = t > t0;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,99,final boolean forward = t > equations.getTime();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,104,inal int totalDim = equations.getDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,105,inal int mainDim  = equations.getMainSetDimension();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,106,inal double[] y0  = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,107,inal double[] y   = new double[totalDim];
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,108,"ystem.arraycopy(z0, 0, y0, 0, mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,109,"ystem.arraycopy(equations.getCurrentAdditionalStates(), 0, y0, mainDim, totalDim - mainDim);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,110,inal int stages = c.length + 1;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,111,f (y != y0) {
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,112,"ystem.arraycopy(y0, 0, y, 0, y0.length);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,102,final double[] y0      = equations.getCompleteState();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,103,final double[] y       = y0.clone();
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,104,final int stages       = c.length + 1;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,123,"nterpolator.reinitialize(this, yTmp, yDotK, forward);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,124,nterpolator.storeTime(t0);
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,114,"interpolator.reinitialize(this, yTmp, yDotK, forward,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,115,"equations.getPrimaryMapper(), equations.getSecondaryMappers());"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,116,interpolator.storeTime(equations.getTime());
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,127,tepStart = t0;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,119,stepStart = equations.getTime();
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,188,/ dispatch result between main and additional states
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,189,"ystem.arraycopy(y, 0, z, 0, z.length);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,190,quations.setCurrentAdditionalState(y);
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,180,// dispatch results
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,181,equations.setTime(stepStart);
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,182,equations.setCompleteState(y);
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,192,inal double stopTime = stepStart;
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java,195,eturn stopTime;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,25,import org.apache.commons.math.ode.EquationsMapper;
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,124,* @param primaryMapper equations mapper for the primary equations set
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,125,* @param secondaryMappers equations mappers for the secondary equations sets
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,125,"inal double[] y, final double[][] yDotArray, final boolean forward) {"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,126,"einitialize(y, forward);"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,128,"final double[] y, final double[][] yDotArray, final boolean forward,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,129,"final EquationsMapper primaryMapper,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,130,final EquationsMapper[] secondaryMappers) {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,131,"reinitialize(y, forward, primaryMapper, secondaryMappers);"
False,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,156,hrows IOException {
True,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java,161,"throws IOException, ClassNotFoundException {"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,24,import org.apache.commons.math.ode.EquationsMapper;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,61,/** interpolated primary state */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,62,protected double[] interpolatedPrimaryState;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,64,/** interpolated primary derivatives */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,65,protected double[] interpolatedPrimaryDerivatives;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,67,/** interpolated secondary state */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,68,protected double[][] interpolatedSecondaryState;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,70,/** interpolated secondary derivatives */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,71,protected double[][] interpolatedSecondaryDerivatives;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,94,/** Equations mapper for the primary equations set. */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,95,private EquationsMapper primaryMapper;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,97,/** Equations mappers for the secondary equations sets. */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,98,private EquationsMapper[] secondaryMappers;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,93,lobalPreviousTime      = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,94,lobalCurrentTime       = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,95,oftPreviousTime        = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,96,oftCurrentTime         = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,97,                       = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,98,nterpolatedTime        = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,99,urrentState            = null;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,100,nterpolatedState       = null;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,101,nterpolatedDerivatives = null;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,102,inalized               = false;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,103,his.forward            = true;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,104,his.dirtyState         = true;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,107,** Simple constructor.
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,108, @param y reference to the integrator array holding the state at
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,109, the end of the step
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,110, @param forward integration direction indicator
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,112,"rotected AbstractStepInterpolator(final double[] y, final boolean forward) {"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,118,currentState       = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,119,finalized          = false;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,120,this.forward       = true;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,121,this.dirtyState    = true;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,122,primaryMapper      = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,123,secondaryMappers   = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,124,"allocateInterpolatedArrays(-1, null, null);"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,121,urrentState            = y;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,122,nterpolatedState       = new double[y.length];
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,123,nterpolatedDerivatives = new double[y.length];
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,125,inalized         = false;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,126,his.forward      = forward;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,127,his.dirtyState   = true;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,127,/** Simple constructor.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,128,* @param y reference to the integrator array holding the state at
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,129,* the end of the step
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,130,* @param forward integration direction indicator
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,131,* @param primaryMapper equations mapper for the primary equations set
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,132,* @param secondaryMappers equations mappers for the secondary equations sets
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,134,"protected AbstractStepInterpolator(final double[] y, final boolean forward,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,135,"final EquationsMapper primaryMapper,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,136,final EquationsMapper[] secondaryMappers) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,138,globalPreviousTime    = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,139,globalCurrentTime     = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,140,softPreviousTime      = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,141,softCurrentTime       = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,142,h                     = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,143,interpolatedTime      = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,144,currentState          = y;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,145,finalized             = false;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,146,this.forward          = forward;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,147,this.dirtyState       = true;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,148,this.primaryMapper    = primaryMapper;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,149,this.secondaryMappers = (secondaryMappers == null) ? null : secondaryMappers.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,150,"allocateInterpolatedArrays(y.length, primaryMapper, secondaryMappers);"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,157,f (interpolator.currentState != null) {
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,158,urrentState            = interpolator.currentState.clone();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,159,nterpolatedState       = interpolator.interpolatedState.clone();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,160,nterpolatedDerivatives = interpolator.interpolatedDerivatives.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,180,if (interpolator.currentState == null) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,181,currentState = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,182,"allocateInterpolatedArrays(-1, null, null);"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,162,urrentState            = null;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,163,nterpolatedState       = null;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,164,nterpolatedDerivatives = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,184,currentState                     = interpolator.currentState.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,185,interpolatedState                = interpolator.interpolatedState.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,186,interpolatedDerivatives          = interpolator.interpolatedDerivatives.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,187,interpolatedPrimaryState         = interpolator.interpolatedPrimaryState.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,188,interpolatedPrimaryDerivatives   = interpolator.interpolatedPrimaryDerivatives.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,189,interpolatedSecondaryState       = new double[interpolator.interpolatedSecondaryState.length][];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,190,interpolatedSecondaryDerivatives = new double[interpolator.interpolatedSecondaryDerivatives.length][];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,191,for (int i = 0; i < interpolatedSecondaryState.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,192,interpolatedSecondaryState[i]       = interpolator.interpolatedSecondaryState[i].clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,193,interpolatedSecondaryDerivatives[i] = interpolator.interpolatedSecondaryDerivatives[i].clone();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,167,inalized  = interpolator.finalized;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,168,orward    = interpolator.forward;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,169,irtyState = interpolator.dirtyState;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,197,finalized        = interpolator.finalized;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,198,forward          = interpolator.forward;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,199,dirtyState       = interpolator.dirtyState;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,200,primaryMapper    = interpolator.primaryMapper;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,201,secondaryMappers = (interpolator.secondaryMappers == null) ?
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,202,null : interpolator.secondaryMappers.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,206,/** Allocate the various interpolated states arrays.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,207,* @param dimension total dimension (negative if arrays should be set to null)
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,208,* @param primaryMapper equations mapper for the primary equations set
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,209,* @param secondaryMappers equations mappers for the secondary equations sets
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,211,"private void allocateInterpolatedArrays(final int dimension,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,212,"final EquationsMapper primaryMapper,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,213,final EquationsMapper[] secondaryMappers) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,214,if (dimension < 0) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,215,interpolatedState                = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,216,interpolatedDerivatives          = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,217,interpolatedPrimaryState         = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,218,interpolatedPrimaryDerivatives   = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,219,interpolatedSecondaryState       = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,220,interpolatedSecondaryDerivatives = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,221,} else {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,222,interpolatedState                = new double[dimension];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,223,interpolatedDerivatives          = new double[dimension];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,224,interpolatedPrimaryState         = new double[primaryMapper.getDimension()];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,225,interpolatedPrimaryDerivatives   = new double[primaryMapper.getDimension()];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,226,if (secondaryMappers == null) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,227,interpolatedSecondaryState       = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,228,interpolatedSecondaryDerivatives = null;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,229,} else {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,230,interpolatedSecondaryState       = new double[secondaryMappers.length][];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,231,interpolatedSecondaryDerivatives = new double[secondaryMappers.length][];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,232,for (int i = 0; i < secondaryMappers.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,233,interpolatedSecondaryState[i]       = new double[secondaryMappers[i].getDimension()];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,234,interpolatedSecondaryDerivatives[i] = new double[secondaryMappers[i].getDimension()];
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,174, @param y reference to the integrator array holding the state at
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,175, the end of the step
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,241,* @param y reference to the integrator array holding the state at the end of the step
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,243,* @param primaryMapper equations mapper for the primary equations set
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,244,* @param secondaryMappers equations mappers for the secondary equations sets
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,178,"rotected void reinitialize(final double[] y, final boolean isForward) {"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,180,lobalPreviousTime = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,181,lobalCurrentTime  = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,182,oftPreviousTime   = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,183,oftCurrentTime    = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,184,                  = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,185,nterpolatedTime   = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,187,urrentState            = y;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,188,nterpolatedState       = new double[y.length];
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,189,nterpolatedDerivatives = new double[y.length];
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,191,inalized         = false;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,192,his.forward      = isForward;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,193,his.dirtyState   = true;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,246,"protected void reinitialize(final double[] y, final boolean isForward,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,247,"final EquationsMapper primaryMapper,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,248,final EquationsMapper[] secondaryMappers) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,250,globalPreviousTime    = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,251,globalCurrentTime     = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,252,softPreviousTime      = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,253,softCurrentTime       = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,254,h                     = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,255,interpolatedTime      = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,256,currentState          = y;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,257,finalized             = false;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,258,this.forward          = isForward;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,259,this.dirtyState       = true;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,260,this.primaryMapper    = primaryMapper;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,261,this.secondaryMappers = secondaryMappers.clone();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,262,"allocateInterpolatedArrays(y.length, primaryMapper, secondaryMappers);"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,331,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,332,ublic double[] getInterpolatedState() {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,400,/** Lazy evaluation of complete interpolated state.
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,402,private void evaluateCompleteInterpolatedState() {
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,342,eturn interpolatedState;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,412,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,413,public double[] getInterpolatedState() {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,414,evaluateCompleteInterpolatedState();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,415,"primaryMapper.extractEquationData(interpolatedState,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,416,interpolatedPrimaryState);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,417,return interpolatedPrimaryState;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,422,evaluateCompleteInterpolatedState();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,423,"primaryMapper.extractEquationData(interpolatedDerivatives,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,424,interpolatedPrimaryDerivatives);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,425,return interpolatedPrimaryDerivatives;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,349,/ lazy evaluation of the state
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,350,f (dirtyState) {
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,351,inal double oneMinusThetaH = globalCurrentTime - interpolatedTime;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,352,inal double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,353,"omputeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);"
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,354,irtyState = false;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,357,eturn interpolatedDerivatives;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,428,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,429,public double[] getInterpolatedSecondaryState(final int index) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,430,evaluateCompleteInterpolatedState();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,431,"secondaryMappers[index].extractEquationData(interpolatedState,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,432,interpolatedSecondaryState[index]);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,433,return interpolatedSecondaryState[index];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,436,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,437,public double[] getInterpolatedSecondaryDerivatives(final int index) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,438,evaluateCompleteInterpolatedState();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,439,"secondaryMappers[index].extractEquationData(interpolatedDerivatives,"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,440,interpolatedSecondaryDerivatives[index]);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,441,return interpolatedSecondaryDerivatives[index];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,525,out.writeObject(primaryMapper);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,526,out.write(secondaryMappers.length);
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,527,for (final EquationsMapper  mapper : secondaryMappers) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,528,out.writeObject(mapper);
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,471, @return interpolated time be set later by the caller
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,559,* @return interpolated time to be set later by the caller
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,475,hrows IOException {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,563,"throws IOException, ClassNotFoundException {"
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,572,primaryMapper       = (EquationsMapper) in.readObject();
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,573,secondaryMappers    = new EquationsMapper[in.read()];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,574,for (int i = 0; i < secondaryMappers.length; ++i) {
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,575,secondaryMappers[i] = (EquationsMapper) in.readObject();
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,496,nterpolatedTime        = Double.NaN;
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,497,nterpolatedState       = (dimension < 0) ? null : new double[dimension];
False,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,498,nterpolatedDerivatives = (dimension < 0) ? null : new double[dimension];
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,589,interpolatedTime = Double.NaN;
True,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java,590,"allocateInterpolatedArrays(dimension, primaryMapper, secondaryMappers);"
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,26,import org.apache.commons.math.ode.EquationsMapper;
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,108,* @param primaryMapper equations mapper for the primary equations set
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,109,* @param secondaryMappers equations mappers for the secondary equations sets
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,109,"ublic void reinitialize(final double[] y, final boolean forward) {"
False,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,110,"uper.reinitialize(y, forward);"
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,112,"public void reinitialize(final double[] y, final boolean forward,"
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,113,"final EquationsMapper primaryMapper,"
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,114,final EquationsMapper[] secondaryMappers) {
True,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java,115,"super.reinitialize(y, forward, primaryMapper, secondaryMappers);"
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,104,/** Get the interpolated secondary state corresponding to the secondary equations.
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,105,"* <p>The returned vector is a reference to a reused array, so"
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,106,* it should not be modified and it should be copied if it needs
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,107,* to be preserved across several calls.</p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,108,"* @param index index of the secondary set, as returned by {@link"
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,109,* org.apache.commons.math.ode.ExpandableStatefulODE#addSecondaryEquations(
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,110,* org.apache.commons.math.ode.SecondaryEquations)
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,111,* ExpandableStatefulODE.addSecondaryEquations(SecondaryEquations)}
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,112,* @return interpolated secondary state at the current interpolation date
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,113,* @see #getInterpolatedState()
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,114,* @see #getInterpolatedDerivatives()
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,115,* @see #getInterpolatedSecondaryDerivatives(String)
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,116,* @see #setInterpolatedTime(double)
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,117,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,119,double[] getInterpolatedSecondaryState(int index);
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,121,/** Get the interpolated secondary derivatives corresponding to the secondary equations.
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,122,"* <p>The returned vector is a reference to a reused array, so"
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,123,* it should not be modified and it should be copied if it needs
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,124,* to be preserved across several calls.</p>
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,125,"* @param index index of the secondary set, as returned by {@link"
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,126,* org.apache.commons.math.ode.ExpandableStatefulODE#addSecondaryEquations(
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,127,* org.apache.commons.math.ode.SecondaryEquations)
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,128,* ExpandableStatefulODE.addSecondaryEquations(SecondaryEquations)}
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,129,* @return interpolated secondary derivatives at the current interpolation date
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,130,* @see #getInterpolatedState()
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,131,* @see #getInterpolatedDerivatives()
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,132,* @see #getInterpolatedSecondaryState(String)
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,133,* @see #setInterpolatedTime(double)
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,134,* @since 3.0
True,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,src/main/java/org/apache/commons/math/ode/sampling/StepInterpolator.java,136,double[] getInterpolatedSecondaryDerivatives(int index);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,88,xpandableFirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,88,AbstractIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,100,xpandableFirstOrderDifferentialEquations efode = new ExpandableFirstOrderDifferentialEquations(brusselator);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,101,"acobianMatrices jacob = new JacobianMatrices(efode, brusselator);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,101,"JacobianMatrices jacob = new JacobianMatrices(brusselator, new double[] { hY, hY }, ParamBrusselator.B);"
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,103,acob.selectParameters(ParamBrusselator.B);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,104,"acob.setMainStateSteps(new double[] { hY, hY });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,106,ExpandableStatefulODE efode = new ExpandableStatefulODE(brusselator);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,107,efode.setTime(0);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,108,efode.setPrimaryState(z);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,109,jacob.registerVariationalEquations(efode);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,108,"nteg.integrate(efode, 0, z, 20.0, z);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,112,"integ.integrate(efode, 20.0);"
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,126,xpandableFirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,130,AbstractIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,135,xpandableFirstOrderDifferentialEquations efode = new ExpandableFirstOrderDifferentialEquations(brusselator);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,136,"acobianMatrices jacob = new JacobianMatrices(efode, brusselator);"
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,137,acob.setParameterJacobianProvider(brusselator);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,138,acob.selectParameters(Brusselator.B);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,140,"JacobianMatrices jacob = new JacobianMatrices(brusselator, Brusselator.B);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,141,jacob.addParameterJacobianProvider(brusselator);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,144,ExpandableStatefulODE efode = new ExpandableStatefulODE(brusselator);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,145,efode.setTime(0);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,146,efode.setPrimaryState(z);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,147,jacob.registerVariationalEquations(efode);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,141,"nteg.integrate(efode, 0, z, 20.0, z);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,150,"integ.integrate(efode, 20.0);"
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,159,xpandableFirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,168,AbstractIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,164,xpandableFirstOrderDifferentialEquations efode = new ExpandableFirstOrderDifferentialEquations(circle);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,165,"acobianMatrices jacob = new JacobianMatrices(efode, circle);"
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,166,acob.setParameterJacobianProvider(circle);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,167,"acob.selectParameters(Circle.CX, Circle.CY, Circle.OMEGA);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,173,"JacobianMatrices jacob = new JacobianMatrices(circle, Circle.CX, Circle.CY, Circle.OMEGA);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,174,jacob.addParameterJacobianProvider(circle);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,180,ExpandableStatefulODE efode = new ExpandableStatefulODE(circle);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,181,efode.setTime(0);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,182,efode.setPrimaryState(y);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,183,jacob.registerVariationalEquations(efode);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,175,"nteg.integrate(efode, 0, y, t, y);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,188,"integ.integrate(efode, t);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,189,y = efode.getPrimaryState();
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,207,xpandableFirstOrderIntegrator integ =
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,221,AbstractIntegrator integ =
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,215,xpandableFirstOrderDifferentialEquations efode = new ExpandableFirstOrderDifferentialEquations(pcircle);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,220,"acobianMatrices jacob = new JacobianMatrices(efode, pcircle);"
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,221,acob.setParameterJacobianProvider(pcircle);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,232,"JacobianMatrices jacob = new JacobianMatrices(pcircle, new double[] { hY, hY },"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,233,"Circle.CX, Circle.OMEGA);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,234,jacob.addParameterJacobianProvider(pcircle);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,223,"acob.selectParameters(Circle.CX, Circle.OMEGA);"
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,224,"acob.setMainStateSteps(new double[] { hY, hY });"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,242,ExpandableStatefulODE efode = new ExpandableStatefulODE(pcircle);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,243,efode.setTime(0);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,244,efode.setPrimaryState(y);
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,245,jacob.registerVariationalEquations(efode);
False,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,233,"nteg.integrate(efode, 0, y, t, y);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,250,"integ.integrate(efode, t);"
True,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,src/test/java/org/apache/commons/math/ode/JacobianMatricesTest.java,251,y = efode.getPrimaryState();
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,29,import org.apache.commons.math.ode.EquationsMapper;
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,45,"nterpolator.reinitialize(new DummyIntegrator(interpolator), y, yDot, true);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,46,"interpolator.reinitialize(new DummyIntegrator(interpolator), y, yDot, true,"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,47,"new EquationsMapper(0, y.length),"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,48,new EquationsMapper[0]);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,66,"nterpolator.reinitialize(new DummyIntegrator(interpolator), y, yDot, true);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,69,"interpolator.reinitialize(new DummyIntegrator(interpolator), y, yDot, true,"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,70,"new EquationsMapper(0, y.length),"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,71,new EquationsMapper[0]);
False,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,99,"nterpolator.reinitialize(new DummyIntegrator(interpolator), y, yDot, true);"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,104,"interpolator.reinitialize(new DummyIntegrator(interpolator), y, yDot, true,"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,105,"new EquationsMapper(0, y.length),"
True,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,src/test/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolatorTest.java,106,new EquationsMapper[0]);
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,24,import org.apache.commons.math.ode.EquationsMapper;
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,70,* @param primaryMapper equations mapper for the primary equations set
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,71,* @param secondaryMappers equations mappers for the secondary equations sets
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,70,"uper(y, forward);"
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,74,"super(y, forward, new EquationsMapper(0, y.length), new EquationsMapper[0]);"
False,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,131,hrows IOException {
True,src/main/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,src/test/java/org/apache/commons/math/ode/sampling/DummyStepInterpolator.java,135,"throws IOException, ClassNotFoundException {"

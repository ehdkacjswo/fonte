is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/exception/MathParseException.java,src/main/java/org/apache/commons/math/exception/MathParseException.java,19,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/exception/MathParseException.java,src/main/java/org/apache/commons/math/exception/MathParseException.java,20,mport org.apache.commons.math.exception.util.ExceptionContext;
True,src/main/java/org/apache/commons/math/exception/MathParseException.java,src/main/java/org/apache/commons/math/exception/MathParseException.java,20,import org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,1059, Subtracts the value of a {@code long} from the value of this
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,1059,* Subtracts the value of a {@code long} from the value of this
False,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,1064, @return a {@ code BigFraction} instance with the resulting values.
True,src/main/java/org/apache/commons/math/fraction/BigFraction.java,src/main/java/org/apache/commons/math/fraction/BigFraction.java,1064,* @return a {@code BigFraction} instance with the resulting values.
False,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,39, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,39,* @param <S> Type of the space.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,40,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,222,ublic abstract Vector<S> parse(String source);
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,223,public abstract Vector<S> parse(String source) throws MathParseException;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,25,mport org.apache.commons.math.geometry.partitioning.Region;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,29, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,28,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,76, Region#checkPoint(org.apache.commons.math.geometry.partitioning.Point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,75,* org.apache.commons.math.geometry.partitioning.Region#checkPoint(org.apache.commons.math.geometry.Vector)
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,21,mport org.apache.commons.math.geometry.partitioning.Region;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,22,mport org.apache.commons.math.geometry.partitioning.SubHyperplane;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,28, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,26,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,67, implementation of a {@link Region Region} (always the same
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,68, instance). This implementation is only used to allow the {@link
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,69, SubHyperplane SubHyperplane} class implementation to work
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,70," properly, it should <em>not</em> be used otherwise.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,65,* implementation of a {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,66,* org.apache.commons.math.geometry.partitioning.Region Region}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,67,* (always the same instance). This implementation is only used to
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,68,* allow the {@link
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,69,* org.apache.commons.math.geometry.partitioning.SubHyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,70,"* SubHyperplane} class implementation to work properly, it should"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,71,* <em>not</em> be used otherwise.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,85,** Check if the instance has the same orientation as another hyperplane.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,86, <p>This method is expected to be called on parallel hyperplanes
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,87, (i.e. when the {@link #side side} method would return {@link
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,88, org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER}
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,89, for some sub-hyperplane having the specified hyperplane
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,90, as its underlying hyperplane). The method should <em>not</em>
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,91," re-check for parallelism, only for orientation, typically by"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,92, testing something like the sign of the dot-products of
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,93, normals.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,94, @param other other hyperplane to check against the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,95, @return true if the instance and the other hyperplane have
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,96, the same orientation
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,86,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,24,** This class represents sub-hyperplane for {@link OrOrientedPoint}.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,24,/** This class represents sub-hyperplane for {@link OrientedPoint}.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,28, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,28,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,59, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,59,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,230,ublic double getOffset(final Hyperplane<Euclidean2D> hyperplane) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,231,ine line = (Line) hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,230,public double getOffset(final Line line) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,236,** Get the offset (oriented distance) of a point to the line.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,237," <p>The offset is 0 if the point belongs to the line, it is"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,238, positive if the point is on the right side of the line and
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,239," negative if it is on the left side, according to its natural"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,240, orientation.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,241, @param point point to check (must be a {@link Vector2D Vector2D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,242, @return offset of the point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,235,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,249,** Check if the instance has the same orientation as another hyperplane.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,250, <p>This method is expected to be called on parallel hyperplanes
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,251, (i.e. when the {@link #side side} method would return {@link
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,252, org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER HYPER}
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,253, for some sub-hyperplane having the specified hyperplane
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,254, as its underlying hyperplane). The method should <em>not</em>
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,255," re-check for parallelism, only for orientation, typically by"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,256, testing something like the sign of the dot-products of
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,257, normals.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,258, @param other other hyperplane to check against the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,259, @return true if the instance and the other hyperplane have
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,260, the same orientation
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,241,/** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,44, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,44,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,92,inal IntervalsSet region =
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,92,final IntervalsSet region =
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,27,mport org.apache.commons.math.geometry.partitioning.Region;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,34, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,33,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,74, Region#checkPoint(org.apache.commons.math.geometry.partitioning.Point)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,73,* org.apache.commons.math.geometry.partitioning.Region#checkPoint(org.apache.commons.math.geometry.Vector)
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,33, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,33,* @version $Id$
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,139,/** Build a convex region from an array of bounding hyperplanes.
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,140,"* @param hyperplanes array of bounding hyperplanes (if null, an"
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,141,* empty region will be built)
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,143,public AbstractRegion(final Hyperplane<S>[] hyperplanes) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,144,if ((hyperplanes == null) || (hyperplanes.length == 0)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,145,tree = new BSPTree<S>(Boolean.FALSE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,146,} else {
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,148,// use the first hyperplane to build the right class
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,149,tree = hyperplanes[0].wholeSpace().getTree(false);
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,151,// chop off parts of the space
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,152,BSPTree<S> node = tree;
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,153,node.setAttribute(Boolean.TRUE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,154,for (final Hyperplane<S> hyperplane : hyperplanes) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,155,if (node.insertCut(hyperplane)) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,156,node.setAttribute(null);
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,157,node.getPlus().setAttribute(Boolean.FALSE);
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,158,node = node.getMinus();
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,159,node.setAttribute(Boolean.TRUE);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,190,** Build a convex region from an array of bounding hyperplanes.
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,191," @param hyperplanes array of bounding hyperplanes (if null, an"
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,192, empty region will be built)
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,193," @return a new convex region, or null if the collection is empty"
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,195,ublic AbstractRegion(final Hyperplane<S>[] hyperplanes) {
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,196,f ((hyperplanes == null) || (hyperplanes.length == 0)) {
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,197,ree = new BSPTree<S>(Boolean.FALSE);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,198, else {
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,200,/ use the first hyperplane to build the right class
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,201,ree = hyperplanes[0].wholeSpace().getTree(false);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,203,/ chop off parts of the space
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,204,SPTree<S> node = tree;
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,205,ode.setAttribute(Boolean.TRUE);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,206,or (final Hyperplane<S> hyperplane : hyperplanes) {
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,207,f (node.insertCut(hyperplane)) {
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,208,ode.setAttribute(null);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,209,ode.getPlus().setAttribute(Boolean.FALSE);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,210,ode = node.getMinus();
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,211,ode.setAttribute(Boolean.TRUE);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,260," Location#INSIDE}, {@link Location#OUTSIDE} or {@link Location#BOUNDARY}"
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,259,"* Region.Location#INSIDE INSIDE}, {@link Region.Location#OUTSIDE"
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractRegion.java,260,* OUTSIDE} or {@link Region.Location#BOUNDARY BOUNDARY}
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,32,* @param <T> Type of the embedded sub-space.
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,56, @param hyperplane underlying hyperplane
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,57, @param remainingRegion remaining region of the hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,57,* @param hyper underlying hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,58,* @param remaining remaining region of the hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,59,* @return a new sub-hyperplane
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,59,"rotected abstract AbstractSubHyperplane<S, T> buildNew(final Hyperplane<S> hyperplane,"
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,60,inal Region<T> remainingRegion);
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,61,"protected abstract AbstractSubHyperplane<S, T> buildNew(final Hyperplane<S> hyper,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,62,final Region<T> remaining);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,147,ublic abstract Side side(Hyperplane<S> hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,149,public abstract Side side(Hyperplane<S> hyper);
False,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,150,ublic abstract SplitSubHyperplane<S> split(Hyperplane<S> hyperplane);
True,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/AbstractSubHyperplane.java,152,public abstract SplitSubHyperplane<S> split(Hyperplane<S> hyper);
False,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,59, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,59,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,430, @param <SpacePoint> Type of the space points.
False,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,431, @param <SubSpacePoint> Type of the sub-space points.
False,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,432, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTree.java,430,* @param <S> Type of the space.
False,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,43, @param <SpacePoint> Type of the space points.
False,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,44, @param <SubSpacePoint> Type of the sub-space points.
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,43,* @param <S> Type of the space.
False,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,49, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BSPTreeVisitor.java,48,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,31, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,31,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,40,inal SubHyperplane<S> plusOutside;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,40,private final SubHyperplane<S> plusOutside;
False,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,46,inal SubHyperplane<S> plusInside;
True,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundaryAttribute.java,46,private final SubHyperplane<S> plusInside;
False,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,23, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,23,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,47,f (attribute.plusOutside != null) {
False,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,48,oundarySize += attribute.plusOutside.getSize();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,47,if (attribute.getPlusOutside() != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,48,boundarySize += attribute.getPlusOutside().getSize();
False,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,50,f (attribute.plusInside != null) {
False,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,51,oundarySize += attribute.plusInside.getSize();
True,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,50,if (attribute.getPlusInside() != null) {
True,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,src/main/java/org/apache/commons/math/geometry/partitioning/BoundarySizeVisitor.java,51,boundarySize += attribute.getPlusInside().getSize();
False,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,33, @param <SpacePoint> Type of the space points.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,33,* @param <S> Type of the space.
False,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,35, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,35,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,59, <p>This method is expected to be called on parallel hyperplanes
False,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,60, (i.e. when the {@link #side side} method would return {@link
False,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,61, Side#HYPER} for some sub-hyperplane having the specified hyperplane
False,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,62, as its underlying hyperplane). The method should <em>not</em>
False,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,63," re-check for parallelism, only for orientation, typically by"
False,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,64, testing something like the sign of the dot-products of
False,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,65, normals.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,59,* <p>This method is expected to be called on parallel hyperplanes. The
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,60,"* method should <em>not</em> re-check for parallelism, only for"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,61,"* orientation, typically by testing something like the sign of the"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/Hyperplane.java,62,* dot-products of normals.</p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,44, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,44,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,176," @return one of {@link Hyperplane.Side#PLUS Hyperplane.Side.PLUS}, {@link"
False,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,177," Hyperplane.Side#MINUS Hyperplane.Side.MINUS}, {@link Hyperplane.Side#BOTH"
False,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,178, Hyperplane.Side.BOTH} or {@link Hyperplane.Side#HYPER Hyperplane.Side.HYPER}
False,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,179, (the latter result can occur only if the tree contains only one
False,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,180, cut hyperplane)
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,176,"* @return one of {@link Side#PLUS Side.PLUS}, {@link Side#MINUS"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,177,"* Side.MINUS}, {@link Side#BOTH Side.BOTH} or {@link Side#HYPER"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,178,* Side.HYPER} (the latter result can occur only if the tree
True,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,src/main/java/org/apache/commons/math/geometry/partitioning/Region.java,179,* contains only one cut hyperplane)
False,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,33, @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,33,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,86,** Class holding the results of the {@link Hyperplane#split Hyperplane.split}
False,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,87, method.
False,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,88, @param <S> Type of the embedding space.
False,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,89, @param <T> Type of the embedded sub-space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,86,/** Class holding the results of the {@link #split split} method.
True,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,src/main/java/org/apache/commons/math/geometry/partitioning/SubHyperplane.java,87,* @param <U> Type of the embedding space.
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,317,nt count;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,317,private int count;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,320,inal double[] t;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,320,private final double[] t;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,323,inal double[][] y;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,323,private final double[][] y;
False,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,326,inal double[][] yDot;
True,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,src/main/java/org/apache/commons/math/ode/MultistepIntegrator.java,326,private final double[][] yDot;
False,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,240,** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,240,/** Initialize the high order scaled derivatives at step start.
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,241,* @param h step size to use for scaling
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,242,* @param t first steps times
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,243,* @param y first steps states
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,244,* @param yDot first steps derivatives
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,245,"* @return Nordieck vector at first step (h<sup>2</sup>/2 y''<sub>n</sub>,"
True,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,src/main/java/org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer.java,246,* h<sup>3</sup>/6 y'''<sub>n</sub> ... h<sup>k</sup>/k! y<sup>(k)</sup><sub>n</sub>)
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,38,** Amount of error to accept for algorithm convergence. */
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,39,rotected final double epsilon;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,41,/** Amount of error to accept for algorithm convergence. */
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,42,protected final double epsilon;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,162,* @param assignments points assignments to clusters
False,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1285, <p>Reduce {@code |a - offset|} to the primary interval
True,src/main/java/org/apache/commons/math/util/MathUtils.java,src/main/java/org/apache/commons/math/util/MathUtils.java,1285,* <p>Reduce {@code |a - offset|} to the primary interval

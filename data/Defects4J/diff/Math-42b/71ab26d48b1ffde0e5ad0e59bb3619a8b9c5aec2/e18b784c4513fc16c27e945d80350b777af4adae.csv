is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Interval.java,22, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Interval.java,22,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Interval.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Interval.java,23,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,23,import org.apache.commons.math.geometry.partitioning.AbstractRegion;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,28, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,29,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,30,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,30,ublic class IntervalsSet extends Region {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,32,"public class IntervalsSet extends AbstractRegion<Euclidean1D, Euclidean1D> {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,57,ublic IntervalsSet(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,59,public IntervalsSet(final BSPTree<Euclidean1D> tree) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,80,ublic IntervalsSet(final Collection<SubHyperplane> boundary) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,82,public IntervalsSet(final Collection<SubHyperplane<Euclidean1D>> boundary) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,91,"rivate static BSPTree buildTree(final double lower, final double upper) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,93,"private static BSPTree<Euclidean1D> buildTree(final double lower, final double upper) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,95,eturn new BSPTree(Boolean.TRUE);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,97,return new BSPTree<Euclidean1D>(Boolean.TRUE);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,98,inal SubHyperplane upperCut =
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,99,"ew SubHyperplane(new OrientedPoint(new Point1D(upper), true));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,100,"eturn new BSPTree(upperCut,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,101,"ew BSPTree(Boolean.FALSE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,102,"ew BSPTree(Boolean.TRUE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,100,final SubHyperplane<Euclidean1D> upperCut =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,101,"new OrientedPoint(new Vector1D(upper), true).wholeHyperplane();"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,102,"return new BSPTree<Euclidean1D>(upperCut,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,103,"new BSPTree<Euclidean1D>(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,104,"new BSPTree<Euclidean1D>(Boolean.TRUE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,105,inal SubHyperplane lowerCut =
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,106,"ew SubHyperplane(new OrientedPoint(new Point1D(lower), false));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,107,final SubHyperplane<Euclidean1D> lowerCut =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,108,"new OrientedPoint(new Vector1D(lower), false).wholeHyperplane();"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,109,"eturn new BSPTree(lowerCut,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,110,"ew BSPTree(Boolean.FALSE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,111,"ew BSPTree(Boolean.TRUE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,111,"return new BSPTree<Euclidean1D>(lowerCut,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,112,"new BSPTree<Euclidean1D>(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,113,"new BSPTree<Euclidean1D>(Boolean.TRUE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,116,inal SubHyperplane upperCut =
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,117,"ew SubHyperplane(new OrientedPoint(new Point1D(upper), true));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,118,"eturn new BSPTree(lowerCut,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,119,"ew BSPTree(Boolean.FALSE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,120,"ew BSPTree(upperCut,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,121,"ew BSPTree(Boolean.FALSE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,122,"ew BSPTree(Boolean.TRUE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,118,final SubHyperplane<Euclidean1D> upperCut =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,119,"new OrientedPoint(new Vector1D(upper), true).wholeHyperplane();"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,120,"return new BSPTree<Euclidean1D>(lowerCut,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,121,"new BSPTree<Euclidean1D>(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,122,"new BSPTree<Euclidean1D>(upperCut,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,123,"new BSPTree<Euclidean1D>(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,124,"new BSPTree<Euclidean1D>(Boolean.TRUE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,129,ublic Region buildNew(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,131,public IntervalsSet buildNew(final BSPTree<Euclidean1D> tree) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,136,etBarycenter(Point1D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,138,setBarycenter(Vector1D.NaN);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,146,etBarycenter(Double.isInfinite(size) ? Point1D.UNDEFINED : new Point1D(sum / size));
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,148,setBarycenter(Double.isInfinite(size) ? Vector1D.NaN : new Vector1D(sum / size));
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,157,SPTree node = getTree(false);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,159,BSPTree<Euclidean1D> node = getTree(false);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,161,nf  = op.getLocation().getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,163,inf  = op.getLocation().getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,174,SPTree node = getTree(false);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,176,BSPTree<Euclidean1D> node = getTree(false);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,178,up  = op.getLocation().getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,180,sup  = op.getLocation().getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,210,"rivate void recurseList(final BSPTree node, final List<Interval> list,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,212,"private void recurseList(final BSPTree<Euclidean1D> node,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,213,"final List<Interval> list,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,220,inal Point1D       loc = op.getLocation();
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,221,ouble        x   = loc.getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,223,final Vector1D       loc = op.getLocation();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,224,double              x   = loc.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,224,inal BSPTree low       = op.isDirect() ? node.getMinus() : node.getPlus();
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,225,inal BSPTree high      = op.isDirect() ? node.getPlus()  : node.getMinus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,227,final BSPTree<Euclidean1D> low  =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,228,op.isDirect() ? node.getMinus() : node.getPlus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,229,final BSPTree<Euclidean1D> high =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSet.java,230,op.isDirect() ? node.getPlus()  : node.getMinus();
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,19,mport org.apache.commons.math.exception.MathUnsupportedOperationException;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,20,mport org.apache.commons.math.exception.util.LocalizedFormats;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,21,mport org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,19,import org.apache.commons.math.geometry.Vector;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,23,mport org.apache.commons.math.geometry.partitioning.Point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,26,mport org.apache.commons.math.geometry.partitioning.SubSpace;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,32, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,28,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,29,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,34,ublic class OrientedPoint implements Hyperplane {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,31,public class OrientedPoint implements Hyperplane<Euclidean1D> {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,36,** Dummy region returned by the {@link #wholeHyperplane} method. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,37,rivate static final Region DUMMY_REGION = new DummyRegion();
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,39,** Point location. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,40,rivate Point1D location;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,33,/** Vector location. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,34,private Vector1D location;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,48, abscissae greater than {@code location}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,42,* abscissas greater than {@code location}
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,50,"ublic OrientedPoint(final Point1D location, final boolean direct) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,44,"public OrientedPoint(final Vector1D location, final boolean direct) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,60,ublic Hyperplane copySelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,54,public OrientedPoint copySelf() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,64,** Get the offset (oriented distance) of a point to the hyperplane.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,65, @param point point to check
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,66, @return offset of the point
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,68,ublic double getOffset(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,69,inal double delta = ((Point1D) point).getAbscissa() - location.getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,58,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,59,public double getOffset(final Vector<Euclidean1D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,60,final double delta = ((Vector1D) point).getX() - location.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,73,** Transform a space point into a sub-space point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,74, <p>Since this class represent zero dimension spaces which does
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,75," not have lower dimension sub-spaces, this method cannot be"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,76, supported here. It always throws a {@code RuntimeException}
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,77, when called.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,78, @param point n-dimension point of the space
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,79, @return (n-1)-dimension point of the sub-space corresponding to
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,80, the specified space point
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,81, @see #toSpace
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,83,ublic Point toSubSpace(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,84,"hrow new MathUnsupportedOperationException(LocalizedFormats.NOT_SUPPORTED_IN_DIMENSION_N, 1);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,87,** Transform a sub-space point into a space point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,88, <p>Since this class represent zero dimension spaces which does
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,89," not have lower dimension sub-spaces, this method cannot be"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,90, supported here. It always throws a {@code RuntimeException}
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,91, when called.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,92, @param point (n-1)-dimension point of the sub-space
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,93, @return n-dimension point of the space corresponding to the
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,94, specified sub-space point
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,95, @see #toSubSpace
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,97,ublic Point toSpace(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,98,"hrow new MathUnsupportedOperationException(LocalizedFormats.NOT_SUPPORTED_IN_DIMENSION_N, 1);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,101,** Build the sub-space shared by the instance and another hyperplane.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,102, <p>Since this class represent zero dimension spaces which does
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,103," not have lower dimension sub-spaces, this method cannot be"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,104, supported here. It always throws a {@code RuntimeException}
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,105, when called.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,106, @param other other sub-space (must have the same dimension as the
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,107, instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,108, @return a sub-space at the intersection of the instance and the
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,109, other sub-space (it has a dimension one unit less than the
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,110, instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,112,ublic SubSpace intersection(final Hyperplane other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,113,"hrow new MathUnsupportedOperationException(LocalizedFormats.NOT_SUPPORTED_IN_DIMENSION_N, 1);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,125,ublic Region wholeHyperplane() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,126,eturn DUMMY_REGION;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,73,public SubOrientedPoint wholeHyperplane() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,74,"return new SubOrientedPoint(this, null);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,133,ublic Region wholeSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,81,public IntervalsSet wholeSpace() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,150,ublic boolean sameOrientationAs(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,98,public boolean sameOrientationAs(final Hyperplane<Euclidean1D> other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,154,** Compute the relative position of a sub-hyperplane with respect
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,155, to the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,156, @param sub sub-hyperplane to check
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,157," @return one of {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#PLUS PLUS},"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,158, {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#MINUS MINUS}
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,159, or {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER HYPER}
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,160," (in dimension 1, this method <em>never</em> returns {@link"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,161, org.apache.commons.math.geometry.partitioning.Hyperplane.Side#BOTH BOTH})
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,164,ublic Side side(final SubHyperplane sub) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,165,inal double global = getOffset(((OrientedPoint) sub.getHyperplane()).location);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,166,eturn (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,169,** Split a sub-hyperplane in two parts by the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,170, @param sub sub-hyperplane to split
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,171, @return an object containing both the part of the sub-hyperplane
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,172, on the plus side of the instance and the part of the
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,173, sub-hyperplane on the minus side of the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,175,ublic SplitSubHyperplane split(final SubHyperplane sub) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,176,inal double global = getOffset(((OrientedPoint) sub.getHyperplane()).location);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,177,"eturn (global < -1.0e-10) ? new SplitSubHyperplane(null, sub) : new SplitSubHyperplane(sub, null);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,183,ublic Point1D getLocation() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,105,public Vector1D getLocation() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,201,** Dummy region representing the whole set of reals. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,202,rivate static class DummyRegion extends Region {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,204,** Simple constructor.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,206,ublic DummyRegion() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,207,uper();
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,210,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,211,ublic Region buildNew(final BSPTree tree) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,212,eturn this;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,215,** {@inheritDoc} */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,216,rotected void computeGeometricalProperties() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,217,etSize(0);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/OrientedPoint.java,218,etBarycenter(Point1D.ZERO);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,17,package org.apache.commons.math.geometry.euclidean.oned;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,19,import org.apache.commons.math.geometry.partitioning.AbstractSubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,20,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,21,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,22,import org.apache.commons.math.geometry.partitioning.Side;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,24,/** This class represents sub-hyperplane for {@link OrOrientedPoint}.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,25,"* <p>An hyperplane in 1D is a simple point, its orientation being a"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,26,* boolean.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,27,* <p>Instances of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,28,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,29,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,31,"public class SubOrientedPoint extends AbstractSubHyperplane<Euclidean1D, Euclidean1D> {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,33,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,34,* @param hyperplane underlying hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,35,* @param remainingRegion remaining region of the hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,37,"public SubOrientedPoint(final Hyperplane<Euclidean1D> hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,38,final Region<Euclidean1D> remainingRegion) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,39,"super(hyperplane, remainingRegion);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,42,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,43,public double getSize() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,44,return 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,47,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,48,"protected AbstractSubHyperplane<Euclidean1D, Euclidean1D> buildNew(final Hyperplane<Euclidean1D> hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,49,final Region<Euclidean1D> remainingRegion) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,50,"return new SubOrientedPoint(hyperplane, remainingRegion);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,53,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,54,public Side side(final Hyperplane<Euclidean1D> hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,55,final double global = hyperplane.getOffset(((OrientedPoint) getHyperplane()).getLocation());
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,56,return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,59,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,60,public SplitSubHyperplane<Euclidean1D> split(final Hyperplane<Euclidean1D> hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,61,final double global = hyperplane.getOffset(((OrientedPoint) getHyperplane()).getLocation());
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,62,return (global < -1.0e-10) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,63,"new SplitSubHyperplane<Euclidean1D>(null, this) :"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/SubOrientedPoint.java,64,"new SplitSubHyperplane<Euclidean1D>(this, null);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,19,mport org.apache.commons.math.geometry.euclidean.oned.Point1D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,20,mport org.apache.commons.math.geometry.partitioning.Point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,21,mport org.apache.commons.math.geometry.partitioning.SubSpace;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,19,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,20,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,21,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,22,import org.apache.commons.math.geometry.partitioning.Embedding;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,33, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,34,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,35,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,35,ublic class Line implements SubSpace {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,37,"public class Line implements Embedding<Euclidean3D, Euclidean1D> {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,41,rivate Point3D zero;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,43,private Vector3D zero;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,63,"ero = new Point3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,65,"zero = new Vector3D(1.0, p, -Vector3D.dotProduct(p, this.direction), this.direction);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,66,** Revert the line direction.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,68,/** Get a line with reversed direction.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,69,"* @return a new instance, with reversed direction"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,68,ublic void revertSelf() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,69,irection = direction.negate();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,71,public Line revert() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,72,"return new Line(zero, direction.negate());"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,93, {org.apache.commons.math.geometry.euclidean.oned.Point1D Point1D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,96,* {org.apache.commons.math.geometry.euclidean.oned.Vector1D Vector1D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,95,ublic Point toSubSpace(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,96,"inal double x = Vector3D.dotProduct(((Vector3D) point).subtract(zero), direction);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,97,eturn new Point1D(x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,98,public Vector1D toSubSpace(final Vector<Euclidean3D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,99,Vector3D p3 = (Vector3D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,100,"return new Vector1D(Vector3D.dotProduct(p3.subtract(zero), direction));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,102, {org.apache.commons.math.geometry.euclidean.oned.Point1D Point1D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,105,* {org.apache.commons.math.geometry.euclidean.oned.Vector1D Vector1D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,106,ublic Point toSpace(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,107,"eturn new Point3D(1.0, zero, ((Point1D) point).getAbscissa(), direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,109,public Vector3D toSpace(final Vector<Euclidean1D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,110,Vector1D p1 = (Vector1D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Line.java,111,"return new Vector3D(1.0, zero, p1.getX(), direction);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,19,mport org.apache.commons.math.geometry.euclidean.twod.Point2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,19,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,21,import org.apache.commons.math.geometry.euclidean.twod.Euclidean2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,23,import org.apache.commons.math.geometry.euclidean.twod.Vector2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,24,import org.apache.commons.math.geometry.partitioning.AbstractSubHyperplane;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,23,mport org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,27,import org.apache.commons.math.geometry.partitioning.BoundaryAttribute;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,28,import org.apache.commons.math.geometry.partitioning.RegionFactory;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,27,mport java.util.ArrayList;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,32, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,35,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,36,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,59,ublic Point2D[][] getOutline(final PolyhedronsSet polyhedronsSet) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,63,public Vector2D[][] getOutline(final PolyhedronsSet polyhedronsSet) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,67,inal Point2D[][] outline = projected.getVertices();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,71,final Vector2D[][] outline = projected.getVertices();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,69,inal Point2D[] rawLoop = outline[i];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,73,final Vector2D[] rawLoop = outline[i];
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,86,utline[i] = new Point2D[end];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,90,outline[i] = new Vector2D[end];
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,103,"rivate boolean pointIsBetween(final Point2D[] loop, final int n, final int i) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,104,inal Point2D previous = loop[(i + n - 1) % n];
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,105,inal Point2D current  = loop[i];
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,106,inal Point2D next     = loop[(i + 1) % n];
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,107,inal double dx1       = current.x - previous.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,108,inal double dy1       = current.y - previous.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,109,inal double dx2       = next.x    - current.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,110,inal double dy2       = next.y    - current.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,107,"private boolean pointIsBetween(final Vector2D[] loop, final int n, final int i) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,108,final Vector2D previous = loop[(i + n - 1) % n];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,109,final Vector2D current  = loop[i];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,110,final Vector2D next     = loop[(i + 1) % n];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,111,final double dx1       = current.getX() - previous.getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,112,final double dy1       = current.getY() - previous.getY();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,113,final double dx2       = next.getX()    - current.getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,114,final double dy2       = next.getY()    - current.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,118,rivate class BoundaryProjector implements BSPTreeVisitor {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,122,private class BoundaryProjector implements BSPTreeVisitor<Euclidean3D> {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,126,rojected = new PolygonsSet(new BSPTree(Boolean.FALSE));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,130,projected = new PolygonsSet(new BSPTree<Euclidean2D>(Boolean.FALSE));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,130,ublic Order visitOrder(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,134,public Order visitOrder(final BSPTree<Euclidean3D> node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,135,ublic void visitInternalNode(final BSPTree node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,136,inal Region.BoundaryAttribute attribute =
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,137,Region.BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,139,public void visitInternalNode(final BSPTree<Euclidean3D> node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,140,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,141,final BoundaryAttribute<Euclidean3D> attribute =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,142,(BoundaryAttribute<Euclidean3D>) node.getAttribute();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,147,ublic void visitLeafNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,152,public void visitLeafNode(final BSPTree<Euclidean3D> node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,154,"rivate void addContribution(final SubHyperplane facet, final boolean reversed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,159,"private void addContribution(final SubHyperplane<Euclidean3D> facet, final boolean reversed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,162,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,163,"final AbstractSubHyperplane<Euclidean3D, Euclidean2D> absFacet ="
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,164,"(AbstractSubHyperplane<Euclidean3D, Euclidean2D>) facet;"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,158,oint2D[][] vertices =
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,159,(PolygonsSet) facet.getRemainingRegion()).getVertices();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,166,Vector2D[][] vertices =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,167,((PolygonsSet) absFacet.getRemainingRegion()).getVertices();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,167,inal Point2D[][] newVertices = new Point2D[vertices.length][];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,175,final Vector2D[][] newVertices = new Vector2D[vertices.length][];
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,169,inal Point2D[] loop = vertices[i];
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,170,inal Point2D[] newLoop = new Point2D[loop.length];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,177,final Vector2D[] loop = vertices[i];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,178,final Vector2D[] newLoop = new Vector2D[loop.length];
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,190,inal ArrayList<SubHyperplane> edges = new ArrayList<SubHyperplane>();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,191,or (Point2D[] loop : vertices) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,198,final ArrayList<SubHyperplane<Euclidean2D>> edges = new ArrayList<SubHyperplane<Euclidean2D>>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,199,for (Vector2D[] loop : vertices) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,196,"oint2D pPoint       = new Point2D(Vector3D.dotProduct(previous3D, u),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,204,"Vector2D pPoint       = new Vector2D(Vector3D.dotProduct(previous3D, u),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,201,"inal Point2D  cPoint    = new Point2D(Vector3D.dotProduct(current3D, u),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,209,"final Vector2D  cPoint    = new Vector2D(Vector3D.dotProduct(current3D, u),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,205,ubHyperplane edge = new SubHyperplane(line);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,213,SubHyperplane<Euclidean2D> edge = line.wholeHyperplane();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,213,dge = l.split(edge).getPlus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,221,edge = edge.split(l).getPlus();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,222,dge = l.split(edge).getMinus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,230,edge = edge.split(l).getMinus();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,236,"rojected = (PolygonsSet) Region.union(projected, projectedFacet);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/OutlineExtractor.java,244,"projected = (PolygonsSet) new RegionFactory<Euclidean2D>().union(projected, projectedFacet);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,19,mport org.apache.commons.math.geometry.euclidean.oned.Point1D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,20,mport org.apache.commons.math.geometry.euclidean.twod.Point2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,19,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,20,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,21,import org.apache.commons.math.geometry.euclidean.twod.Euclidean2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,22,import org.apache.commons.math.geometry.euclidean.twod.Vector2D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,22,mport org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,24,import org.apache.commons.math.geometry.partitioning.Embedding;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,24,mport org.apache.commons.math.geometry.partitioning.Point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,25,mport org.apache.commons.math.geometry.partitioning.Region;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,26,mport org.apache.commons.math.geometry.partitioning.SubHyperplane;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,27,mport org.apache.commons.math.geometry.partitioning.SubSpace;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,31, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,29,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,30,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,33,ublic class Plane implements Hyperplane {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,32,"public class Plane implements Hyperplane<Euclidean3D>, Embedding<Euclidean3D, Euclidean2D> {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,39,rivate Point3D origin;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,38,private Vector3D origin;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,103,ublic Hyperplane copySelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,102,public Plane copySelf() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,146,"rigin = new Point3D(-originOffset, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,145,"origin = new Vector3D(-originOffset, w);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,157,ublic Point3D getOrigin() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,156,public Vector3D getOrigin() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,220, org.apache.commons.math.geometry.euclidean.twod.Point2D Point2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,219,* org.apache.commons.math.geometry.euclidean.twod.Vector2D Vector2D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,223,ublic Point toSubSpace(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,222,public Vector2D toSubSpace(final Vector<Euclidean3D> point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,225,"eturn new Point2D(Vector3D.dotProduct(p3D, u),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,224,"return new Vector2D(Vector3D.dotProduct(p3D, u),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,231, org.apache.commons.math.geometry.euclidean.twod.Point2D Point2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,230,* org.apache.commons.math.geometry.euclidean.twod.Vector2D Vector2D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,235,ublic Point toSpace(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,236,inal Point2D p2D = (Point2D) point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,237,"eturn new Point3D(p2D.x, u, p2D.y, v, -originOffset, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,234,public Vector3D toSpace(final Vector<Euclidean2D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,235,final Vector2D p2D = (Vector2D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,236,"return new Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,247,"ublic Vector3D getPointAt(final Point2D inPlane, final double offset) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,248,"eturn new Vector3D(inPlane.x, u, inPlane.y, v, offset - originOffset, w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,246,"public Vector3D getPointAt(final Vector2D inPlane, final double offset) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,247,"return new Vector3D(inPlane.getX(), u, inPlane.getY(), v, offset - originOffset, w);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,306,ublic Point3D intersection(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,305,public Vector3D intersection(final Line line) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,312,inal Vector3D point = (Vector3D) line.toSpace(Point1D.ZERO);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,311,final Vector3D point = (Vector3D) line.toSpace(Vector1D.ZERO);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,314,"eturn new Point3D(1.0, point, k, direction);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,313,"return new Vector3D(1.0, point, k, direction);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,322,ublic SubSpace intersection(final Hyperplane other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,323,inal Plane otherP = (Plane) other;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,324,"inal Vector3D direction = Vector3D.crossProduct(w, otherP.w);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,321,public Line intersection(final Plane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,322,"final Vector3D direction = Vector3D.crossProduct(w, other.w);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,328,"eturn new Line(intersection(this, otherP, new Plane(direction)),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,326,"return new Line(intersection(this, other, new Plane(direction)),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,377,ublic Region wholeHyperplane() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,378,eturn new PolygonsSet();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,375,public SubPlane wholeHyperplane() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,376,"return new SubPlane(this, new PolygonsSet());"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,385,ublic Region wholeSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,383,public PolyhedronsSet wholeSpace() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,393,ublic boolean contains(final Point3D p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,391,public boolean contains(final Vector3D p) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,419,ublic double getOffset(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,417,public double getOffset(final Vector<Euclidean3D> point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,428,ublic boolean sameOrientationAs(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,426,public boolean sameOrientationAs(final Hyperplane<Euclidean3D> other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,432,** Compute the relative position of a sub-hyperplane with respect
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,433, to the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,434, @param sub sub-hyperplane to check
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,435," @return one of {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#PLUS PLUS},"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,436," {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#MINUS MINUS},"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,437," {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#BOTH BOTH},"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,438, {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER HYPER}
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,440,ublic Side side(final SubHyperplane sub) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,442,inal Plane otherPlane = (Plane) sub.getHyperplane();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,443,inal Line  inter      = (Line) intersection(otherPlane);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,445,f (inter == null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,446,"/ the hyperplanes are parallel,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,447,/ any point can be used to check their relative position
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,448,inal double global = getOffset(otherPlane);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,449,eturn (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,452,/ create a 2D line in the otherPlane canonical 2D frame such that:
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,453,/   - the line is the crossing line of the two planes in 3D
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,454,/   - the line splits the otherPlane in two half planes with an
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,455,/     orientation consistent with the orientation of the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,456,/     (i.e. the 3D half space on the plus side (resp. minus side)
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,457,/      of the instance contains the 2D half plane on the plus side
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,458,/      (resp. minus side) of the 2D line
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,459,oint2D p = (Point2D) otherPlane.toSubSpace(inter.toSpace(Point1D.ZERO));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,460,oint2D q = (Point2D) otherPlane.toSubSpace(inter.toSpace(Point1D.ONE));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,461,"f (Vector3D.dotProduct(Vector3D.crossProduct(inter.getDirection(),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,462,"therPlane.getNormal()),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,463,) < 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,464,inal Point2D tmp = p;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,465,           = q;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,466,           = tmp;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,468,"inal Hyperplane line2D = new org.apache.commons.math.geometry.euclidean.twod.Line(p, q);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,470,/ check the side on the 2D plane
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,471,eturn sub.getRemainingRegion().side(line2D);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,475,** Split a sub-hyperplane in two parts by the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,476, @param sub sub-hyperplane to split
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,477, @return an object containing both the part of the sub-hyperplane
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,478, on the plus side of the instance and the part of the
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,479, sub-hyperplane on the minus side of the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,481,ublic SplitSubHyperplane split(final SubHyperplane sub) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,483,inal Plane otherPlane = (Plane) sub.getHyperplane();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,484,inal Line  inter      = (Line) intersection(otherPlane);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,486,f (inter == null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,487,/ the hyperplanes are parallel
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,488,inal double global = getOffset(otherPlane);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,489,"eturn (global < -1.0e-10) ? new SplitSubHyperplane(null, sub) : new SplitSubHyperplane(sub, null);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,492,/ the hyperplanes do intersect
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,493,oint2D p = (Point2D) otherPlane.toSubSpace(inter.toSpace(Point1D.ZERO));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,494,oint2D q = (Point2D) otherPlane.toSubSpace(inter.toSpace(Point1D.ONE));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,495,"f (Vector3D.dotProduct(Vector3D.crossProduct(inter.getDirection(),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,496,"therPlane.getNormal()),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,497,) < 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,498,inal Point2D tmp = p;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,499,           = q;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,500,           = tmp;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,502,inal SubHyperplane l2DMinus =
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,503,"ew SubHyperplane(new org.apache.commons.math.geometry.euclidean.twod.Line(p, q));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,504,inal SubHyperplane l2DPlus =
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,505,"ew SubHyperplane(new org.apache.commons.math.geometry.euclidean.twod.Line(q, p));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,507,inal BSPTree splitTree =
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,508,ub.getRemainingRegion().getTree(false).split(l2DMinus);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,509,inal BSPTree plusTree  = Region.isEmpty(splitTree.getPlus()) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,510,ew BSPTree(Boolean.FALSE) :
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,511,"ew BSPTree(l2DPlus, new BSPTree(Boolean.FALSE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,512,"plitTree.getPlus(), null);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,514,inal BSPTree minusTree = Region.isEmpty(splitTree.getMinus()) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,515,ew BSPTree(Boolean.FALSE) :
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,516,"ew BSPTree(l2DMinus, new BSPTree(Boolean.FALSE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,517,"plitTree.getMinus(), null);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,519,"eturn new SplitSubHyperplane(new SubHyperplane(otherPlane.copySelf(),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,520,"ew PolygonsSet(plusTree)),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,521,"ew SubHyperplane(otherPlane.copySelf(),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Plane.java,522,ew PolygonsSet(minusTree)));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,23,mport org.apache.commons.math.geometry.euclidean.twod.Point2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,22,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,23,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,24,import org.apache.commons.math.geometry.euclidean.twod.Euclidean2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,25,import org.apache.commons.math.geometry.euclidean.twod.SubLine;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,26,import org.apache.commons.math.geometry.euclidean.twod.Vector2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,29,import org.apache.commons.math.geometry.partitioning.BoundaryAttribute;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,27,mport org.apache.commons.math.geometry.partitioning.Point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,32,import org.apache.commons.math.geometry.partitioning.RegionFactory;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,35,import org.apache.commons.math.geometry.partitioning.AbstractRegion;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,34, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,39,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,40,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,36,ublic class PolyhedronsSet extends Region {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,42,"public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,53,ublic PolyhedronsSet(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,59,public PolyhedronsSet(final BSPTree<Euclidean3D> tree) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,64, or a set of disjoints polyhedrons considered as a whole). In
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,70,* or a set of disjoint polyhedrons considered as a whole). In
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,69, calls to the {@link Region#checkPoint(Point) checkPoint} method will
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,75,* calls to the {@link Region#checkPoint(Vector) checkPoint} method will
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,76,ublic PolyhedronsSet(final Collection<SubHyperplane> boundary) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,82,public PolyhedronsSet(final Collection<SubHyperplane<Euclidean3D>> boundary) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,94,"@SuppressWarnings(""unchecked"")"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,91,his(buildConvex(Arrays.asList(new Hyperplane[] {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,98,this(new RegionFactory<Euclidean3D>().buildConvex(
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,97,"ew Plane(new Vector3D(0,    0,   zMax), Vector3D.PLUS_K)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,98,)).getTree(false));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,104,"new Plane(new Vector3D(0,    0,   zMax), Vector3D.PLUS_K)).getTree(false));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,102,ublic Region buildNew(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,108,public PolyhedronsSet buildNew(final BSPTree<Euclidean3D> tree) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,116,etBarycenter(Point3D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,122,setBarycenter(Vector3D.NaN);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,120,"etBarycenter(new Point3D(1.0 / (4 * getSize()), (Vector3D) getBarycenter()));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,126,"setBarycenter(new Vector3D(1.0 / (4 * getSize()), (Vector3D) getBarycenter()));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,126,rivate class FacetsContributionVisitor implements BSPTreeVisitor {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,132,private class FacetsContributionVisitor implements BSPTreeVisitor<Euclidean3D> {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,131,"etBarycenter(new Point3D(0, 0, 0));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,137,"setBarycenter(new Vector3D(0, 0, 0));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,135,ublic Order visitOrder(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,141,public Order visitOrder(final BSPTree<Euclidean3D> node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,140,ublic void visitInternalNode(final BSPTree node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,141,inal BoundaryAttribute attribute = (BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,146,public void visitInternalNode(final BSPTree<Euclidean3D> node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,147,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,148,final BoundaryAttribute<Euclidean3D> attribute =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,149,(BoundaryAttribute<Euclidean3D>) node.getAttribute();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,151,ublic void visitLeafNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,159,public void visitLeafNode(final BSPTree<Euclidean3D> node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,158,"rivate void addContribution(final SubHyperplane facet, final boolean reversed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,166,"private void addContribution(final SubHyperplane<Euclidean3D> facet, final boolean reversed) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,160,inal Region polygon = facet.getRemainingRegion();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,168,final Region<Euclidean2D> polygon = ((SubPlane) facet).getRemainingRegion();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,165,etBarycenter(Point3D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,173,setBarycenter(Vector3D.NaN);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,169,inal Vector3D facetB = (Point3D) plane.toSpace(polygon.getBarycenter());
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,177,final Vector3D facetB = plane.toSpace(polygon.getBarycenter());
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,176,"etBarycenter(new Point3D(1.0, (Point3D) getBarycenter(), scaled, facetB));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,184,"setBarycenter(new Vector3D(1.0, (Vector3D) getBarycenter(), scaled, facetB));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,191,"ublic SubHyperplane firstIntersection(final Vector3D point, final Line line) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,199,"public SubHyperplane<Euclidean3D> firstIntersection(final Vector3D point, final Line line) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,203,"rivate SubHyperplane recurseFirstIntersection(final BSPTree node,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,204,"inal Vector3D point,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,205,inal Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,211,"private SubHyperplane<Euclidean3D> recurseFirstIntersection(final BSPTree<Euclidean3D> node,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,212,"final Vector3D point,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,213,final Line line) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,207,inal SubHyperplane cut = node.getCut();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,215,final SubHyperplane<Euclidean3D> cut = node.getCut();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,211,inal BSPTree minus = node.getMinus();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,212,inal BSPTree plus  = node.getPlus();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,213,inal Plane   plane = (Plane) cut.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,219,final BSPTree<Euclidean3D> minus = node.getMinus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,220,final BSPTree<Euclidean3D> plus  = node.getPlus();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,221,final Plane               plane = (Plane) cut.getHyperplane();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,216,inal double offset = plane.getOffset((Point) point);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,224,final double offset = plane.getOffset(point);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,218,inal BSPTree near;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,219,inal BSPTree far;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,226,final BSPTree<Euclidean3D> near;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,227,final BSPTree<Euclidean3D> far;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,230,"inal SubHyperplane facet = boundaryFacet(point, node);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,238,"final SubHyperplane<Euclidean3D> facet = boundaryFacet(point, node);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,237,"inal SubHyperplane crossed = recurseFirstIntersection(near, point, line);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,245,"final SubHyperplane<Euclidean3D> crossed = recurseFirstIntersection(near, point, line);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,246,"inal SubHyperplane facet = boundaryFacet(hit3D, node);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,254,"final SubHyperplane<Euclidean3D> facet = boundaryFacet(hit3D, node);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,264,"rivate SubHyperplane boundaryFacet(final Vector3D point, final BSPTree node) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,265,inal Point point2D = node.getCut().getHyperplane().toSubSpace((Point) point);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,266,inal BoundaryAttribute attribute = (BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,272,"private SubHyperplane<Euclidean3D> boundaryFacet(final Vector3D point,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,273,final BSPTree<Euclidean3D> node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,274,final Vector2D point2D = ((Plane) node.getCut().getHyperplane()).toSubSpace(point);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,275,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,276,final BoundaryAttribute<Euclidean3D> attribute =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,277,(BoundaryAttribute<Euclidean3D>) node.getAttribute();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,268,attribute.getPlusOutside().getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,279,(((SubPlane) attribute.getPlusOutside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,272,attribute.getPlusInside().getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,283,(((SubPlane) attribute.getPlusInside()).getRemainingRegion().checkPoint(point2D) == Location.INSIDE)) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,289,rivate static class RotationTransform implements Transform {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,300,"private static class RotationTransform implements Transform<Euclidean3D, Euclidean2D> {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,298,rivate Hyperplane cachedOriginal;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,309,private Plane cachedOriginal;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,301,rivate Transform  cachedTransform;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,312,"private Transform<Euclidean2D, Euclidean1D>  cachedTransform;"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,313,ublic Point apply(final Point point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,324,public Vector3D apply(final Vector<Euclidean3D> point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,315,"eturn new Point3D(1.0, center, 1.0, rotation.applyTo(delta));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,326,"return new Vector3D(1.0, center, 1.0, rotation.applyTo(delta));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,319,ublic Hyperplane apply(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,330,public Plane apply(final Hyperplane<Euclidean3D> hyperplane) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,324,"ublic SubHyperplane apply(final SubHyperplane sub,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,325,"inal Hyperplane original, final Hyperplane transformed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,335,"public SubHyperplane<Euclidean2D> apply(final SubHyperplane<Euclidean2D> sub,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,336,"final Hyperplane<Euclidean3D> original,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,337,final Hyperplane<Euclidean3D> transformed) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,332,"inal Vector3D p10    = (Vector3D) oPlane.toSpace(new Point2D(1.0, 0.0));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,333,"inal Vector3D p01    = (Vector3D) oPlane.toSpace(new Point2D(0.0, 1.0));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,334,inal Point2D  tP00   = (Point2D) tPlane.toSubSpace(apply((Point) p00));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,335,inal Point2D  tP10   = (Point2D) tPlane.toSubSpace(apply((Point) p10));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,336,inal Point2D  tP01   = (Point2D) tPlane.toSubSpace(apply((Point) p01));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,344,"final Vector3D p10    = (Vector3D) oPlane.toSpace(new Vector2D(1.0, 0.0));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,345,"final Vector3D p01    = (Vector3D) oPlane.toSpace(new Vector2D(0.0, 1.0));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,346,final Vector2D  tP00   = (Vector2D) tPlane.toSubSpace(apply(p00));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,347,final Vector2D  tP10   = (Vector2D) tPlane.toSubSpace(apply(p10));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,348,final Vector2D  tP01   = (Vector2D) tPlane.toSubSpace(apply(p01));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,342,achedOriginal  = original;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,354,cachedOriginal  = (Plane) original;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,346,eturn sub.applyTransform(cachedTransform);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,358,return ((SubLine) sub).applyTransform(cachedTransform);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,361,rivate static class TranslationTransform implements Transform {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,373,"private static class TranslationTransform implements Transform<Euclidean3D, Euclidean2D> {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,367,rivate Hyperplane cachedOriginal;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,379,private Plane cachedOriginal;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,370,rivate Transform  cachedTransform;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,382,"private Transform<Euclidean2D, Euclidean1D>  cachedTransform;"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,380,ublic Point apply(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,381,"eturn new Point3D(1.0, (Vector3D) point, 1.0, translation);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,392,public Vector3D apply(final Vector<Euclidean3D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,393,"return new Vector3D(1.0, (Vector3D) point, 1.0, translation);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,385,ublic Hyperplane apply(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,397,public Plane apply(final Hyperplane<Euclidean3D> hyperplane) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,390,"ublic SubHyperplane apply(final SubHyperplane sub,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,391,"inal Hyperplane original, final Hyperplane transformed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,402,"public SubHyperplane<Euclidean2D> apply(final SubHyperplane<Euclidean2D> sub,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,403,"final Hyperplane<Euclidean3D> original,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,404,final Hyperplane<Euclidean3D> transformed) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,397,inal Point2D shift  = (Point2D) tPlane.toSubSpace(apply((Point) oPlane.getOrigin()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,410,final Vector2D shift  = (Vector2D) tPlane.toSubSpace(apply(oPlane.getOrigin()));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,401,achedOriginal  = original;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,414,cachedOriginal  = (Plane) original;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,407,eturn sub.applyTransform(cachedTransform);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSet.java,420,return ((SubLine) sub).applyTransform(cachedTransform);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,17,package org.apache.commons.math.geometry.euclidean.threed;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,19,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,20,import org.apache.commons.math.geometry.euclidean.twod.Euclidean2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,21,import org.apache.commons.math.geometry.euclidean.twod.Vector2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,22,import org.apache.commons.math.geometry.euclidean.twod.PolygonsSet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,23,import org.apache.commons.math.geometry.partitioning.AbstractSubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,24,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,25,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,26,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,27,import org.apache.commons.math.geometry.partitioning.Side;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,28,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,30,/** This class represents a sub-hyperplane for {@link Plane}.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,31,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,32,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,34,"public class SubPlane extends AbstractSubHyperplane<Euclidean3D, Euclidean2D> {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,36,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,37,* @param hyperplane underlying hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,38,* @param remainingRegion remaining region of the hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,40,"public SubPlane(final Hyperplane<Euclidean3D> hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,41,final Region<Euclidean2D> remainingRegion) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,42,"super(hyperplane, remainingRegion);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,45,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,46,"protected AbstractSubHyperplane<Euclidean3D, Euclidean2D> buildNew(final Hyperplane<Euclidean3D> hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,47,final Region<Euclidean2D> remainingRegion) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,48,"return new SubPlane(hyperplane, remainingRegion);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,51,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,52,public Side side(Hyperplane<Euclidean3D> hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,54,final Plane otherPlane = (Plane) hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,55,final Plane thisPlane  = (Plane) getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,56,final Line  inter      = (Line) otherPlane.intersection(thisPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,58,if (inter == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,59,"// the hyperplanes are parallel,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,60,// any point can be used to check their relative position
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,61,final double global = otherPlane.getOffset(thisPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,62,return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,65,// create a 2D line in the otherPlane canonical 2D frame such that:
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,66,//   - the line is the crossing line of the two planes in 3D
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,67,//   - the line splits the otherPlane in two half planes with an
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,68,//     orientation consistent with the orientation of the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,69,//     (i.e. the 3D half space on the plus side (resp. minus side)
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,70,//      of the instance contains the 2D half plane on the plus side
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,71,//      (resp. minus side) of the 2D line
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,72,Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,73,Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,74,"Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,75,"if (Vector3D.dotProduct(crossP, otherPlane.getNormal()) < 0) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,76,final Vector2D tmp = p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,77,p           = q;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,78,q           = tmp;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,80,final org.apache.commons.math.geometry.euclidean.twod.Line line2D =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,81,"new org.apache.commons.math.geometry.euclidean.twod.Line(p, q);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,83,// check the side on the 2D plane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,84,return getRemainingRegion().side(line2D);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,88,/** Split the instance in two parts by an hyperplane.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,89,* @param hyperplane splitting hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,90,* @return an object containing both the part of the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,91,* on the plus side of the instance and the part of the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,92,* instance on the minus side of the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,94,public SplitSubHyperplane<Euclidean3D> split(Hyperplane<Euclidean3D> hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,96,final Plane otherPlane = (Plane) hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,97,final Plane thisPlane  = (Plane) getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,98,final Line  inter      = (Line) otherPlane.intersection(thisPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,100,if (inter == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,101,// the hyperplanes are parallel
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,102,final double global = otherPlane.getOffset(thisPlane);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,103,return (global < -1.0e-10) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,104,"new SplitSubHyperplane<Euclidean3D>(null, this) :"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,105,"new SplitSubHyperplane<Euclidean3D>(this, null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,108,// the hyperplanes do intersect
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,109,Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,110,Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,111,"Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,112,"if (Vector3D.dotProduct(crossP, otherPlane.getNormal()) < 0) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,113,final Vector2D tmp = p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,114,p           = q;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,115,q           = tmp;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,117,final SubHyperplane<Euclidean2D> l2DMinus =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,118,"new org.apache.commons.math.geometry.euclidean.twod.Line(p, q).wholeHyperplane();"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,119,final SubHyperplane<Euclidean2D> l2DPlus =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,120,"new org.apache.commons.math.geometry.euclidean.twod.Line(q, p).wholeHyperplane();"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,122,final BSPTree<Euclidean2D> splitTree = getRemainingRegion().getTree(false).split(l2DMinus);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,123,final BSPTree<Euclidean2D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,124,new BSPTree<Euclidean2D>(Boolean.FALSE) :
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,125,"new BSPTree<Euclidean2D>(l2DPlus, new BSPTree<Euclidean2D>(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,126,"splitTree.getPlus(), null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,128,final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,129,new BSPTree<Euclidean2D>(Boolean.FALSE) :
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,130,"new BSPTree<Euclidean2D>(l2DMinus, new BSPTree<Euclidean2D>(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,131,"splitTree.getMinus(), null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,133,"return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/SubPlane.java,134,"new SubPlane(thisPlane.copySelf(), new PolygonsSet(minusTree)));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,23,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,24,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,25,mport org.apache.commons.math.geometry.euclidean.oned.Point1D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,26,mport org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,27,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,28,import org.apache.commons.math.geometry.partitioning.Embedding;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,28,mport org.apache.commons.math.geometry.partitioning.Point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,29,mport org.apache.commons.math.geometry.partitioning.Region;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,31,mport org.apache.commons.math.geometry.partitioning.SubSpace;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,60, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,59,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,60,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,62,ublic class Line implements Hyperplane {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,62,"public class Line implements Hyperplane<Euclidean2D>, Embedding<Euclidean2D, Euclidean1D> {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,81,"ublic Line(final Point2D p1, final Point2D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,81,"public Line(final Vector2D p1, final Vector2D p2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,89,"ublic Line(final Point2D p, final double angle) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,89,"public Line(final Vector2D p, final double angle) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,119,ublic Hyperplane copySelf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,119,public Line copySelf() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,128,"ublic void reset(final Point2D p1, final Point2D p2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,129,inal double dx = p2.x - p1.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,130,inal double dy = p2.y - p1.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,128,"public void reset(final Vector2D p1, final Vector2D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,129,final double dx = p2.getX() - p1.getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,130,final double dy = p2.getY() - p1.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,136,riginOffset = p1.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,136,originOffset = p1.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,141,riginOffset = (p2.x * p1.y - p1.x * p2.y) / d;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,141,originOffset = (p2.getX() * p1.getY() - p1.getX() * p2.getY()) / d;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,149,"ublic void reset(final Point2D p, final double alpha) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,149,"public void reset(final Vector2D p, final double alpha) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,153,riginOffset = cos * p.y - sin * p.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,153,originOffset = cos * p.getY() - sin * p.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,179,** Transform a 2D space point into a line point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,180, @param point 2D point (must be a {@link Point2D Point2D}
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,181, instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,182, @return line point corresponding to the 2D point (really a {@link
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,183, org.apache.commons.math.geometry.euclidean.oned.Point1D Point1D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,184, @see #toSpace
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,186,ublic Point toSubSpace(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,187,inal Point2D p2D = (Point2D) point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,188,eturn new Point1D(cos * p2D.x + sin * p2D.y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,179,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,180,public Vector1D toSubSpace(final Vector<Euclidean2D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,181,Vector2D p2 = (Vector2D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,182,return new Vector1D(cos * p2.getX() + sin * p2.getY());
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,191,** Get one point from the line.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,192, @param point desired abscissa for the point (must be a {@link
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,193, org.apache.commons.math.geometry.euclidean.oned.Point1D Point1D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,194, @return line point at specified abscissa (really a {@link Point2D
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,195, Point2D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,197,ublic Point toSpace(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,198,inal double abscissa = ((Point1D) point).getAbscissa();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,199,"eturn new Point2D(abscissa * cos - originOffset * sin,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,185,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,186,public Vector2D toSpace(final Vector<Euclidean1D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,187,final double abscissa = ((Vector1D) point).getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,188,"return new Vector2D(abscissa * cos - originOffset * sin,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,206, (really a {@link Point2D Point2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,195,* (really a {@link Vector2D Vector2D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,208,ublic SubSpace intersection(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,197,public Vector2D intersection(final Hyperplane<Euclidean2D> other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,214,"eturn new Point2D((cos * otherL.originOffset - otherL.cos * originOffset) / d,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,203,"return new Vector2D((cos * otherL.originOffset - otherL.cos * originOffset) / d,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,218,** Build a region covering the whole hyperplane.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,219, @return a region covering the whole hyperplane
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,221,ublic Region wholeHyperplane() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,222,eturn new IntervalsSet();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,207,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,208,public SubLine wholeHyperplane() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,209,"return new SubLine(this, new IntervalsSet());"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,229,ublic Region wholeSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,216,public PolygonsSet wholeSpace() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,243,ublic double getOffset(final Line line) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,230,public double getOffset(final Hyperplane<Euclidean2D> hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,231,Line line = (Line) hyperplane;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,253, @param point point to check (must be a {@link Point2D Point2D} instance)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,241,* @param point point to check (must be a {@link Vector2D Vector2D} instance)
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,256,ublic double getOffset(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,257,inal Point2D p2D = (Point2D) point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,258,eturn sin * p2D.x - cos * p2D.y + originOffset;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,244,public double getOffset(final Vector<Euclidean2D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,245,Vector2D p2 = (Vector2D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,246,return sin * p2.getX() - cos * p2.getY() + originOffset;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,274,ublic boolean sameOrientationAs(final Hyperplane other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,262,public boolean sameOrientationAs(final Hyperplane<Euclidean2D> other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,285,"ublic Point2D getPointAt(final Point1D abscissa, final double offset) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,286,inal double x       = abscissa.getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,273,"public Vector2D getPointAt(final Vector1D abscissa, final double offset) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,274,final double x       = abscissa.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,288,"eturn new Point2D(x * cos + dOffset * sin, x * sin - dOffset * cos);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,276,"return new Vector2D(x * cos + dOffset * sin, x * sin - dOffset * cos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,295,ublic boolean contains(final Point2D p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,283,public boolean contains(final Vector2D p) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,311,ublic void translateToPoint(final Point2D p) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,312,riginOffset = cos * p.y - sin * p.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,299,public void translateToPoint(final Vector2D p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,300,originOffset = cos * p.getY() - sin * p.getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,345,** Compute the relative position of a sub-hyperplane with respect
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,346, to the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,347, @param sub sub-hyperplane to check
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,348," @return one of {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#PLUS PLUS},"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,349," {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#MINUS MINUS},"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,350," {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#BOTH BOTH},"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,351, {@link org.apache.commons.math.geometry.partitioning.Hyperplane.Side#HYPER HYPER}
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,353,ublic Side side(final SubHyperplane sub) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,355,inal Hyperplane otherHyp = sub.getHyperplane();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,356,inal Point2D    crossing = (Point2D) intersection(otherHyp);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,358,f (crossing == null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,359,"/ the lines are parallel,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,360,inal double global = getOffset((Line) otherHyp);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,361,eturn (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,364,/ the lines do intersect
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,365,inal boolean direct = FastMath.sin(((Line) otherHyp).angle - angle) < 0;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,366,inal Point1D x = (Point1D) otherHyp.toSubSpace(crossing);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,367,"eturn sub.getRemainingRegion().side(new OrientedPoint(x, direct));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,371,** Split a sub-hyperplane in two parts by the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,372, @param sub sub-hyperplane to split
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,373, @return an object containing both the part of the sub-hyperplane
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,374, on the plus side of the instance and the part of the
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,375, sub-hyperplane on the minus side of the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,377,ublic SplitSubHyperplane split(final SubHyperplane sub) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,379,inal Line    otherLine = (Line) sub.getHyperplane();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,380,inal Point2D crossing  = (Point2D) intersection(otherLine);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,382,f (crossing == null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,383,/ the lines are parallel
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,384,inal double global = getOffset(otherLine);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,385,eturn (global < -1.0e-10) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,386,"ew SplitSubHyperplane(null, sub) :"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,387,"ew SplitSubHyperplane(sub, null);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,390,/ the lines do intersect
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,391,inal boolean direct = FastMath.sin(otherLine.angle - angle) < 0;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,392,inal Point1D x      = (Point1D) otherLine.toSubSpace(crossing);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,393,"inal SubHyperplane subPlus  = new SubHyperplane(new OrientedPoint(x, !direct));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,394,"inal SubHyperplane subMinus = new SubHyperplane(new OrientedPoint(x, direct));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,396,inal BSPTree splitTree =
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,397,ub.getRemainingRegion().getTree(false).split(subMinus);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,398,inal BSPTree plusTree  = Region.isEmpty(splitTree.getPlus()) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,399,ew BSPTree(Boolean.FALSE) :
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,400,"ew BSPTree(subPlus, new BSPTree(Boolean.FALSE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,401,"plitTree.getPlus(), null);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,402,inal BSPTree minusTree = Region.isEmpty(splitTree.getMinus()) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,403,ew BSPTree(Boolean.FALSE) :
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,404,"ew BSPTree(subMinus, new BSPTree(Boolean.FALSE),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,405,"plitTree.getMinus(), null);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,407,"eturn new SplitSubHyperplane(new SubHyperplane(otherLine.copySelf(),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,408,"ew IntervalsSet(plusTree)),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,409,"ew SubHyperplane(otherLine.copySelf(),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,410,ew IntervalsSet(minusTree)));
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,422," Point2D Point2D}, {@link Line Line} or {@link"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,341,"* Vector2D Vector2D}, {@link Line Line} or {@link"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,427,ublic static Transform getTransform(final AffineTransform transform) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,346,"public static Transform<Euclidean2D, Euclidean1D> getTransform(final AffineTransform transform)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,347,throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,438,rivate static class LineTransform implements Transform {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,358,"private static class LineTransform implements Transform<Euclidean2D, Euclidean1D> {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,481,ublic Point apply(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,482,inal Point2D p2D = (Point2D) point;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,401,public Vector2D apply(final Vector<Euclidean2D> point) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,402,final Vector2D p2D = (Vector2D) point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,485,"eturn new Point2D(cXX * x + cXY * y + cX1,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,405,"return new Vector2D(cXX * x + cXY * y + cX1,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,490,ublic Hyperplane apply(final Hyperplane hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,410,public Line apply(final Hyperplane<Euclidean2D> hyperplane) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,502,"ublic SubHyperplane apply(final SubHyperplane sub,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,503,"inal Hyperplane original, final Hyperplane transformed) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,504,inal OrientedPoint op = (OrientedPoint) sub.getHyperplane();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,505,inal Point1D newLoc =
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,506,Point1D) transformed.toSubSpace(apply(original.toSpace(op.getLocation())));
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,507,"eturn new SubHyperplane(new OrientedPoint(newLoc, op.isDirect()));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,422,"public SubHyperplane<Euclidean1D> apply(final SubHyperplane<Euclidean1D> sub,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,423,"final Hyperplane<Euclidean2D> original,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,424,final Hyperplane<Euclidean2D> transformed) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,425,final OrientedPoint op     = (OrientedPoint) sub.getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,426,final Line originalLine    = (Line) original;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,427,final Line transformedLine = (Line) transformed;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,428,final Vector1D newLoc =
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,429,transformedLine.toSubSpace(apply(originalLine.toSpace(op.getLocation())));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Line.java,430,"return new OrientedPoint(newLoc, op.isDirect()).wholeHyperplane();"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,25,mport org.apache.commons.math.geometry.euclidean.oned.OrientedPoint;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,26,mport org.apache.commons.math.geometry.euclidean.oned.Point1D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,27,mport org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,24,import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,26,import org.apache.commons.math.geometry.partitioning.RegionFactory;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,33, <p>This class is used during Piece instances construction.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,34, Beams are built using the outline edges as
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,35," representative of facets, the orientation of these facets are"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,31,* <p>This class is used for piecewise polygons construction.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,32,* Polygons are built using the outline edges as
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,33,"* representative of boundaries, the orientation of these lines are"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,40," <p>Orientation is computed assuming the piece is finite, i.e. the"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,41," outermost loops have their exterior side facing points at infinity,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,42, and hence are oriented counter-clockwise. The orientation of
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,38,"* <p>Orientation is computed assuming the piecewise polygon is finite,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,39,* i.e. the outermost loops have their exterior side facing points at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,40,"* infinity, and hence are oriented counter-clockwise. The orientation of"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,46, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,44,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,45,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,51,rivate Point2D[] loop;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,50,private Vector2D[] loop;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,57,rivate Region polygon;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,56,private Region<Euclidean2D> polygon;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,77,rivate NestedLoops(final Point2D[] loop) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,76,private NestedLoops(final Vector2D[] loop) throws MathIllegalArgumentException {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,87,inal ArrayList<SubHyperplane> edges = new ArrayList<SubHyperplane>();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,88,oint2D current = loop[loop.length - 1];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,86,final ArrayList<SubHyperplane<Euclidean2D>> edges = new ArrayList<SubHyperplane<Euclidean2D>>();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,87,Vector2D current = loop[loop.length - 1];
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,90,inal Point2D previous = current;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,89,final Vector2D previous = current;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,93,inal Region region =  Region.buildConvex(Arrays.asList(new Hyperplane[] {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,94,"ew OrientedPoint((Point1D) line.toSubSpace(previous), false),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,95,"ew OrientedPoint((Point1D) line.toSubSpace(current),  true)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,97,"dges.add(new SubHyperplane(line, region));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,92,final IntervalsSet region =
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,93,"new IntervalsSet(line.toSubSpace(previous).getX(), line.toSubSpace(current).getX());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,94,"edges.add(new SubLine(line, region));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,103,olygon = polygon.getComplement();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,100,polygon = new RegionFactory<Euclidean2D>().getComplement(polygon);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,116,ublic void add(final Point2D[] bLoop) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,113,public void add(final Vector2D[] bLoop) throws MathIllegalArgumentException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,142,RegionFactory<Euclidean2D> factory = new RegionFactory<Euclidean2D>();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,146,"f (!Region.intersection(node.polygon, child.polygon).isEmpty()) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,144,"if (!factory.intersection(node.polygon, child.polygon).isEmpty()) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,157, provided through the {@link #add(Point2D[]) add} method if
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,155,* provided through the {@link #add(Vector2D[]) add} method if
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,177,inal Point2D tmp = loop[min];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/NestedLoops.java,175,final Vector2D tmp = loop[min];
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,20,mport java.util.Arrays;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,24,mport org.apache.commons.math.geometry.euclidean.oned.Point1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,23,import org.apache.commons.math.exception.MathInternalError;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,24,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,25,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,26,mport org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,29,import org.apache.commons.math.geometry.partitioning.AbstractRegion;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,33, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,34,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,35,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,35,ublic class PolygonsSet extends Region {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,37,"public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,38,rivate Point2D[][] vertices;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,40,private Vector2D[][] vertices;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,55,ublic PolygonsSet(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,57,public PolygonsSet(final BSPTree<Euclidean2D> tree) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,66, or a set of disjoints polyhedrons considered as a whole). In
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,68,* or a set of disjoint polyhedrons considered as a whole). In
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,79,ublic PolygonsSet(final Collection<SubHyperplane> boundary) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,81,public PolygonsSet(final Collection<SubHyperplane<Euclidean2D>> boundary) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,91,"his(buildConvex(boxBoundary(xMin, xMax, yMin, yMax)).getTree(false));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,93,"super(boxBoundary(xMin, xMax, yMin, yMax));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,101,"rivate static List<Hyperplane> boxBoundary(final double xMin, final double xMax,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,102,"inal double yMin, final double yMax) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,103,"inal Point2D minMin = new Point2D(xMin, yMin);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,104,"inal Point2D minMax = new Point2D(xMin, yMax);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,105,"inal Point2D maxMin = new Point2D(xMax, yMin);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,106,"inal Point2D maxMax = new Point2D(xMax, yMax);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,107,eturn Arrays.asList(new Hyperplane[] {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,103,"private static Line[] boxBoundary(final double xMin, final double xMax,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,104,"final double yMin, final double yMax) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,105,"final Vector2D minMin = new Vector2D(xMin, yMin);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,106,"final Vector2D minMax = new Vector2D(xMin, yMax);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,107,"final Vector2D maxMin = new Vector2D(xMax, yMin);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,108,"final Vector2D maxMax = new Vector2D(xMax, yMax);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,109,return new Line[] {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,116,ublic Region buildNew(final BSPTree tree) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,118,public PolygonsSet buildNew(final BSPTree<Euclidean2D> tree) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,123,inal Point2D[][] v = getVertices();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,125,final Vector2D[][] v = getVertices();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,128,etBarycenter(Point2D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,130,setBarycenter(Vector2D.NaN);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,131,"etBarycenter(new Point2D(0, 0));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,133,"setBarycenter(new Vector2D(0, 0));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,136,etBarycenter(Point2D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,138,setBarycenter(Vector2D.NaN);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,144,or (Point2D[] loop : v) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,145,ouble x1 = loop[loop.length - 1].x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,146,ouble y1 = loop[loop.length - 1].y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,147,or (final Point2D point : loop) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,146,for (Vector2D[] loop : v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,147,double x1 = loop[loop.length - 1].getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,148,double y1 = loop[loop.length - 1].getY();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,149,for (final Vector2D point : loop) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,150,1 = point.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,151,1 = point.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,152,x1 = point.getX();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,153,y1 = point.getY();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,162,etBarycenter(Point2D.UNDEFINED);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,164,setBarycenter(Vector2D.NaN);
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,165,"etBarycenter(new Point2D(sumX / (3 * sum), sumY / (3 * sum)));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,167,"setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,195,ublic Point2D[][] getVertices() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,197,public Vector2D[][] getVertices() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,198,ertices = new Point2D[0][];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,200,vertices = new Vector2D[0][];
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,201,/ sort the segmfinal ents according to their start point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,203,// sort the segments according to their start point
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,207,/ (their start segments final are naturally at the sorted set beginning)
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,209,// (their start segments are naturally at the sorted set beginning)
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,218,ertices = new Point2D[loops.size()][];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,220,vertices = new Vector2D[loops.size()][];
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,223,/ sifinal ngle infinite line
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,224,inal Line line = ((Segment) loop.get(0)).getLine();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,225,ertices[i++] = new Point2D[] {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,225,// single infinite line
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,226,final Line line = loop.get(0).getLine();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,227,vertices[i++] = new Vector2D[] {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,227,"Point2D) line.toSpace(new Point1D(-Float.MAX_VALUE)),"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,228,Point2D) line.toSpace(new Point1D(+Float.MAX_VALUE))
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,229,"line.toSpace(new Vector1D(-Float.MAX_VALUE)),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,230,line.toSpace(new Vector1D(+Float.MAX_VALUE))
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,230, else if (((Segment) loop.get(0)).getStart() == null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,231,/ open lofinal op with at least one real point
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,232,inal Point2D[] array = new Point2D[loop.size() + 2];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,232,} else if (loop.get(0).getStart() == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,233,// open loop with at least one real point
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,234,final Vector2D[] array = new Vector2D[loop.size() + 2];
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,238,ouble x =
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,239,(Point1D) segment.getLine().toSubSpace(segment.getEnd())).getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,240,double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,242,rray[j++] = (Point2D) segment.getLine().toSpace(new Point1D(x));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,243,array[j++] = segment.getLine().toSpace(new Vector1D(x));
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,252,ouble x =
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,253,(Point1D) segment.getLine().toSubSpace(segment.getStart())).getAbscissa();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,253,double x = segment.getLine().toSubSpace(segment.getStart()).getX();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,255,rray[j++] = (Point2D) segment.getLine().toSpace(new Point1D(x));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,255,array[j++] = segment.getLine().toSpace(new Vector1D(x));
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,261,inal Point2D[] array = new Point2D[loop.size()];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,261,final Vector2D[] array = new Vector2D[loop.size()];
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,288,egment segment = (Segment) node.getElement();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,288,Segment segment = node.getElement();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,290,inal Point2D globalStart = segment.getStart();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,291,oint2D end = segment.getEnd();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,290,final Vector2D globalStart = segment.getStart();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,291,Vector2D end = segment.getEnd();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,336,"hrow new RuntimeException(""internal error"");"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSet.java,336,throw new MathInternalError();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,22, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,22,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,23,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,27,rivate final Point2D      start;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,28,private final Vector2D      start;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,30,rivate final Point2D      end;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,31,private final Vector2D      end;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,43,"ublic Segment(final Point2D start, final Point2D end, final Line line) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,44,"public Segment(final Vector2D start, final Vector2D end, final Line line) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,49,"ew OrderedTuple(start.x, start.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,50,"new OrderedTuple(start.getX(), start.getY());"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,61,"ublic Segment(final Point2D start, final double dx, final double dy) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,62,"public Segment(final Vector2D start, final double dx, final double dy) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,65,"ortingKey = new OrderedTuple(start.x + dx, start.y + dy);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,66,"sortingKey = new OrderedTuple(start.getX() + dx, start.getY() + dy);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,71,ublic Point2D getStart() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,72,public Vector2D getStart() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,78,ublic Point2D getEnd() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Segment.java,79,public Vector2D getEnd() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,21,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,23,mport org.apache.commons.math.geometry.euclidean.oned.Point1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,24,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,25,import org.apache.commons.math.geometry.partitioning.AbstractSubHyperplane;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,26,mport org.apache.commons.math.geometry.partitioning.Region.BoundaryAttribute;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,28,import org.apache.commons.math.geometry.partitioning.BoundaryAttribute;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,31, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,33,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,34,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,33,lass SegmentsBuilder implements BSPTreeVisitor {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,36,class SegmentsBuilder implements BSPTreeVisitor<Euclidean2D> {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,44,ublic Order visitOrder(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,47,public Order visitOrder(final BSPTree<Euclidean2D> node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,49,ublic void visitInternalNode(final BSPTree node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,50,inal BoundaryAttribute attribute = (BoundaryAttribute) node.getAttribute();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,52,public void visitInternalNode(final BSPTree<Euclidean2D> node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,53,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,54,final BoundaryAttribute<Euclidean2D> attribute = (BoundaryAttribute<Euclidean2D>) node.getAttribute();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,60,ublic void visitLeafNode(final BSPTree node) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,64,public void visitLeafNode(final BSPTree<Euclidean2D> node) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,67,"rivate void addContribution(final SubHyperplane sub, final boolean reversed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,71,"private void addContribution(final SubHyperplane<Euclidean2D> sub, final boolean reversed) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,72,"@SuppressWarnings(""unchecked"")"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,73,"final AbstractSubHyperplane<Euclidean2D, Euclidean1D> absSub ="
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,74,"(AbstractSubHyperplane<Euclidean2D, Euclidean1D>) sub;"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,69,inal List<Interval> intervals = ((IntervalsSet) sub.getRemainingRegion()).asList();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,76,final List<Interval> intervals = ((IntervalsSet) absSub.getRemainingRegion()).asList();
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,71,inal Point2D start = Double.isInfinite(i.getLower()) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,72,ull : (Point2D) line.toSpace(new Point1D(i.getLower()));
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,73,inal Point2D end   = Double.isInfinite(i.getUpper()) ?
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,74,ull : (Point2D) line.toSpace(new Point1D(i.getUpper()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,78,final Vector2D start = Double.isInfinite(i.getLower()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,79,null : (Vector2D) line.toSpace(new Vector1D(i.getLower()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,80,final Vector2D end   = Double.isInfinite(i.getUpper()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SegmentBuilder.java,81,null : (Vector2D) line.toSpace(new Vector1D(i.getUpper()));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,17,package org.apache.commons.math.geometry.euclidean.twod;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,19,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,20,import org.apache.commons.math.geometry.euclidean.oned.IntervalsSet;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,21,import org.apache.commons.math.geometry.euclidean.oned.OrientedPoint;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,22,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,23,import org.apache.commons.math.geometry.partitioning.AbstractSubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,24,import org.apache.commons.math.geometry.partitioning.BSPTree;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,25,import org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,26,import org.apache.commons.math.geometry.partitioning.Region;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,27,import org.apache.commons.math.geometry.partitioning.Side;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,28,import org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,29,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,31,/** This class represents a sub-hyperplane for {@link Line}.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,32,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,33,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,35,"public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,37,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,38,* @param hyperplane underlying hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,39,* @param remainingRegion remaining region of the hyperplane
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,41,"public SubLine(final Hyperplane<Euclidean2D> hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,42,final Region<Euclidean1D> remainingRegion) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,43,"super(hyperplane, remainingRegion);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,46,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,47,"protected AbstractSubHyperplane<Euclidean2D, Euclidean1D> buildNew(final Hyperplane<Euclidean2D> hyperplane,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,48,final Region<Euclidean1D> remainingRegion) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,49,"return new SubLine(hyperplane, remainingRegion);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,52,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,53,public Side side(final Hyperplane<Euclidean2D> hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,55,final Line    thisLine  = (Line) getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,56,final Line    otherLine = (Line) hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,57,final Vector2D crossing  = thisLine.intersection(otherLine);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,59,if (crossing == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,60,"// the lines are parallel,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,61,final double global = otherLine.getOffset(thisLine);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,62,return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,65,// the lines do intersect
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,66,final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,67,final Vector1D x = (Vector1D) thisLine.toSubSpace(crossing);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,68,"return getRemainingRegion().side(new OrientedPoint(x, direct));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,72,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,73,public SplitSubHyperplane<Euclidean2D> split(final Hyperplane<Euclidean2D> hyperplane) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,75,final Line    thisLine  = (Line) getHyperplane();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,76,final Line    otherLine = (Line) hyperplane;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,77,final Vector2D crossing  = thisLine.intersection(otherLine);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,79,if (crossing == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,80,// the lines are parallel
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,81,final double global = otherLine.getOffset(thisLine);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,82,return (global < -1.0e-10) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,83,"new SplitSubHyperplane<Euclidean2D>(null, this) :"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,84,"new SplitSubHyperplane<Euclidean2D>(this, null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,87,// the lines do intersect
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,88,final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,89,final Vector1D x      = (Vector1D) thisLine.toSubSpace(crossing);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,90,"final SubHyperplane<Euclidean1D> subPlus  = new OrientedPoint(x, !direct).wholeHyperplane();"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,91,"final SubHyperplane<Euclidean1D> subMinus = new OrientedPoint(x,  direct).wholeHyperplane();"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,93,final BSPTree<Euclidean1D> splitTree = getRemainingRegion().getTree(false).split(subMinus);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,94,final BSPTree<Euclidean1D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,95,new BSPTree<Euclidean1D>(Boolean.FALSE) :
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,96,"new BSPTree<Euclidean1D>(subPlus, new BSPTree<Euclidean1D>(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,97,"splitTree.getPlus(), null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,98,final BSPTree<Euclidean1D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,99,new BSPTree<Euclidean1D>(Boolean.FALSE) :
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,100,"new BSPTree<Euclidean1D>(subMinus, new BSPTree<Euclidean1D>(Boolean.FALSE),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,101,"splitTree.getMinus(), null);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,103,"return new SplitSubHyperplane<Euclidean2D>(new SubLine(thisLine.copySelf(), new IntervalsSet(plusTree)),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/SubLine.java,104,"new SubLine(thisLine.copySelf(), new IntervalsSet(minusTree)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,23,mport org.apache.commons.math.geometry.euclidean.oned.Point1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,23,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,25,import org.apache.commons.math.geometry.partitioning.RegionFactory;
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,35,"ssert.assertEquals(4.0, ((Point1D) set.getBarycenter()).getAbscissa(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,36,"ssert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(2.3)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,37,"ssert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(5.7)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,38,"ssert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(1.2)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,39,"ssert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(8.7)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,40,"ssert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Point1D(3.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,36,"Assert.assertEquals(4.0, ((Vector1D) set.getBarycenter()).getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,37,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(2.3)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,38,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(5.7)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,39,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Vector1D(1.2)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,40,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Vector1D(8.7)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,41,"Assert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Vector1D(3.0)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,48,"ssert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(9.0)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,49,"ssert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(8.4)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,49,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(9.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,50,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Vector1D(8.4)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,52,"et.checkPoint(new Point1D(FastMath.pow(10.0, e))));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,53,"set.checkPoint(new Vector1D(FastMath.pow(10.0, e))));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,58,et = (IntervalsSet) set.getComplement();
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,59,set = (IntervalsSet) new RegionFactory<Euclidean1D>().getComplement(set);
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,67,RegionFactory<Euclidean1D> factory = new RegionFactory<Euclidean1D>();
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,67,"egion.intersection(Region.union(Region.difference(new IntervalsSet(1.0, 6.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,68,"ew IntervalsSet(3.0, 5.0)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,69,"ew IntervalsSet(9.0, Double.POSITIVE_INFINITY)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,70,"ew IntervalsSet(Double.NEGATIVE_INFINITY, 11.0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,69,"factory.intersection(factory.union(factory.difference(new IntervalsSet(1.0, 6.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,70,"new IntervalsSet(3.0, 5.0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,71,"new IntervalsSet(9.0, Double.POSITIVE_INFINITY)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,72,"new IntervalsSet(Double.NEGATIVE_INFINITY, 11.0));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,72,"ssert.assertEquals(5.9, ((Point1D) set.getBarycenter()).getAbscissa(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,73,"ssert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(0.0)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,74,"ssert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(4.0)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,75,"ssert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(8.0)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,76,"ssert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Point1D(12.0)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,77,"ssert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Point1D(1.2)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,78,"ssert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Point1D(5.9)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,79,"ssert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Point1D(9.01)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,80,"ssert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(5.0)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,81,"ssert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Point1D(11.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,74,"Assert.assertEquals(5.9, ((Vector1D) set.getBarycenter()).getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,75,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Vector1D(0.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,76,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Vector1D(4.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,77,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Vector1D(8.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,78,"Assert.assertEquals(Region.Location.OUTSIDE,  set.checkPoint(new Vector1D(12.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,79,"Assert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Vector1D(1.2)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,80,"Assert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Vector1D(5.9)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,81,"Assert.assertEquals(Region.Location.INSIDE,   set.checkPoint(new Vector1D(9.01)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,82,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(5.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/oned/IntervalsSetTest.java,83,"Assert.assertEquals(Region.Location.BOUNDARY, set.checkPoint(new Vector1D(11.0)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,21,mport org.apache.commons.math.geometry.euclidean.threed.Point3D;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,32,"ssert.assertTrue(p.contains(new Point3D(0, 0, 1)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,33,"ssert.assertTrue(p.contains(new Point3D(17, -32, 1)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,34,"ssert.assertTrue(! p.contains(new Point3D(17, -32, 1.001)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,31,"Assert.assertTrue(p.contains(new Vector3D(0, 0, 1)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,32,"Assert.assertTrue(p.contains(new Vector3D(17, -32, 1)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,33,"Assert.assertTrue(! p.contains(new Vector3D(17, -32, 1.001)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,41,"ssert.assertEquals(-5.0, p.getOffset(new Point3D(-4, 0, 0)), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,42,"ssert.assertEquals(+5.0, p.getOffset(new Point3D(6, 10, -12)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,40,"Assert.assertEquals(-5.0, p.getOffset(new Vector3D(-4, 0, 0)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,41,"Assert.assertEquals(+5.0, p.getOffset(new Vector3D(6, 10, -12)), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,44,".getOffset(new Point3D(1.0, p1, 0.3, p.getNormal())),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,43,"p.getOffset(new Vector3D(1.0, p1, 0.3, p.getNormal())),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,47,".getOffset(new Point3D(1.0, p1, -0.3, p.getNormal())),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,46,"p.getOffset(new Vector3D(1.0, p1, -0.3, p.getNormal())),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,59,"oint3D p1 = new Point3D(1.2, 3.4, -5.8);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,60,"oint3D p2 = new Point3D(3.4, -5.8, 1.2);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,61,"oint3D p3 = new Point3D(-2.0, 4.3, 0.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,58,"Vector3D p1 = new Vector3D(1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,59,"Vector3D p2 = new Vector3D(3.4, -5.8, 1.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,60,"Vector3D p3 = new Vector3D(-2.0, 4.3, 0.7);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,70,"oint3D p1 = new Point3D(1.2, 3.4, -5.8);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,71,"oint3D p2 = new Point3D(3.4, -5.8, 1.2);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,72,"oint3D p3 = new Point3D(-2.0, 4.3, 0.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,69,"Vector3D p1 = new Vector3D(1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,70,"Vector3D p2 = new Vector3D(3.4, -5.8, 1.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,71,"Vector3D p3 = new Vector3D(-2.0, 4.3, 0.7);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,95,"oint3D p1 = new Point3D(1.2, 3.4, -5.8);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,96,"oint3D p2 = new Point3D(3.4, -5.8, 1.2);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,97,"oint3D p3 = new Point3D(-2.0, 4.3, 0.7);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,94,"Vector3D p1 = new Vector3D(1.2, 3.4, -5.8);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,95,"Vector3D p2 = new Vector3D(3.4, -5.8, 1.2);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,96,"Vector3D p3 = new Vector3D(-2.0, 4.3, 0.7);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,121,oint3D point = p.intersection(l);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PlaneTest.java,120,Vector3D point = p.intersection(l);
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,19,mport java.util.Arrays;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,21,mport org.apache.commons.math.geometry.euclidean.threed.Plane;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,22,mport org.apache.commons.math.geometry.euclidean.threed.Point3D;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,23,mport org.apache.commons.math.geometry.euclidean.threed.PolyhedronsSet;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,24,mport org.apache.commons.math.geometry.euclidean.threed.Rotation;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,25,mport org.apache.commons.math.geometry.euclidean.threed.Vector3D;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,26,mport org.apache.commons.math.geometry.euclidean.twod.Point2D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,20,import org.apache.commons.math.geometry.euclidean.twod.Vector2D;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,30,mport org.apache.commons.math.geometry.partitioning.Hyperplane;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,23,import org.apache.commons.math.geometry.partitioning.BoundaryAttribute;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,32,mport org.apache.commons.math.geometry.partitioning.SubHyperplane;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,25,import org.apache.commons.math.geometry.partitioning.RegionFactory;
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,56,"ssert.assertEquals(expected, tree.checkPoint(new Point3D(x, y, z)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,49,"Assert.assertEquals(expected, tree.checkPoint(new Vector3D(x, y, z)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,60,"heckPoints(Region.Location.BOUNDARY, tree, new Point3D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,61,"ew Point3D(0.0, 0.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,62,"ew Point3D(1.0, 0.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,63,"ew Point3D(0.5, 0.0, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,64,"ew Point3D(0.5, 1.0, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,65,"ew Point3D(0.5, 0.5, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,66,"ew Point3D(0.5, 0.5, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,53,"checkPoints(Region.Location.BOUNDARY, tree, new Vector3D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,54,"new Vector3D(0.0, 0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,55,"new Vector3D(1.0, 0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,56,"new Vector3D(0.5, 0.0, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,57,"new Vector3D(0.5, 1.0, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,58,"new Vector3D(0.5, 0.5, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,59,"new Vector3D(0.5, 0.5, 1.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,68,"heckPoints(Region.Location.OUTSIDE, tree, new Point3D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,69,"ew Point3D(0.0, 1.2, 1.2),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,70,"ew Point3D(1.0, 1.2, 1.2),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,71,"ew Point3D(1.2, 0.0, 1.2),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,72,"ew Point3D(1.2, 1.0, 1.2),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,73,"ew Point3D(1.2, 1.2, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,74,"ew Point3D(1.2, 1.2, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,61,"checkPoints(Region.Location.OUTSIDE, tree, new Vector3D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,62,"new Vector3D(0.0, 1.2, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,63,"new Vector3D(1.0, 1.2, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,64,"new Vector3D(1.2, 0.0, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,65,"new Vector3D(1.2, 1.0, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,66,"new Vector3D(1.2, 1.2, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,67,"new Vector3D(1.2, 1.2, 1.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,80,"oint3D vertex1 = new Point3D(1, 2, 3);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,81,"oint3D vertex2 = new Point3D(2, 2, 4);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,82,"oint3D vertex3 = new Point3D(2, 3, 3);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,83,"oint3D vertex4 = new Point3D(1, 3, 4);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,73,"Vector3D vertex1 = new Vector3D(1, 2, 3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,74,"Vector3D vertex2 = new Vector3D(2, 2, 4);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,75,"Vector3D vertex3 = new Vector3D(2, 3, 3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,76,"Vector3D vertex4 = new Vector3D(1, 3, 4);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,77,"@SuppressWarnings(""unchecked"")"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,85,PolyhedronsSet) Region.buildConvex(Arrays.asList(new Hyperplane[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,79,(PolyhedronsSet) new RegionFactory<Euclidean3D>().buildConvex(
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,89,"ew Plane(vertex1, vertex2, vertex4)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,83,"new Plane(vertex1, vertex2, vertex4));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,98,"heckPoints(Region.Location.BOUNDARY, tree, new Point3D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,91,"checkPoints(Region.Location.BOUNDARY, tree, new Vector3D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,100,"ew Point3D(third, vertex1, third, vertex2, third, vertex3),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,101,"ew Point3D(third, vertex2, third, vertex3, third, vertex4),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,102,"ew Point3D(third, vertex3, third, vertex4, third, vertex1),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,103,"ew Point3D(third, vertex4, third, vertex1, third, vertex2)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,93,"new Vector3D(third, vertex1, third, vertex2, third, vertex3),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,94,"new Vector3D(third, vertex2, third, vertex3, third, vertex4),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,95,"new Vector3D(third, vertex3, third, vertex4, third, vertex1),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,96,"new Vector3D(third, vertex4, third, vertex1, third, vertex2)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,105,"heckPoints(Region.Location.OUTSIDE, tree, new Point3D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,106,"ew Point3D(1, 2, 4),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,107,"ew Point3D(2, 2, 3),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,108,"ew Point3D(2, 3, 4),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,109,"ew Point3D(1, 3, 3)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,98,"checkPoints(Region.Location.OUTSIDE, tree, new Vector3D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,99,"new Vector3D(1, 2, 4),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,100,"new Vector3D(2, 2, 3),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,101,"new Vector3D(2, 3, 4),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,102,"new Vector3D(1, 3, 3)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,112,"@SuppressWarnings(""unchecked"")"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,120,PolyhedronsSet) Region.buildConvex(Arrays.asList(new Hyperplane[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,114,(PolyhedronsSet) new RegionFactory<Euclidean3D>().buildConvex(
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,124,"ew Plane(vertex1, vertex2, vertex4)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,118,"new Plane(vertex1, vertex2, vertex4));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,155,ree.getTree(true).visit(new BSPTreeVisitor() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,148,tree.getTree(true).visit(new BSPTreeVisitor<Euclidean3D>() {
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,157,ublic Order visitOrder(BSPTree node) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,150,public Order visitOrder(BSPTree<Euclidean3D> node) {
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,161,ublic void visitInternalNode(BSPTree node) {
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,162,egion.BoundaryAttribute attribute =
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,163,Region.BoundaryAttribute) node.getAttribute();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,154,public void visitInternalNode(BSPTree<Euclidean3D> node) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,155,"@SuppressWarnings(""unchecked"")"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,156,BoundaryAttribute<Euclidean3D> attribute =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,157,(BoundaryAttribute<Euclidean3D>) node.getAttribute();
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,165,heckFacet(attribute.getPlusOutside());
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,159,checkFacet((SubPlane) attribute.getPlusOutside());
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,168,heckFacet(attribute.getPlusInside());
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,162,checkFacet((SubPlane) attribute.getPlusInside());
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,172,ublic void visitLeafNode(BSPTree node) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,166,public void visitLeafNode(BSPTree<Euclidean3D> node) {
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,175,rivate void checkFacet(SubHyperplane facet) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,169,private void checkFacet(SubPlane facet) {
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,177,oint2D[][] vertices =
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,171,Vector2D[][] vertices =
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,225,olyhedronsSet tree =
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,226,"PolyhedronsSet) Region.union(xBeam, Region.union(yBeam, zBeam));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,219,RegionFactory<Euclidean3D> factory = new RegionFactory<Euclidean3D>();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,220,"PolyhedronsSet tree = (PolyhedronsSet) factory.union(xBeam, factory.union(yBeam, zBeam));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,237,"rivate void checkPoints(Region.Location expected, PolyhedronsSet tree, Point3D[] points) {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/PolyhedronsSetTest.java,231,"private void checkPoints(Region.Location expected, PolyhedronsSet tree, Vector3D[] points) {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,19,mport org.apache.commons.math.geometry.euclidean.oned.Point1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,19,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,20,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,21,mport org.apache.commons.math.geometry.euclidean.twod.Point2D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,22,import org.apache.commons.math.geometry.euclidean.twod.Vector2D;
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,33,"ine l = new Line(new Point2D(0, 1), new Point2D(1, 2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,34,"ssert.assertTrue(l.contains(new Point2D(0, 1)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,35,"ssert.assertTrue(l.contains(new Point2D(1, 2)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,36,"ssert.assertTrue(l.contains(new Point2D(7, 8)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,37,"ssert.assertTrue(! l.contains(new Point2D(8, 7)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,34,"Line l = new Line(new Vector2D(0, 1), new Vector2D(1, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,35,"Assert.assertTrue(l.contains(new Vector2D(0, 1)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,36,"Assert.assertTrue(l.contains(new Vector2D(1, 2)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,37,"Assert.assertTrue(l.contains(new Vector2D(7, 8)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,38,"Assert.assertTrue(! l.contains(new Vector2D(8, 7)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,42,"ine l = new Line(new Point2D(2, 1), new Point2D(-2, -2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,43,"Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,44,"(Point1D) l.toSubSpace(new Point2D(-3,  4))).getAbscissa(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,45,"((Vector1D) l.toSubSpace(new Vector2D(-3,  4))).getX(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,47,"(Point1D) l.toSubSpace(new Point2D( 3, -4))).getAbscissa(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,48,"((Vector1D) l.toSubSpace(new Vector2D( 3, -4))).getX(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,50,"(Point1D) l.toSubSpace(new Point2D( 7, -1))).getAbscissa(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,51,"((Vector1D) l.toSubSpace(new Vector2D( 7, -1))).getX(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,53,"(Point1D) l.toSubSpace(new Point2D(-1, -7))).getAbscissa(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,54,"((Vector1D) l.toSubSpace(new Vector2D(-1, -7))).getX(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,59,"ine l = new Line(new Point2D(2, 1), new Point2D(-2, -2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,60,"ssert.assertEquals(-5.0, l.getOffset(new Point2D(5, -3)), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,61,"ssert.assertEquals(+5.0, l.getOffset(new Point2D(-5, 2)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,60,"Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,61,"Assert.assertEquals(-5.0, l.getOffset(new Vector2D(5, -3)), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,62,"Assert.assertEquals(+5.0, l.getOffset(new Vector2D(-5, 2)), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,66,"ine l = new Line(new Point2D(2, 1), new Point2D(-2, -2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,67,"Line l = new Line(new Vector2D(2, 1), new Vector2D(-2, -2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,68,oint1D pA = new Point1D(a);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,69,oint2D point = (Point2D) l.toSpace(pA);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,70,"ssert.assertEquals(a, ((Point1D) l.toSubSpace(point)).getAbscissa(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,69,Vector1D pA = new Vector1D(a);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,70,Vector2D point = (Vector2D) l.toSpace(pA);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,71,"Assert.assertEquals(a, ((Vector1D) l.toSubSpace(point)).getX(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,74,"ssert.assertEquals(a, ((Point1D) l.toSubSpace(point)).getAbscissa(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,75,"Assert.assertEquals(a, ((Vector1D) l.toSubSpace(point)).getX(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,82,"ine l1 = new Line(new Point2D(0, 1), new Point2D(1, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,83,"Line l1 = new Line(new Vector2D(0, 1), new Vector2D(1, 2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,84,"ine l2 = new Line(new Point2D(1, 2), new Point2D(0, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,85,"Line l2 = new Line(new Vector2D(1, 2), new Vector2D(0, 1));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,90,"ine l1 = new Line(new Point2D(0, 1), new Point2D(1, 2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,91,"ine l2 = new Line(new Point2D(2, 2), new Point2D(3, 3));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,91,"Line l1 = new Line(new Vector2D(0, 1), new Vector2D(1, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,92,"Line l2 = new Line(new Vector2D(2, 2), new Vector2D(3, 3));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,93,"ine l3 = new Line(new Point2D(1, 0), new Point2D(0.5, -0.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,94,"Line l3 = new Line(new Vector2D(1, 0), new Vector2D(0.5, -0.5));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,95,"ine l4 = new Line(new Point2D(1, 0), new Point2D(0.5, -0.51));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,96,"Line l4 = new Line(new Vector2D(1, 0), new Vector2D(0.5, -0.51));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,102,"ine l1 = new Line(new Point2D(1.0 ,1.0), new Point2D(4.0 ,1.0));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,103,"ransform t1 = Line.getTransform(new AffineTransform(0.0, 0.5,"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,104,"1.0, 0.0,"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,105,".0, 1.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,103,"Line l1 = new Line(new Vector2D(1.0 ,1.0), new Vector2D(4.0 ,1.0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,104,"Transform<Euclidean2D, Euclidean1D> t1 ="
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,105,"Line.getTransform(new AffineTransform(0.0, 0.5, -1.0, 0.0, 1.0, 1.5));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,110,"ine l2 = new Line(new Point2D(0.0, 0.0), new Point2D(1.0, 1.0));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,111,"ransform t2 = Line.getTransform(new AffineTransform(0.0, 0.5,"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,112,"1.0, 0.0,"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,113,".0, 1.5));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,110,"Line l2 = new Line(new Vector2D(0.0, 0.0), new Vector2D(1.0, 1.0));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,111,"Transform<Euclidean2D, Euclidean1D> t2 ="
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,112,"Line.getTransform(new AffineTransform(0.0, 0.5, -1.0, 0.0, 1.0, 1.5));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,122,"ine    l1 = new Line(new Point2D( 0, 1), new Point2D(1, 2));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,123,"ine    l2 = new Line(new Point2D(-1, 2), new Point2D(2, 1));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,124,oint2D p  = (Point2D) l1.intersection(l2);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,125,"ssert.assertEquals(0.5, p.x, 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,126,"ssert.assertEquals(1.5, p.y, 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,121,"Line    l1 = new Line(new Vector2D( 0, 1), new Vector2D(1, 2));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,122,"Line    l2 = new Line(new Vector2D(-1, 2), new Vector2D(2, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,123,Vector2D p  = (Vector2D) l1.intersection(l2);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,124,"Assert.assertEquals(0.5, p.getX(), 1.0e-10);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/LineTest.java,125,"Assert.assertEquals(1.5, p.getY(), 1.0e-10);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,24,mport org.apache.commons.math.geometry.euclidean.oned.Point1D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,24,import org.apache.commons.math.geometry.euclidean.oned.Vector1D;
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,26,mport org.apache.commons.math.geometry.euclidean.twod.Point2D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,26,import org.apache.commons.math.geometry.euclidean.twod.Vector2D;
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,30,import org.apache.commons.math.geometry.partitioning.RegionFactory;
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,39,oint2D[][] vertices = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,40,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,41,"ew Point2D(36.0, 22.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,42,"ew Point2D(39.0, 32.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,43,"ew Point2D(19.0, 32.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,44,"ew Point2D( 6.0, 16.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,45,"ew Point2D(31.0, 10.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,46,"ew Point2D(42.0, 16.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,47,"ew Point2D(34.0, 20.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,48,"ew Point2D(29.0, 19.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,49,"ew Point2D(23.0, 22.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,50,"ew Point2D(33.0, 25.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,40,Vector2D[][] vertices = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,41,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,42,"new Vector2D(36.0, 22.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,43,"new Vector2D(39.0, 32.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,44,"new Vector2D(19.0, 32.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,45,"new Vector2D( 6.0, 16.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,46,"new Vector2D(31.0, 10.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,47,"new Vector2D(42.0, 16.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,48,"new Vector2D(34.0, 20.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,49,"new Vector2D(29.0, 19.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,50,"new Vector2D(23.0, 22.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,51,"new Vector2D(33.0, 25.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,54,"ssert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Point2D(50.0, 30.0)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,55,"heckPoints(Region.Location.INSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,56,"ew Point2D(30.0, 15.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,57,"ew Point2D(15.0, 20.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,58,"ew Point2D(24.0, 25.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,59,"ew Point2D(35.0, 30.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,60,"ew Point2D(19.0, 17.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,55,"Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Vector2D(50.0, 30.0)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,56,"checkPoints(Region.Location.INSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,57,"new Vector2D(30.0, 15.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,58,"new Vector2D(15.0, 20.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,59,"new Vector2D(24.0, 25.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,60,"new Vector2D(35.0, 30.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,61,"new Vector2D(19.0, 17.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,62,"heckPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,63,"ew Point2D(50.0, 30.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,64,"ew Point2D(30.0, 35.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,65,"ew Point2D(10.0, 25.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,66,"ew Point2D(10.0, 10.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,67,"ew Point2D(40.0, 10.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,68,"ew Point2D(50.0, 15.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,69,"ew Point2D(30.0, 22.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,63,"checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,64,"new Vector2D(50.0, 30.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,65,"new Vector2D(30.0, 35.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,66,"new Vector2D(10.0, 25.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,67,"new Vector2D(10.0, 10.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,68,"new Vector2D(40.0, 10.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,69,"new Vector2D(50.0, 15.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,70,"new Vector2D(30.0, 22.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,71,"heckPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,72,"ew Point2D(30.0, 32.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,73,"ew Point2D(34.0, 20.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,72,"checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,73,"new Vector2D(30.0, 32.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,74,"new Vector2D(34.0, 20.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,80,oint2D[][] vertices = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,81,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,82,"ew Point2D( 0.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,83,"ew Point2D( 0.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,84,"ew Point2D(-0.1, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,85,"ew Point2D(-0.1, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,86,"ew Point2D(-0.3, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,87,"ew Point2D(-0.3, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,88,"ew Point2D(-1.3, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,89,"ew Point2D(-1.3, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,90,"ew Point2D(-1.8, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,91,"ew Point2D(-1.8 - 1.0 / FastMath.sqrt(2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,81,Vector2D[][] vertices = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,82,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,83,"new Vector2D( 0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,84,"new Vector2D( 0.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,85,"new Vector2D(-0.1, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,86,"new Vector2D(-0.1, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,87,"new Vector2D(-0.3, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,88,"new Vector2D(-0.3, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,89,"new Vector2D(-1.3, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,90,"new Vector2D(-1.3, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,91,"new Vector2D(-1.8, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,92,"new Vector2D(-1.8 - 1.0 / FastMath.sqrt(2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,105,oint2D[][] vertices = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,106,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,107,"ew Point2D(0.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,108,"ew Point2D(3.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,109,"ew Point2D(3.0, 3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,110,"ew Point2D(0.0, 3.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,111,", new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,112,"ew Point2D(1.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,113,"ew Point2D(2.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,114,"ew Point2D(2.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,115,"ew Point2D(1.0, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,106,Vector2D[][] vertices = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,107,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,108,"new Vector2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,109,"new Vector2D(3.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,110,"new Vector2D(3.0, 3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,111,"new Vector2D(0.0, 3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,112,"}, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,113,"new Vector2D(1.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,114,"new Vector2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,115,"new Vector2D(2.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,116,"new Vector2D(1.0, 1.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,119,"heckPoints(Region.Location.INSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,120,"ew Point2D(0.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,121,"ew Point2D(1.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,122,"ew Point2D(2.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,123,"ew Point2D(0.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,124,"ew Point2D(2.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,125,"ew Point2D(0.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,126,"ew Point2D(1.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,127,"ew Point2D(2.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,128,"ew Point2D(0.5, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,120,"checkPoints(Region.Location.INSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,121,"new Vector2D(0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,122,"new Vector2D(1.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,123,"new Vector2D(2.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,124,"new Vector2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,125,"new Vector2D(2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,126,"new Vector2D(0.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,127,"new Vector2D(1.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,128,"new Vector2D(2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,129,"new Vector2D(0.5, 1.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,130,"heckPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,131,"ew Point2D(1.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,132,"ew Point2D(3.5, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,133,"ew Point2D(4.0, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,134,"ew Point2D(6.0, 6.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,131,"checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,132,"new Vector2D(1.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,133,"new Vector2D(3.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,134,"new Vector2D(4.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,135,"new Vector2D(6.0, 6.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,136,"heckPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,137,"ew Point2D(1.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,138,"ew Point2D(1.5, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,139,"ew Point2D(1.5, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,140,"ew Point2D(1.5, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,141,"ew Point2D(1.5, 3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,142,"ew Point2D(3.0, 3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,137,"checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,138,"new Vector2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,139,"new Vector2D(1.5, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,140,"new Vector2D(1.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,141,"new Vector2D(1.5, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,142,"new Vector2D(1.5, 3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,143,"new Vector2D(3.0, 3.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,149,oint2D[][] vertices = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,150,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,151,"ew Point2D(0.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,152,"ew Point2D(2.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,153,"ew Point2D(1.0, 2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,154,", new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,155,"ew Point2D(4.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,156,"ew Point2D(5.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,157,"ew Point2D(3.0, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,150,Vector2D[][] vertices = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,151,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,152,"new Vector2D(0.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,153,"new Vector2D(2.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,154,"new Vector2D(1.0, 2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,155,"}, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,156,"new Vector2D(4.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,157,"new Vector2D(5.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,158,"new Vector2D(3.0, 1.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,161,"ssert.assertEquals(Region.Location.INSIDE, set.checkPoint(new Point2D(1.0, 1.5)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,162,"heckPoints(Region.Location.INSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,163,"ew Point2D(1.0, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,164,"ew Point2D(4.5, 0.8)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,162,"Assert.assertEquals(Region.Location.INSIDE, set.checkPoint(new Vector2D(1.0, 1.5)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,163,"checkPoints(Region.Location.INSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,164,"new Vector2D(1.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,165,"new Vector2D(4.5, 0.8)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,166,"heckPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,167,"ew Point2D(1.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,168,"ew Point2D(3.5, 1.2),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,169,"ew Point2D(2.5, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,170,"ew Point2D(3.0, 4.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,167,"checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,168,"new Vector2D(1.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,169,"new Vector2D(3.5, 1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,170,"new Vector2D(2.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,171,"new Vector2D(3.0, 4.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,172,"heckPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,173,"ew Point2D(1.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,174,"ew Point2D(3.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,175,"ew Point2D(0.0, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,173,"checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,174,"new Vector2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,175,"new Vector2D(3.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,176,"new Vector2D(0.0, 1.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,182,oint2D[][] vertices = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,183,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,184,"ew Point2D(1.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,185,"ew Point2D(2.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,186,"ew Point2D(3.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,187,"ew Point2D(2.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,188,"ew Point2D(1.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,189,"ew Point2D(0.0, 1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,183,Vector2D[][] vertices = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,184,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,185,"new Vector2D(1.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,186,"new Vector2D(2.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,187,"new Vector2D(3.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,188,"new Vector2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,189,"new Vector2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,190,"new Vector2D(0.0, 1.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,198,oint2D[][] vertices = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,199,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,200,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,201,"ew Point2D( 1.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,202,"ew Point2D( 1.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,203,"ew Point2D( 0.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,204,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,205,"ew Point2D(-1.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,206,"ew Point2D(-1.0, -1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,207,"ew Point2D( 0.0, -1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,199,Vector2D[][] vertices = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,200,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,201,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,202,"new Vector2D( 1.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,203,"new Vector2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,204,"new Vector2D( 0.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,205,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,206,"new Vector2D(-1.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,207,"new Vector2D(-1.0, -1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,208,"new Vector2D( 0.0, -1.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,216,oint2D[][] vertices = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,217,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,218,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,219,"ew Point2D( 2.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,220,"ew Point2D( 2.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,221,"ew Point2D( 3.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,222,"ew Point2D( 3.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,223,"ew Point2D( 1.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,224,"ew Point2D( 1.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,225,"ew Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,217,Vector2D[][] vertices = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,218,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,219,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,220,"new Vector2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,221,"new Vector2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,222,"new Vector2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,223,"new Vector2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,224,"new Vector2D( 1.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,225,"new Vector2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,226,"new Vector2D( 0.0,  2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,230,"ine l1 = new Line(new Point2D(-1.5, 0.0), FastMath.PI / 4);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,231,ubHyperplane s1 = set.intersection(new SubHyperplane(l1));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,231,"Line l1 = new Line(new Vector2D(-1.5, 0.0), FastMath.PI / 4);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,232,SubLine s1 = (SubLine) set.intersection(l1.wholeHyperplane());
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,235,oint2D p10Lower = (Point2D) l1.toSpace(new Point1D(v10.getLower()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,236,Vector2D p10Lower = (Vector2D) l1.toSpace(new Vector1D(v10.getLower()));
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,238,oint2D p10Upper = (Point2D) l1.toSpace(new Point1D(v10.getUpper()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,239,Vector2D p10Upper = (Vector2D) l1.toSpace(new Vector1D(v10.getUpper()));
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,242,oint2D p11Lower = (Point2D) l1.toSpace(new Point1D(v11.getLower()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,243,Vector2D p11Lower = (Vector2D) l1.toSpace(new Vector1D(v11.getLower()));
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,245,oint2D p11Upper = (Point2D) l1.toSpace(new Point1D(v11.getUpper()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,246,Vector2D p11Upper = (Vector2D) l1.toSpace(new Vector1D(v11.getUpper()));
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,249,"ine l2 = new Line(new Point2D(-1.0, 2.0), 0);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,250,ubHyperplane s2 = set.intersection(new SubHyperplane(l2));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,250,"Line l2 = new Line(new Vector2D(-1.0, 2.0), 0);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,251,SubLine s2 = (SubLine) set.intersection(l2.wholeHyperplane());
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,254,oint2D p20Lower = (Point2D) l2.toSpace(new Point1D(v20.getLower()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,255,Vector2D p20Lower = (Vector2D) l2.toSpace(new Vector1D(v20.getLower()));
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,257,oint2D p20Upper = (Point2D) l2.toSpace(new Point1D(v20.getUpper()));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,258,Vector2D p20Upper = (Vector2D) l2.toSpace(new Vector1D(v20.getUpper()));
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,265,oint2D[][] vertices1 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,266,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,267,"ew Point2D(0.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,268,"ew Point2D(4.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,269,"ew Point2D(1.4, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,270,"ew Point2D(0.0, 3.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,266,Vector2D[][] vertices1 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,267,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,268,"new Vector2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,269,"new Vector2D(4.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,270,"new Vector2D(1.4, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,271,"new Vector2D(0.0, 3.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,274,oint2D[][] vertices2 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,275,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,276,"ew Point2D(1.4,  0.2),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,277,"ew Point2D(2.8, -1.2),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,278,"ew Point2D(2.5,  0.6)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,275,Vector2D[][] vertices2 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,276,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,277,"new Vector2D(1.4,  0.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,278,"new Vector2D(2.8, -1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,279,"new Vector2D(2.5,  0.6)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,283,"olygonsSet set = (PolygonsSet) Region.union(set1.copySelf(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,284,et2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,284,PolygonsSet set =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,285,"(PolygonsSet) new RegionFactory<Euclidean2D>().union(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,286,set2.copySelf());
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,287,"heckVertices(set.getVertices(), new Point2D[][] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,288,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,289,"ew Point2D(0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,290,"ew Point2D(1.6,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,291,"ew Point2D(2.8, -1.2),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,292,"ew Point2D(2.6,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,293,"ew Point2D(4.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,294,"ew Point2D(1.4,  1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,295,"ew Point2D(0.0,  3.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,289,"checkVertices(set.getVertices(), new Vector2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,290,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,291,"new Vector2D(0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,292,"new Vector2D(1.6,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,293,"new Vector2D(2.8, -1.2),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,294,"new Vector2D(2.6,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,295,"new Vector2D(4.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,296,"new Vector2D(1.4,  1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,297,"new Vector2D(0.0,  3.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,303,oint2D[][] vertices1 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,304,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,305,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,306,"ew Point2D( 2.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,307,"ew Point2D( 2.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,308,"ew Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,305,Vector2D[][] vertices1 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,306,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,307,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,308,"new Vector2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,309,"new Vector2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,310,"new Vector2D( 0.0,  2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,312,oint2D[][] vertices2 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,313,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,314,"ew Point2D( 1.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,315,"ew Point2D( 3.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,316,"ew Point2D( 3.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,317,"ew Point2D( 1.0,  3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,314,Vector2D[][] vertices2 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,315,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,316,"new Vector2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,317,"new Vector2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,318,"new Vector2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,319,"new Vector2D( 1.0,  3.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,321,"olygonsSet set  = (PolygonsSet) Region.union(set1.copySelf(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,322,et2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,323,"PolygonsSet set  = (PolygonsSet) new RegionFactory<Euclidean2D>().union(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,324,set2.copySelf());
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,325,"heckVertices(set.getVertices(), new Point2D[][] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,326,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,327,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,328,"ew Point2D( 2.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,329,"ew Point2D( 2.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,330,"ew Point2D( 3.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,331,"ew Point2D( 3.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,332,"ew Point2D( 1.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,333,"ew Point2D( 1.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,334,"ew Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,327,"checkVertices(set.getVertices(), new Vector2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,328,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,329,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,330,"new Vector2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,331,"new Vector2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,332,"new Vector2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,333,"new Vector2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,334,"new Vector2D( 1.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,335,"new Vector2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,336,"new Vector2D( 0.0,  2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,337,"heckPoints(Region.Location.INSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,338,"ew Point2D(1.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,339,"ew Point2D(0.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,340,"ew Point2D(2.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,341,"ew Point2D(2.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,342,"ew Point2D(0.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,343,"ew Point2D(1.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,344,"ew Point2D(1.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,345,"ew Point2D(1.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,346,"ew Point2D(2.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,347,"ew Point2D(2.5, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,339,"checkPoints(Region.Location.INSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,340,"new Vector2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,341,"new Vector2D(0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,342,"new Vector2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,343,"new Vector2D(2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,344,"new Vector2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,345,"new Vector2D(1.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,346,"new Vector2D(1.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,347,"new Vector2D(1.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,348,"new Vector2D(2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,349,"new Vector2D(2.5, 2.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,349,"heckPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,350,"ew Point2D(-0.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,351,"ew Point2D( 0.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,352,"ew Point2D( 2.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,353,"ew Point2D( 3.5, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,351,"checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,352,"new Vector2D(-0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,353,"new Vector2D( 0.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,354,"new Vector2D( 2.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,355,"new Vector2D( 3.5, 2.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,355,"heckPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,356,"ew Point2D(0.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,357,"ew Point2D(0.5, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,358,"ew Point2D(2.0, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,359,"ew Point2D(2.5, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,360,"ew Point2D(3.0, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,357,"checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,358,"new Vector2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,359,"new Vector2D(0.5, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,360,"new Vector2D(2.0, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,361,"new Vector2D(2.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,362,"new Vector2D(3.0, 2.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,367,oint2D[][] vertices1 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,368,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,369,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,370,"ew Point2D( 2.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,371,"ew Point2D( 2.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,372,"ew Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,369,Vector2D[][] vertices1 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,370,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,371,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,372,"new Vector2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,373,"new Vector2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,374,"new Vector2D( 0.0,  2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,376,oint2D[][] vertices2 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,377,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,378,"ew Point2D( 1.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,379,"ew Point2D( 3.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,380,"ew Point2D( 3.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,381,"ew Point2D( 1.0,  3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,378,Vector2D[][] vertices2 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,379,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,380,"new Vector2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,381,"new Vector2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,382,"new Vector2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,383,"new Vector2D( 1.0,  3.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,385,"olygonsSet set  = (PolygonsSet) Region.intersection(set1.copySelf(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,386,et2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,387,"PolygonsSet set  = (PolygonsSet) new RegionFactory<Euclidean2D>().intersection(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,388,set2.copySelf());
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,389,"heckVertices(set.getVertices(), new Point2D[][] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,390,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,391,"ew Point2D( 1.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,392,"ew Point2D( 2.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,393,"ew Point2D( 2.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,394,"ew Point2D( 1.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,391,"checkVertices(set.getVertices(), new Vector2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,392,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,393,"new Vector2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,394,"new Vector2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,395,"new Vector2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,396,"new Vector2D( 1.0,  2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,397,"heckPoints(Region.Location.INSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,398,"ew Point2D(1.5, 1.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,399,"checkPoints(Region.Location.INSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,400,"new Vector2D(1.5, 1.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,400,"heckPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,401,"ew Point2D(0.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,402,"ew Point2D(2.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,403,"ew Point2D(1.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,404,"ew Point2D(0.5, 0.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,402,"checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,403,"new Vector2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,404,"new Vector2D(2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,405,"new Vector2D(1.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,406,"new Vector2D(0.5, 0.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,406,"heckPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,407,"ew Point2D(1.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,408,"ew Point2D(2.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,409,"ew Point2D(1.0, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,410,"ew Point2D(1.5, 2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,408,"checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,409,"new Vector2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,410,"new Vector2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,411,"new Vector2D(1.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,412,"new Vector2D(1.5, 2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,416,oint2D[][] vertices1 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,417,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,418,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,419,"ew Point2D( 2.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,420,"ew Point2D( 2.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,421,"ew Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,418,Vector2D[][] vertices1 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,419,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,420,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,421,"new Vector2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,422,"new Vector2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,423,"new Vector2D( 0.0,  2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,425,oint2D[][] vertices2 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,426,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,427,"ew Point2D( 1.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,428,"ew Point2D( 3.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,429,"ew Point2D( 3.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,430,"ew Point2D( 1.0,  3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,427,Vector2D[][] vertices2 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,428,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,429,"new Vector2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,430,"new Vector2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,431,"new Vector2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,432,"new Vector2D( 1.0,  3.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,434,"olygonsSet set  = (PolygonsSet) Region.xor(set1.copySelf(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,435,et2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,436,"PolygonsSet set  = (PolygonsSet) new RegionFactory<Euclidean2D>().xor(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,437,set2.copySelf());
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,438,"heckVertices(set.getVertices(), new Point2D[][] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,439,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,440,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,441,"ew Point2D( 2.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,442,"ew Point2D( 2.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,443,"ew Point2D( 3.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,444,"ew Point2D( 3.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,445,"ew Point2D( 1.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,446,"ew Point2D( 1.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,447,"ew Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,440,"checkVertices(set.getVertices(), new Vector2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,441,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,442,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,443,"new Vector2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,444,"new Vector2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,445,"new Vector2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,446,"new Vector2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,447,"new Vector2D( 1.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,448,"new Vector2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,449,"new Vector2D( 0.0,  2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,449,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,450,"ew Point2D( 1.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,451,"ew Point2D( 1.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,452,"ew Point2D( 2.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,453,"ew Point2D( 2.0,  1.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,451,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,452,"new Vector2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,453,"new Vector2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,454,"new Vector2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,455,"new Vector2D( 2.0,  1.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,456,"heckPoints(Region.Location.INSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,457,"ew Point2D(0.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,458,"ew Point2D(2.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,459,"ew Point2D(0.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,460,"ew Point2D(1.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,461,"ew Point2D(1.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,462,"ew Point2D(2.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,463,"ew Point2D(2.5, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,458,"checkPoints(Region.Location.INSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,459,"new Vector2D(0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,460,"new Vector2D(2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,461,"new Vector2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,462,"new Vector2D(1.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,463,"new Vector2D(1.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,464,"new Vector2D(2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,465,"new Vector2D(2.5, 2.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,465,"heckPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,466,"ew Point2D(-0.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,467,"ew Point2D( 0.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,468,"ew Point2D( 2.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,469,"ew Point2D( 1.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,470,"ew Point2D( 3.5, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,467,"checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,468,"new Vector2D(-0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,469,"new Vector2D( 0.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,470,"new Vector2D( 2.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,471,"new Vector2D( 1.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,472,"new Vector2D( 3.5, 2.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,472,"heckPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,473,"ew Point2D(1.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,474,"ew Point2D(2.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,475,"ew Point2D(1.5, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,476,"ew Point2D(2.0, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,477,"ew Point2D(0.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,478,"ew Point2D(0.5, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,479,"ew Point2D(2.0, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,480,"ew Point2D(2.5, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,481,"ew Point2D(3.0, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,474,"checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,475,"new Vector2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,476,"new Vector2D(2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,477,"new Vector2D(1.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,478,"new Vector2D(2.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,479,"new Vector2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,480,"new Vector2D(0.5, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,481,"new Vector2D(2.0, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,482,"new Vector2D(2.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,483,"new Vector2D(3.0, 2.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,487,oint2D[][] vertices1 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,488,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,489,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,490,"ew Point2D( 2.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,491,"ew Point2D( 2.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,492,"ew Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,489,Vector2D[][] vertices1 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,490,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,491,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,492,"new Vector2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,493,"new Vector2D( 2.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,494,"new Vector2D( 0.0,  2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,496,oint2D[][] vertices2 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,497,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,498,"ew Point2D( 1.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,499,"ew Point2D( 3.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,500,"ew Point2D( 3.0,  3.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,501,"ew Point2D( 1.0,  3.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,498,Vector2D[][] vertices2 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,499,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,500,"new Vector2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,501,"new Vector2D( 3.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,502,"new Vector2D( 3.0,  3.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,503,"new Vector2D( 1.0,  3.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,505,"olygonsSet set  = (PolygonsSet) Region.difference(set1.copySelf(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,506,et2.copySelf());
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,507,"PolygonsSet set  = (PolygonsSet) new RegionFactory<Euclidean2D>().difference(set1.copySelf(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,508,set2.copySelf());
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,509,"heckVertices(set.getVertices(), new Point2D[][] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,510,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,511,"ew Point2D( 0.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,512,"ew Point2D( 2.0,  0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,513,"ew Point2D( 2.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,514,"ew Point2D( 1.0,  1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,515,"ew Point2D( 1.0,  2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,516,"ew Point2D( 0.0,  2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,511,"checkVertices(set.getVertices(), new Vector2D[][] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,512,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,513,"new Vector2D( 0.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,514,"new Vector2D( 2.0,  0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,515,"new Vector2D( 2.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,516,"new Vector2D( 1.0,  1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,517,"new Vector2D( 1.0,  2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,518,"new Vector2D( 0.0,  2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,519,"heckPoints(Region.Location.INSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,520,"ew Point2D(0.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,521,"ew Point2D(0.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,522,"ew Point2D(1.5, 0.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,521,"checkPoints(Region.Location.INSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,522,"new Vector2D(0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,523,"new Vector2D(0.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,524,"new Vector2D(1.5, 0.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,524,"heckPoints(Region.Location.OUTSIDE, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,525,"ew Point2D( 2.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,526,"ew Point2D(-0.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,527,"ew Point2D( 0.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,528,"ew Point2D( 2.5, 0.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,529,"ew Point2D( 1.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,530,"ew Point2D( 3.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,531,"ew Point2D( 1.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,532,"ew Point2D( 2.5, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,533,"ew Point2D( 2.0, 1.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,534,"ew Point2D( 2.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,535,"ew Point2D( 2.5, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,536,"ew Point2D( 2.5, 2.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,537,"ew Point2D( 3.0, 2.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,526,"checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,527,"new Vector2D( 2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,528,"new Vector2D(-0.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,529,"new Vector2D( 0.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,530,"new Vector2D( 2.5, 0.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,531,"new Vector2D( 1.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,532,"new Vector2D( 3.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,533,"new Vector2D( 1.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,534,"new Vector2D( 2.5, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,535,"new Vector2D( 2.0, 1.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,536,"new Vector2D( 2.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,537,"new Vector2D( 2.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,538,"new Vector2D( 2.5, 2.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,539,"new Vector2D( 3.0, 2.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,539,"heckPoints(Region.Location.BOUNDARY, set, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,540,"ew Point2D(1.0, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,541,"ew Point2D(1.5, 1.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,542,"ew Point2D(0.0, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,543,"ew Point2D(0.5, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,544,"ew Point2D(2.0, 0.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,541,"checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,542,"new Vector2D(1.0, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,543,"new Vector2D(1.5, 1.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,544,"new Vector2D(0.0, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,545,"new Vector2D(0.5, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,546,"new Vector2D(2.0, 0.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,550,oint2D[][] vertices1 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,551,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,552,"ew Point2D( 0.5, 3.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,553,"ew Point2D( 0.5, 4.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,554,"ew Point2D(-0.5, 4.5),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,555,"ew Point2D(-0.5, 3.5)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,552,Vector2D[][] vertices1 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,553,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,554,"new Vector2D( 0.5, 3.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,555,"new Vector2D( 0.5, 4.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,556,"new Vector2D(-0.5, 4.5),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,557,"new Vector2D(-0.5, 3.5)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,559,oint2D[][] vertices2 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,560,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,561,"ew Point2D( 1.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,562,"ew Point2D( 1.0, 8.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,563,"ew Point2D(-1.0, 8.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,564,"ew Point2D(-1.0, 2.0)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,561,Vector2D[][] vertices2 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,562,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,563,"new Vector2D( 1.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,564,"new Vector2D( 1.0, 8.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,565,"new Vector2D(-1.0, 8.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,566,"new Vector2D(-1.0, 2.0)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,568,"ssert.assertTrue(Region.difference(set1.copySelf(), set2.copySelf()).isEmpty());"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,570,"Assert.assertTrue(new RegionFactory<Euclidean2D>().difference(set1.copySelf(), set2.copySelf()).isEmpty());"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,575,ubHyperplane[] hyp = {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,576,"ew SubHyperplane(new Line(new Point2D(   0.0, 1.0),  5 * pi6)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,577,"ew SubHyperplane(new Line(new Point2D(-sqrt3, 1.0),  7 * pi6)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,578,"ew SubHyperplane(new Line(new Point2D(-sqrt3, 1.0),  9 * pi6)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,579,"ew SubHyperplane(new Line(new Point2D(-sqrt3, 0.0), 11 * pi6)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,580,"ew SubHyperplane(new Line(new Point2D(   0.0, 0.0), 13 * pi6)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,581,"ew SubHyperplane(new Line(new Point2D(   0.0, 1.0),  3 * pi6)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,582,"ew SubHyperplane(new Line(new Point2D(-5.0 * sqrt3 / 6.0, 0.0), 9 * pi6))"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,577,SubLine[] hyp = {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,578,"new Line(new Vector2D(   0.0, 1.0),  5 * pi6).wholeHyperplane(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,579,"new Line(new Vector2D(-sqrt3, 1.0),  7 * pi6).wholeHyperplane(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,580,"new Line(new Vector2D(-sqrt3, 1.0),  9 * pi6).wholeHyperplane(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,581,"new Line(new Vector2D(-sqrt3, 0.0), 11 * pi6).wholeHyperplane(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,582,"new Line(new Vector2D(   0.0, 0.0), 13 * pi6).wholeHyperplane(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,583,"new Line(new Vector2D(   0.0, 1.0),  3 * pi6).wholeHyperplane(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,584,"new Line(new Vector2D(-5.0 * sqrt3 / 6.0, 0.0), 9 * pi6).wholeHyperplane()"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,584,yp[1] =                              hyp[0].getHyperplane().split(hyp[1]).getMinus();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,585,yp[2] =                              hyp[1].getHyperplane().split(hyp[2]).getMinus();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,586,yp[3] =                              hyp[2].getHyperplane().split(hyp[3]).getMinus();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,587,yp[4] = hyp[0].getHyperplane().split(hyp[3].getHyperplane().split(hyp[4]).getMinus()).getMinus();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,588,yp[5] = hyp[0].getHyperplane().split(hyp[4].getHyperplane().split(hyp[5]).getMinus()).getMinus();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,589,yp[6] = hyp[1].getHyperplane().split(hyp[3].getHyperplane().split(hyp[6]).getMinus()).getMinus();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,590,SPTree tree = new BSPTree(Boolean.TRUE);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,586,hyp[1] = (SubLine) hyp[1].split(hyp[0].getHyperplane()).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,587,hyp[2] = (SubLine) hyp[2].split(hyp[1].getHyperplane()).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,588,hyp[3] = (SubLine) hyp[3].split(hyp[2].getHyperplane()).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,589,hyp[4] = (SubLine) hyp[4].split(hyp[3].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,590,hyp[5] = (SubLine) hyp[5].split(hyp[4].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,591,hyp[6] = (SubLine) hyp[6].split(hyp[3].getHyperplane()).getMinus().split(hyp[1].getHyperplane()).getMinus();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,592,BSPTree<Euclidean2D> tree = new BSPTree<Euclidean2D>(Boolean.TRUE);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,592,"ree = new BSPTree(hyp[i], new BSPTree(Boolean.FALSE), tree, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,594,"tree = new BSPTree<Euclidean2D>(hyp[i], new BSPTree<Euclidean2D>(Boolean.FALSE), tree, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,595,ubHyperplane splitter =
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,596,"ew SubHyperplane(new Line(new Point2D(-2.0 * sqrt3 / 3.0, 0.0), 9 * pi6));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,597,SubLine splitter =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,598,"new Line(new Vector2D(-2.0 * sqrt3 / 3.0, 0.0), 9 * pi6).wholeHyperplane();"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,598,"ew PolygonsSet(new BSPTree(splitter,"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,599,"et.getTree(false).split(splitter).getPlus(),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,600,"ew BSPTree(Boolean.FALSE), null));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,600,"new PolygonsSet(new BSPTree<Euclidean2D>(splitter,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,601,"set.getTree(false).split(splitter).getPlus(),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,602,"new BSPTree<Euclidean2D>(Boolean.FALSE), null));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,602,"lice.checkPoint(new Point2D(0.1, 0.5)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,604,"slice.checkPoint(new Vector2D(0.1, 0.5)));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,610,oint2D[][] vertices1 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,611,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,612,"ew Point2D( 0.00, 0.1 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,613,"ew Point2D( 0.05, 0.1 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,614,"ew Point2D( 0.10, 0.2 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,615,"ew Point2D( 0.05, 0.3 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,616,"ew Point2D(-0.05, 0.3 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,617,"ew Point2D(-0.10, 0.2 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,618,"ew Point2D(-0.05, 0.1 * h)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,612,Vector2D[][] vertices1 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,613,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,614,"new Vector2D( 0.00, 0.1 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,615,"new Vector2D( 0.05, 0.1 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,616,"new Vector2D( 0.10, 0.2 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,617,"new Vector2D( 0.05, 0.3 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,618,"new Vector2D(-0.05, 0.3 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,619,"new Vector2D(-0.10, 0.2 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,620,"new Vector2D(-0.05, 0.1 * h)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,622,oint2D[][] vertices2 = new Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,623,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,624,"ew Point2D( 0.00, 0.0 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,625,"ew Point2D( 0.10, 0.0 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,626,"ew Point2D( 0.20, 0.2 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,627,"ew Point2D( 0.10, 0.4 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,628,"ew Point2D(-0.10, 0.4 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,629,"ew Point2D(-0.20, 0.2 * h),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,630,"ew Point2D(-0.10, 0.0 * h)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,624,Vector2D[][] vertices2 = new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,625,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,626,"new Vector2D( 0.00, 0.0 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,627,"new Vector2D( 0.10, 0.0 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,628,"new Vector2D( 0.20, 0.2 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,629,"new Vector2D( 0.10, 0.4 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,630,"new Vector2D(-0.10, 0.4 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,631,"new Vector2D(-0.20, 0.2 * h),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,632,"new Vector2D(-0.10, 0.0 * h)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,639,"SPTree a0 = new BSPTree(buildSegment(new Point2D(0.85, -0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,640,"ew Point2D(0.90, -0.10)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,641,"ew BSPTree(Boolean.FALSE),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,642,"ew BSPTree(Boolean.TRUE),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,643,ull);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,644,"SPTree a1 = new BSPTree(buildSegment(new Point2D(0.85, -0.10),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,645,"ew Point2D(0.90, -0.10)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,646,"ew BSPTree(Boolean.FALSE), a0, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,647,"SPTree a2 = new BSPTree(buildSegment(new Point2D(0.90, -0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,648,"ew Point2D(0.85, -0.05)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,649,"ew BSPTree(Boolean.FALSE), a1, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,650,"SPTree a3 = new BSPTree(buildSegment(new Point2D(0.82, -0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,651,"ew Point2D(0.82, -0.08)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,652,"ew BSPTree(Boolean.FALSE),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,653,"ew BSPTree(Boolean.TRUE),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,654,ull);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,655,"SPTree a4 = new BSPTree(buildHalfLine(new Point2D(0.85, -0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,656,"ew Point2D(0.80, -0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,657,"alse),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,658,"ew BSPTree(Boolean.FALSE), a3, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,659,"SPTree a5 = new BSPTree(buildSegment(new Point2D(0.82, -0.08),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,660,"ew Point2D(0.82, -0.18)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,661,"ew BSPTree(Boolean.FALSE),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,662,"ew BSPTree(Boolean.TRUE),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,663,ull);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,664,"SPTree a6 = new BSPTree(buildHalfLine(new Point2D(0.82, -0.18),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,665,"ew Point2D(0.85, -0.15),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,666,"rue),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,667,"ew BSPTree(Boolean.FALSE), a5, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,668,"SPTree a7 = new BSPTree(buildHalfLine(new Point2D(0.85, -0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,669,"ew Point2D(0.82, -0.08),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,670,"alse),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,671,"4, a6, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,672,"SPTree a8 = new BSPTree(buildLine(new Point2D(0.85, -0.25),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,673,"ew Point2D(0.85,  0.05)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,674,"2, a7, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,675,"SPTree a9 = new BSPTree(buildLine(new Point2D(0.90,  0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,676,"ew Point2D(0.90, -0.50)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,677,"8, new BSPTree(Boolean.FALSE), null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,679,"SPTree b0 = new BSPTree(buildSegment(new Point2D(0.92, -0.12),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,680,"ew Point2D(0.92, -0.08)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,681,"ew BSPTree(Boolean.FALSE), new BSPTree(Boolean.TRUE),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,682,ull);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,683,"SPTree b1 = new BSPTree(buildHalfLine(new Point2D(0.92, -0.08),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,684,"ew Point2D(0.90, -0.10),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,685,"rue),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,686,"ew BSPTree(Boolean.FALSE), b0, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,687,"SPTree b2 = new BSPTree(buildSegment(new Point2D(0.92, -0.18),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,688,"ew Point2D(0.92, -0.12)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,689,"ew BSPTree(Boolean.FALSE), new BSPTree(Boolean.TRUE),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,690,ull);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,691,"SPTree b3 = new BSPTree(buildSegment(new Point2D(0.85, -0.15),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,692,"ew Point2D(0.90, -0.20)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,693,"ew BSPTree(Boolean.FALSE), b2, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,694,"SPTree b4 = new BSPTree(buildSegment(new Point2D(0.95, -0.15),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,695,"ew Point2D(0.85, -0.05)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,696,"1, b3, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,697,"SPTree b5 = new BSPTree(buildHalfLine(new Point2D(0.85, -0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,698,"ew Point2D(0.85, -0.25),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,699,"rue),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,700,"ew BSPTree(Boolean.FALSE), b4, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,701,"SPTree b6 = new BSPTree(buildLine(new Point2D(0.0, -1.10),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,702,"ew Point2D(1.0, -0.10)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,703,"ew BSPTree(Boolean.FALSE), b5, null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,705,"olygonsSet c = (PolygonsSet) Region.union(new PolygonsSet(a9),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,706,ew PolygonsSet(b6));
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,708,"heckPoints(Region.Location.INSIDE, c, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,709,"ew Point2D(0.83, -0.06),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,710,"ew Point2D(0.83, -0.15),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,711,"ew Point2D(0.88, -0.15),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,712,"ew Point2D(0.88, -0.09),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,713,"ew Point2D(0.88, -0.07),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,714,"ew Point2D(0.91, -0.18),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,715,"ew Point2D(0.91, -0.10)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,641,BSPTree<Euclidean2D> a0 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,642,"new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.85, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,643,"new Vector2D(0.90, -0.10)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,644,"new BSPTree<Euclidean2D>(Boolean.FALSE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,645,"new BSPTree<Euclidean2D>(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,646,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,647,BSPTree<Euclidean2D> a1 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,648,"new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.85, -0.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,649,"new Vector2D(0.90, -0.10)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,650,"new BSPTree<Euclidean2D>(Boolean.FALSE), a0, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,651,BSPTree<Euclidean2D> a2 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,652,"new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.90, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,653,"new Vector2D(0.85, -0.05)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,654,"new BSPTree<Euclidean2D>(Boolean.FALSE), a1, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,655,BSPTree<Euclidean2D> a3 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,656,"new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.82, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,657,"new Vector2D(0.82, -0.08)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,658,"new BSPTree<Euclidean2D>(Boolean.FALSE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,659,"new BSPTree<Euclidean2D>(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,660,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,661,BSPTree<Euclidean2D> a4 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,662,"new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.85, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,663,"new Vector2D(0.80, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,664,"false),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,665,"new BSPTree<Euclidean2D>(Boolean.FALSE), a3, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,666,BSPTree<Euclidean2D> a5 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,667,"new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.82, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,668,"new Vector2D(0.82, -0.18)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,669,"new BSPTree<Euclidean2D>(Boolean.FALSE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,670,"new BSPTree<Euclidean2D>(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,671,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,672,BSPTree<Euclidean2D> a6 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,673,"new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.82, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,674,"new Vector2D(0.85, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,675,"true),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,676,"new BSPTree<Euclidean2D>(Boolean.FALSE), a5, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,677,BSPTree<Euclidean2D> a7 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,678,"new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.85, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,679,"new Vector2D(0.82, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,680,"false),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,681,"a4, a6, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,682,BSPTree<Euclidean2D> a8 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,683,"new BSPTree<Euclidean2D>(buildLine(new Vector2D(0.85, -0.25),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,684,"new Vector2D(0.85,  0.05)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,685,"a2, a7, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,686,BSPTree<Euclidean2D> a9 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,687,"new BSPTree<Euclidean2D>(buildLine(new Vector2D(0.90,  0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,688,"new Vector2D(0.90, -0.50)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,689,"a8, new BSPTree<Euclidean2D>(Boolean.FALSE), null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,691,BSPTree<Euclidean2D> b0 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,692,"new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.92, -0.12),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,693,"new Vector2D(0.92, -0.08)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,694,"new BSPTree<Euclidean2D>(Boolean.FALSE), new BSPTree<Euclidean2D>(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,695,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,696,BSPTree<Euclidean2D> b1 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,697,"new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.92, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,698,"new Vector2D(0.90, -0.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,699,"true),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,700,"new BSPTree<Euclidean2D>(Boolean.FALSE), b0, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,701,BSPTree<Euclidean2D> b2 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,702,"new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.92, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,703,"new Vector2D(0.92, -0.12)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,704,"new BSPTree<Euclidean2D>(Boolean.FALSE), new BSPTree<Euclidean2D>(Boolean.TRUE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,705,null);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,706,BSPTree<Euclidean2D> b3 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,707,"new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.85, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,708,"new Vector2D(0.90, -0.20)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,709,"new BSPTree<Euclidean2D>(Boolean.FALSE), b2, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,710,BSPTree<Euclidean2D> b4 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,711,"new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.95, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,712,"new Vector2D(0.85, -0.05)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,713,"b1, b3, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,714,BSPTree<Euclidean2D> b5 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,715,"new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.85, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,716,"new Vector2D(0.85, -0.25),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,717,"true),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,718,"new BSPTree<Euclidean2D>(Boolean.FALSE), b4, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,719,BSPTree<Euclidean2D> b6 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,720,"new BSPTree<Euclidean2D>(buildLine(new Vector2D(0.0, -1.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,721,"new Vector2D(1.0, -0.10)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,722,"new BSPTree<Euclidean2D>(Boolean.FALSE), b5, null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,724,PolygonsSet c =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,725,"(PolygonsSet) new RegionFactory<Euclidean2D>().union(new PolygonsSet(a9),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,726,new PolygonsSet(b6));
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,728,"checkPoints(Region.Location.INSIDE, c, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,729,"new Vector2D(0.83, -0.06),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,730,"new Vector2D(0.83, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,731,"new Vector2D(0.88, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,732,"new Vector2D(0.88, -0.09),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,733,"new Vector2D(0.88, -0.07),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,734,"new Vector2D(0.91, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,735,"new Vector2D(0.91, -0.10)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,718,"heckPoints(Region.Location.OUTSIDE, c, new Point2D[] {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,719,"ew Point2D(0.80, -0.10),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,720,"ew Point2D(0.83, -0.50),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,721,"ew Point2D(0.83, -0.20),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,722,"ew Point2D(0.83, -0.02),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,723,"ew Point2D(0.87, -0.50),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,724,"ew Point2D(0.87, -0.20),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,725,"ew Point2D(0.87, -0.02),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,726,"ew Point2D(0.91, -0.20),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,727,"ew Point2D(0.91, -0.08),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,728,"ew Point2D(0.93, -0.15)"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,738,"checkPoints(Region.Location.OUTSIDE, c, new Vector2D[] {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,739,"new Vector2D(0.80, -0.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,740,"new Vector2D(0.83, -0.50),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,741,"new Vector2D(0.83, -0.20),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,742,"new Vector2D(0.83, -0.02),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,743,"new Vector2D(0.87, -0.50),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,744,"new Vector2D(0.87, -0.20),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,745,"new Vector2D(0.87, -0.02),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,746,"new Vector2D(0.91, -0.20),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,747,"new Vector2D(0.91, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,748,"new Vector2D(0.93, -0.15)"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,732,ew Point2D[][] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,733,ew Point2D[] {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,734,"ew Point2D(0.85, -0.15),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,735,"ew Point2D(0.90, -0.20),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,736,"ew Point2D(0.92, -0.18),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,737,"ew Point2D(0.92, -0.08),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,738,"ew Point2D(0.90, -0.10),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,739,"ew Point2D(0.90, -0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,740,"ew Point2D(0.82, -0.05),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,741,"ew Point2D(0.82, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,752,new Vector2D[][] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,753,new Vector2D[] {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,754,"new Vector2D(0.85, -0.15),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,755,"new Vector2D(0.90, -0.20),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,756,"new Vector2D(0.92, -0.18),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,757,"new Vector2D(0.92, -0.08),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,758,"new Vector2D(0.90, -0.10),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,759,"new Vector2D(0.90, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,760,"new Vector2D(0.82, -0.05),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,761,"new Vector2D(0.82, -0.18),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,751,"ew Line(new Point2D(0.0, 0.625000007541172),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,752,"ew Point2D(1.0, 0.625000007541172)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,753,"ew Line(new Point2D(-0.19204433621902645, 0.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,754,"ew Point2D(-0.19204433621902645, 1.0)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,755,"ew Line(new Point2D(-0.40303524786887,  0.4248364535319128),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,756,"ew Point2D(-1.12851149797877, -0.2634107480798909)),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,757,"ew Line(new Point2D(0.0, 2.0),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,758,"ew Point2D(1.0, 2.0))"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,771,"new Line(new Vector2D(0.0, 0.625000007541172),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,772,"new Vector2D(1.0, 0.625000007541172)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,773,"new Line(new Vector2D(-0.19204433621902645, 0.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,774,"new Vector2D(-0.19204433621902645, 1.0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,775,"new Line(new Vector2D(-0.40303524786887,  0.4248364535319128),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,776,"new Vector2D(-1.12851149797877, -0.2634107480798909)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,777,"new Line(new Vector2D(0.0, 2.0),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,778,"new Vector2D(1.0, 2.0))"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,761,SPTree node1 =
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,762,"ew BSPTree(new SubHyperplane(l[0],"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,781,BSPTree<Euclidean2D> node1 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,782,"new BSPTree<Euclidean2D>(new SubLine(l[0],"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,765,"ew BSPTree(Boolean.TRUE), new BSPTree(Boolean.FALSE),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,785,"new BSPTree<Euclidean2D>(Boolean.TRUE), new BSPTree<Euclidean2D>(Boolean.FALSE),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,767,SPTree node2 =
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,768,"ew BSPTree(new SubHyperplane(l[1],"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,787,BSPTree<Euclidean2D> node2 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,788,"new BSPTree<Euclidean2D>(new SubLine(l[1],"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,771,"ode1, new BSPTree(Boolean.FALSE), null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,772,SPTree node3 =
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,773,"ew BSPTree(new SubHyperplane(l[2],"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,791,"node1, new BSPTree<Euclidean2D>(Boolean.FALSE), null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,792,BSPTree<Euclidean2D> node3 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,793,"new BSPTree<Euclidean2D>(new SubLine(l[2],"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,776,"ode2, new BSPTree(Boolean.FALSE), null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,777,SPTree node4 =
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,778,"ew BSPTree(new SubHyperplane(l[3]),"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,779,"ode3, new BSPTree(Boolean.FALSE), null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,796,"node2, new BSPTree<Euclidean2D>(Boolean.FALSE), null);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,797,BSPTree<Euclidean2D> node4 =
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,798,"new BSPTree<Euclidean2D>(l[3].wholeHyperplane(), node3, new BSPTree<Euclidean2D>(Boolean.FALSE), null);"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,786,rivate PolygonsSet buildSet(Point2D[][] vertices) {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,787,rrayList<SubHyperplane> edges = new ArrayList<SubHyperplane>();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,805,private PolygonsSet buildSet(Vector2D[][] vertices) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,806,ArrayList<SubHyperplane<Euclidean2D>> edges = new ArrayList<SubHyperplane<Euclidean2D>>();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,797,"rivate SubHyperplane buildLine(Point2D start, Point2D end) {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,798,"eturn new SubHyperplane(new Line(start, end));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,816,"private SubHyperplane<Euclidean2D> buildLine(Vector2D start, Vector2D end) {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,817,"return new Line(start, end).wholeHyperplane();"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,802,oint2D p = (Point2D) l0.intersection(l1);
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,803,eturn ((Point1D) l0.toSubSpace(p)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,821,Vector2D p = (Vector2D) l0.intersection(l1);
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,822,return ((Vector1D) l0.toSubSpace(p)).getX();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,806,"rivate SubHyperplane buildHalfLine(Point2D start, Point2D end,"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,807,oolean startIsVirtual) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,825,"private SubHyperplane<Euclidean2D> buildHalfLine(Vector2D start, Vector2D end,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,826,boolean startIsVirtual) {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,811, ((Point1D) line.toSubSpace(start)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,830,: ((Vector1D) line.toSubSpace(start)).getX();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,813, ((Point1D) line.toSubSpace(end)).getAbscissa()
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,832,? ((Vector1D) line.toSubSpace(end)).getX()
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,815,"eturn new SubHyperplane(line, new IntervalsSet(lower, upper));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,834,"return new SubLine(line, new IntervalsSet(lower, upper));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,818,"rivate SubHyperplane buildSegment(Point2D start, Point2D end) {"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,837,"private SubHyperplane<Euclidean2D> buildSegment(Vector2D start, Vector2D end) {"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,820,ouble lower = ((Point1D) line.toSubSpace(start)).getAbscissa();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,821,ouble upper = ((Point1D) line.toSubSpace(end)).getAbscissa();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,822,"eturn new SubHyperplane(line, new IntervalsSet(lower, upper));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,839,double lower = ((Vector1D) line.toSubSpace(start)).getX();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,840,double upper = ((Vector1D) line.toSubSpace(end)).getX();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,841,"return new SubLine(line, new IntervalsSet(lower, upper));"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,826,oint2D[] points) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,845,Vector2D[] points) {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,832,"rivate boolean checkInSegment(Point2D p,"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,833,"oint2D p1, Point2D p2,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,851,"private boolean checkInSegment(Vector2D p,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,852,"Vector2D p1, Vector2D p2,"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,837,ouble x  = ((Point1D) line.toSubSpace(p)).getAbscissa();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,838,ouble x1 = ((Point1D) line.toSubSpace(p1)).getAbscissa();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,839,ouble x2 = ((Point1D) line.toSubSpace(p2)).getAbscissa();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,856,double x  = ((Vector1D) line.toSubSpace(p)).getX();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,857,double x1 = ((Vector1D) line.toSubSpace(p1)).getX();
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,858,double x2 = ((Vector1D) line.toSubSpace(p2)).getX();
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,848,"rivate void checkVertices(Point2D[][] rebuiltVertices,"
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,849,oint2D[][] vertices) {
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,867,"private void checkVertices(Vector2D[][] rebuiltVertices,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,868,Vector2D[][] vertices) {
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,855,oint2D p = rebuiltVertices[i][j];
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,874,Vector2D p = rebuiltVertices[i][j];
False,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,857,oint2D[] loop = vertices[k];
True,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/twod/PolygonsSetTest.java,876,Vector2D[] loop = vertices[k];

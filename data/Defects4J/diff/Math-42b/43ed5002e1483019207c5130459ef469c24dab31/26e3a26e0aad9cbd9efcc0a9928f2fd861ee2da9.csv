is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,25,"* <PAIR> Type of (point, value) pair."
False,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,28,ublic abstract class AbstractConvergenceChecker<T>
False,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,29,mplements ConvergenceChecker<T> {
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,30,public abstract class AbstractConvergenceChecker<PAIR>
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,31,implements ConvergenceChecker<PAIR> {
False,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,68, {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,70,* @return the relative threshold.
False,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,75, {@inheritDoc}
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,77,* @return the absolute threshold.
False,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,84,"ublic abstract boolean converged(int iteration, T ... points);"
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,86,"public abstract boolean converged(int iteration,"
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,87,"PAIR previous,"
True,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java,88,PAIR current);
False,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,40, @param points Data used for checking the convergence.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,40,* @param previous Best point in the previous iteration.
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,41,* @param current Best point in the current iteration.
False,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,43,"oolean converged(int iteration, PAIR ... points);"
False,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,46, Get the relative tolerance.
False,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,48, @return the relative threshold.
False,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,50,ouble getRelativeThreshold();
False,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,53, Get the absolute tolerance.
False,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,55, @return the absolute threshold.
False,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,57,ouble getAbsoluteThreshold();
True,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,src/main/java/org/apache/commons/math/optimization/ConvergenceChecker.java,44,"boolean converged(int iteration, PAIR previous, PAIR current);"
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,22,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,69, @param points Points used for checking convergence. The list must
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,70, contain two elements:
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,71, <ul>
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,72,"  <li>the previous best point,</li>"
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,73,  <li>the current best point.</li>
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,74, </ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,68,* @param previous Best point in the previous iteration.
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,69,* @param current Best point in the current iteration.
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,76, @throws DimensionMismatchException if the length of the {@code points}
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,77, list is not equal to 2.
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,80,inal RealPointValuePair ... points) {
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,81,f (points.length != 2) {
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,82,"hrow new DimensionMismatchException(points.length, 2);"
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,85,inal double[] p = points[0].getPoint();
False,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,86,inal double[] c = points[1].getPoint();
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,73,"final RealPointValuePair previous,"
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,74,final RealPointValuePair current) {
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,75,final double[] p = previous.getPoint();
True,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleRealPointChecker.java,76,final double[] c = current.getPoint();
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,22,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,69, @param points Points used for checking convergence. The list must
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,70, contain two elements:
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,71, <ul>
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,72,"  <li>the previous best point,</li>"
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,73,  <li>the current best point.</li>
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,74, </ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,68,* @param previous Best point in the previous iteration.
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,69,* @param current Best point in the current iteration.
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,76, @throws DimensionMismatchException if the length of the {@code points}
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,77, list is not equal to 2.
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,80,inal RealPointValuePair ... points) {
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,81,f (points.length != 2) {
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,82,"hrow new DimensionMismatchException(points.length, 2);"
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,85,inal double p = points[0].getValue();
False,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,86,inal double c = points[1].getValue();
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,73,"final RealPointValuePair previous,"
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,74,final RealPointValuePair current) {
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,75,final double p = previous.getValue();
True,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleScalarValueChecker.java,76,final double c = current.getValue();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,21,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,69, @param points Points used for checking convergence. The list must
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,70, contain two elements:
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,71, <ul>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,72,"  <li>the previous best point,</li>"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,73,  <li>the current best point.</li>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,74, </ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,68,* @param previous Best point in the previous iteration.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,69,* @param current Best point in the current iteration.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,76, @throws DimensionMismatchException if the length of the {@code points}
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,77, list is not equal to 2.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,80,inal VectorialPointValuePair ... points) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,81,f (points.length != 2) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,82,"hrow new DimensionMismatchException(points.length, 2);"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,85,inal double[] p = points[0].getPointRef();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,86,inal double[] c = points[1].getPointRef();
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,73,"final VectorialPointValuePair previous,"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,74,final VectorialPointValuePair current) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,75,final double[] p = previous.getPointRef();
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialPointChecker.java,76,final double[] c = current.getPointRef();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,22,mport org.apache.commons.math.exception.DimensionMismatchException;
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,70, @param points Points used for checking convergence. The list must
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,71, contain two elements:
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,72, <ul>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,73,"  <li>the previous best point,</li>"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,74,  <li>the current best point.</li>
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,75, </ul>
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,69,* @param previous Best point in the previous iteration.
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,70,* @param current Best point in the current iteration.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,77, @throws DimensionMismatchException if the length of the {@code points}
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,78, list is not equal to 2.
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,81,inal VectorialPointValuePair ... points) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,82,f (points.length != 2) {
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,83,"hrow new DimensionMismatchException(points.length, 2);"
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,86,inal double[] p = points[0].getValueRef();
False,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,87,inal double[] c = points[1].getValueRef();
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,74,"final VectorialPointValuePair previous,"
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,75,final VectorialPointValuePair current) {
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,76,final double[] p = previous.getValueRef();
True,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java,77,final double[] c = current.getValueRef();
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,135,rivate double initialStepBoundFactor;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,126,private final double initialStepBoundFactor;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,138,rivate double costRelativeTolerance;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,128,private final double costRelativeTolerance;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,141,rivate double parRelativeTolerance;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,130,private final double parRelativeTolerance;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,145,rivate double orthoTolerance;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,133,private final double orthoTolerance;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,148,rivate double qrRankingThreshold;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,135,private final double qrRankingThreshold;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,151, Build an optimizer for least squares problems.
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,152, <p>The default values for the algorithm settings are:
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,153,   <ul>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,154,    <li>{@link #setConvergenceChecker(ConvergenceChecker) vectorial convergence checker}: null</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,155,    <li>{@link #setInitialStepBoundFactor(double) initial step bound factor}: 100.0</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,156,    <li>{@link #setCostRelativeTolerance(double) cost relative tolerance}: 1.0e-10</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,157,    <li>{@link #setParRelativeTolerance(double) parameters relative tolerance}: 1.0e-10</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,158,    <li>{@link #setOrthoTolerance(double) orthogonality tolerance}: 1.0e-10</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,159,    <li>{@link #setQRRankingThreshold(double) QR ranking threshold}: {@link MathUtils#SAFE_MIN}</li>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,160,   </ul>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,161, </p>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,162, <p>These default values may be overridden after construction. If the {@link
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,163," #setConvergenceChecker vectorial convergence checker} is set to a non-null value, it"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,164, will be used instead of the {@link #setCostRelativeTolerance cost relative tolerance}
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,165, and {@link #setParRelativeTolerance parameters relative tolerance} settings.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,138,* Build an optimizer for least squares problems with default values
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,139,* for all the tuning parameters (see the {@link
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,140,"* #LevenbergMarquardtOptimizer(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,141,* other contructor}.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,142,* The default values for the algorithm settings are:
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,143,* <ul>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,144,*  <li>Initial step bound factor}: 100</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,145,*  <li>Cost relative tolerance}: 1e-10</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,146,*  <li>Parameters relative tolerance}: 1e-10</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,147,*  <li>Orthogonality tolerance}: 1e-10</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,148,*  <li>QR ranking threshold}: {@link MathUtils#SAFE_MIN}</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,149,* </ul>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,168,/ default values for the tuning parameters
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,169,etConvergenceChecker(null);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,170,etInitialStepBoundFactor(100.0);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,171,etCostRelativeTolerance(1.0e-10);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,172,etParRelativeTolerance(1.0e-10);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,173,etOrthoTolerance(1.0e-10);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,174,etQRRankingThreshold(MathUtils.SAFE_MIN);
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,152,"this(100, 1e-10, 1e-10, 1e-10, MathUtils.SAFE_MIN);"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,178, Set the positive input variable used in determining the initial step bound.
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,179, This bound is set to the product of initialStepBoundFactor and the euclidean
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,180," norm of diag*x if nonzero, or else to initialStepBoundFactor itself. In most"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,181," cases factor should lie in the interval (0.1, 100.0). 100.0 is a generally"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,182, recommended value.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,156,* Build an optimizer for least squares problems with default values
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,157,* for some of the tuning parameters (see the {@link
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,158,"* #LevenbergMarquardtOptimizer(double,double,double,double,double)"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,159,* other contructor}.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,160,* The default values for the algorithm settings are:
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,161,* <ul>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,162,*  <li>Initial step bound factor}: 100</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,163,*  <li>QR ranking threshold}: {@link MathUtils#SAFE_MIN}</li>
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,164,* </ul>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,184, @param initialStepBoundFactor initial step bound factor
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,166,* @param costRelativeTolerance Desired relative error in the sum of
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,167,* squares.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,168,* @param parRelativeTolerance Desired relative error in the approximate
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,169,* solution parameters.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,170,* @param orthoTolerance Desired max cosine on the orthogonality between
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,171,* the function vector and the columns of the Jacobian.
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,186,ublic void setInitialStepBoundFactor(double initialStepBoundFactor) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,187,his.initialStepBoundFactor = initialStepBoundFactor;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,173,"public LevenbergMarquardtOptimizer(double costRelativeTolerance,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,174,"double parRelativeTolerance,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,175,double orthoTolerance) {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,176,"this(100,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,177,"costRelativeTolerance, parRelativeTolerance, orthoTolerance,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,178,MathUtils.SAFE_MIN);
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,191, Set the desired relative error in the sum of squares.
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,192, <p>This setting is used only if the {@link #setConvergenceChecker vectorial
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,193, convergence checker} is set to null.</p>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,194, @param costRelativeTolerance desired relative error in the sum of squares
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,182,* The arguments control the behaviour of the default convergence checking
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,183,* procedure.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,184,* Additional criteria can defined through the setting of a {@link
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,185,* ConvergenceChecker}.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,187,* @param initialStepBoundFactor Positive input variable used in
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,188,* determining the initial step bound. This bound is set to the
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,189,* product of initialStepBoundFactor and the euclidean norm of
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,190,"* {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,191,* itself. In most cases factor should lie in the interval
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,192,"* {@code (0.1, 100.0)}. {@code 100} is a generally recommended value."
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,193,* @param costRelativeTolerance Desired relative error in the sum of
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,194,* squares.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,195,* @param parRelativeTolerance Desired relative error in the approximate
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,196,* solution parameters.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,197,* @param orthoTolerance Desired max cosine on the orthogonality between
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,198,* the function vector and the columns of the Jacobian.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,199,* @param threshold Desired threshold for QR ranking. If the squared norm
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,200,* of a column vector is smaller or equal to this threshold during QR
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,201,"* decomposition, it is considered to be a zero vector and hence the rank"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,202,* of the matrix is reduced.
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,196,ublic void setCostRelativeTolerance(double costRelativeTolerance) {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,204,"public LevenbergMarquardtOptimizer(double initialStepBoundFactor,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,205,"double costRelativeTolerance,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,206,"double parRelativeTolerance,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,207,"double orthoTolerance,"
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,208,double threshold) {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,209,this.initialStepBoundFactor = initialStepBoundFactor;
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,201, Set the desired relative error in the approximate solution parameters.
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,202, <p>This setting is used only if the {@link #setConvergenceChecker vectorial
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,203, convergence checker} is set to null.</p>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,204, @param parRelativeTolerance desired relative error
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,205, in the approximate solution parameters
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,207,ublic void setParRelativeTolerance(double parRelativeTolerance) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,212, Set the desired max cosine on the orthogonality.
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,213," <p>This setting is always used, regardless of the {@link #setConvergenceChecker"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,214, vectorial convergence checker} being null or non-null.</p>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,215, @param orthoTolerance desired max cosine on the orthogonality
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,216, between the function vector and the columns of the jacobian
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,218,ublic void setOrthoTolerance(double orthoTolerance) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,223, Set the desired threshold for QR ranking.
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,224, <p>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,225, If the squared norm of a column vector is smaller or equal to this threshold
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,226," during QR decomposition, it is considered to be a zero vector and hence the"
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,227, rank of the matrix is reduced.
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,228, </p>
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,229, @param threshold threshold for QR ranking
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,231,ublic void setQRRankingThreshold(final double threshold) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,237,rotected VectorialPointValuePair doOptimize() throws FunctionEvaluationException {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,218,protected VectorialPointValuePair doOptimize()
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,219,throws FunctionEvaluationException {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,449,f (checker==null) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,450,f (((FastMath.abs(actRed) <= costRelativeTolerance) &&
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,451,preRed <= costRelativeTolerance) &&
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,452,ratio <= 2.0)) ||
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,453,delta <= parRelativeTolerance * xNorm)) {
False,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,454,eturn current;
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,431,// Default convergence criteria.
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,432,if ((FastMath.abs(actRed) <= costRelativeTolerance &&
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,433,preRed <= costRelativeTolerance &&
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,434,ratio <= 2.0) ||
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,435,delta <= parRelativeTolerance * xNorm) {
True,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java,436,return current;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,23,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,25,import org.apache.commons.math.exception.NumberIsTooSmallException;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,26,import org.apache.commons.math.exception.NotStrictlyPositiveException;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,38, The user is responsible for calling {@link
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,39, #setConvergenceChecker(ConvergenceChecker) ConvergenceChecker}
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,41,* The default stopping criterion is based on the differences of the
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,42,* function value between two successive iterations. It is however possible
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,43,* to define custom convergence criteria by calling a {@link
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,44,* #setConvergenceChecker(ConvergenceChecker) setConvergenceChecker}
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,53,* Minimum relative tolerance.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,55,private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,57,* Relative threshold.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,59,private double relativeThreshold;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,61,* Absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,63,private double absoluteThreshold;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,50,rivate LineSearch line = new LineSearch();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,67,private LineSearch line;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,53, Set the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,54, It also indirectly sets the line search tolerances to the square-root
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,55, of the correponding tolerances in the checker.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,70,* The arguments control the behaviour of the default convergence
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,71,* checking procedure.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,57, @param checker Convergence checker.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,73,* @param rel Relative threshold.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,74,* @param abs Absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,75,* @throws NotStrictlyPositiveException if {@code abs <= 0}.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,76,* @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,59,ublic void setConvergenceChecker(ConvergenceChecker<RealPointValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,60,uper.setConvergenceChecker(checker);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,78,"public PowellOptimizer(double rel,"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,79,double abs) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,80,if (rel < MIN_RELATIVE_TOLERANCE) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,81,"throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,83,if (abs <= 0) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,84,throw new NotStrictlyPositiveException(abs);
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,86,relativeThreshold = rel;
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,87,absoluteThreshold = abs;
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,65,"inal double rel = Math.min(Math.sqrt(checker.getRelativeThreshold()), minTol);"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,66,"inal double abs = Math.min(Math.sqrt(checker.getAbsoluteThreshold()), minTol);"
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,67,"ine.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(rel, abs));"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,92,"final double lsRel = Math.min(FastMath.sqrt(relativeThreshold), minTol);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,93,"final double lsAbs = Math.min(FastMath.sqrt(absoluteThreshold), minTol);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,94,"line = new LineSearch(lsRel, lsAbs);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,122,final ConvergenceChecker<RealPointValuePair> checker
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,123,= getConvergenceChecker();
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,155,// Default convergence check.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,156,boolean stop = 2 * (fX - fVal) <= (relativeThreshold * (FastMath.abs(fX)
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,157,+ FastMath.abs(fVal))
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,158,+ absoluteThreshold);
False,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,127,"f (getConvergenceChecker().converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,162,if (!stop) { // User-defined stopping criteria.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,163,if (checker != null) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,164,"stop = checker.converged(iter, previous, current);"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,167,if (stop) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,247,* @param rel Relative threshold.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,248,* @param rel Absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,250,"LineSearch(double rel,"
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,251,double abs) {
True,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,src/main/java/org/apache/commons/math/optimization/general/PowellOptimizer.java,252,"super(rel, abs);"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,22,mport org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,51,* Minimum relative tolerance.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,53,private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,55,* Relative threshold.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,57,private final double relativeThreshold;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,59,* Absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,61,private final double absoluteThreshold;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,53, Convergence checker that implements the original stopping criterion
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,64,* The arguments are used implement the original stopping criterion
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,61, @since 3.0
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,72,* @param rel Relative threshold.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,73,* @param abs Absolute threshold.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74,* @throws NotStrictlyPositiveException if {@code abs <= 0}.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,75,* @throws NumberIsTooSmallException if {@code rel < 2 * Math.ulp(1d)}.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,63,ublic static class BrentConvergenceChecker
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,64,xtends AbstractConvergenceChecker<UnivariateRealPointValuePair> {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,66, Minimum relative tolerance.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,68,rivate static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,71, Build an instance with specified thresholds.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,73, @param rel Relative tolerance threshold
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,74, @param abs Absolute tolerance threshold
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,76,"ublic BrentConvergenceChecker(final double rel,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,77,inal double abs) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,78,"uper(rel, abs);"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,80,f (rel < MIN_RELATIVE_TOLERANCE) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,81,"hrow new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,83,f (abs <= 0) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,84,hrow new NotStrictlyPositiveException(abs);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,89, Convergence criterion.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,91, @param iteration Current iteration.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,92, @param points Points used for checking the stopping criterion. The list
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,93, must contain 3 points (in the following order):
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,94, <ul>
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,95,  <li>the lower end of the current interval</li>
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,96,  <li>the current best point</li>
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,97,  <li>the higher end of the current interval</li>
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,98, </ul>
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,99, @return {@code true} if the stopping criterion is satisfied.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,100, @throws DimensionMismatchException if the length of the {@code points}
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,101, list is not equal to 3.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,103,"ublic boolean converged(final int iteration,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,104,inal UnivariateRealPointValuePair ... points) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,105,f (points.length != 3) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,106,"hrow new DimensionMismatchException(points.length, 3);"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,109,inal double a = points[0].getPoint();
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,110,inal double x = points[1].getPoint();
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,111,inal double b = points[2].getPoint();
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,113,inal double tol1 = getRelativeThreshold() * FastMath.abs(x) + getAbsoluteThreshold();
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,114,inal double tol2 = 2 * tol1;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,116,inal double m = 0.5 * (a + b);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,117,eturn FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,77,"public BrentOptimizer(double rel,"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,78,double abs) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,79,if (rel < MIN_RELATIVE_TOLERANCE) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,80,"throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,122, Set the convergence checker.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,123," Since this algorithm requires a specific checker, this method will throw"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,124, an {@code UnsupportedOperationexception} if the argument type is not
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,125, {@link BrentConvergenceChecker}.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,127, @throws MathUnsupportedOperationexception if the checker is not an
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,128, instance of {@link BrentConvergenceChecker}.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,130,Override
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,131,ublic void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,132,f (checker instanceof BrentConvergenceChecker) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,133,uper.setConvergenceChecker(checker);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,134, else {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,135,hrow new MathUnsupportedOperationException();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,82,if (abs <= 0) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,83,throw new NotStrictlyPositiveException(abs);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,85,relativeThreshold = rel;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,86,absoluteThreshold = abs;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,97,// Optional additional convergence criteria.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,149,inal double eps = checker.getRelativeThreshold();
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,150,inal double t = checker.getAbsoluteThreshold();
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,123,UnivariateRealPointValuePair previous = null;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,124,UnivariateRealPointValuePair current
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,125,"= new UnivariateRealPointValuePair(x, (isMinim ? fx : -fx));"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,176,ouble m = 0.5 * (a + b);
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,177,inal double tol1 = eps * FastMath.abs(x) + t;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,129,final double m = 0.5 * (a + b);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,130,final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,180,/ Check stopping criterion.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,181,"/ This test will work only if the ""checker"" is an instance of"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,182,"/ ""BrentOptimizer.BrentConvergenceChecker""."
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,183,"f (!getConvergenceChecker().converged(iter,"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,184,"ew UnivariateRealPointValuePair(a, Double.NaN),"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,185,"ew UnivariateRealPointValuePair(x, Double.NaN),"
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,186,"ew UnivariateRealPointValuePair(b, Double.NaN))) {"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,133,// Default stopping criterion.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,134,final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,135,if (!stop) {
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,286, else { // Termination.
False,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,287,"eturn new UnivariateRealPointValuePair(x, (isMinim ? fx : -fx));"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,236,previous = current;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,237,"current = new UnivariateRealPointValuePair(x, (isMinim ? fx : -fx));"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,239,// User-defined convergence checker.
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,240,if (checker != null) {
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,241,"if (checker.converged(iter, previous, current)) {"
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,242,return current;
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,245,} else { // Default termination (Brent's criterion).
True,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java,246,return current;
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,38,import org.apache.commons.math.util.MathUtils;
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,383,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,384,ptimizer.setInitialStepBoundFactor(initialStepBoundFactor);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,374,LevenbergMarquardtOptimizer optimizer
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,375,"= new LevenbergMarquardtOptimizer(initialStepBoundFactor,"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,376,"costRelativeTolerance,"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,377,"parRelativeTolerance,"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,378,"orthoTolerance,"
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,379,MathUtils.SAFE_MIN);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,386,ptimizer.setCostRelativeTolerance(costRelativeTolerance);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,387,ptimizer.setParRelativeTolerance(parRelativeTolerance);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,388,ptimizer.setOrthoTolerance(orthoTolerance);
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,511,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
False,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,512,ptimizer.setQRRankingThreshold(0);
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,502,LevenbergMarquardtOptimizer optimizer
True,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,503,"= new LevenbergMarquardtOptimizer(100, 1e-10, 1e-10, 1e-10, 0);"
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,492,evenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,492,LevenbergMarquardtOptimizer optimizer
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,493,"= new LevenbergMarquardtOptimizer(FastMath.sqrt(2.22044604926e-16),"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,494,"FastMath.sqrt(2.22044604926e-16),"
True,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,495,2.22044604926e-16);
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,494,ptimizer.setCostRelativeTolerance(FastMath.sqrt(2.22044604926e-16));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,495,ptimizer.setParRelativeTolerance(FastMath.sqrt(2.22044604926e-16));
False,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,496,ptimizer.setOrthoTolerance(2.22044604926e-16);
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,140,inal MultivariateRealOptimizer optim = new PowellOptimizer();
True,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,140,"final MultivariateRealOptimizer optim = new PowellOptimizer(fTol, Math.ulp(1d));"
False,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/general/PowellOptimizerTest.java,142,"ptim.setConvergenceChecker(new SimpleScalarValueChecker(fTol, Math.ulp(1d)));"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,41,nivariateRealOptimizer optimizer = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,42,"ptimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-10, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,41,"UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,45,"ssertEquals(3 * Math.PI / 2, optimizer.optimize(f, GoalType.MINIMIZE, 4, 5).getPoint(),"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,46,00 * optimizer.getConvergenceChecker().getRelativeThreshold());
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,44,"assertEquals(3 * Math.PI / 2, optimizer.optimize(f, GoalType.MINIMIZE, 4, 5).getPoint(),1e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,48,"ssertEquals(3 * Math.PI / 2, optimizer.optimize(f, GoalType.MINIMIZE, 1, 5).getPoint(),"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,49,00 * optimizer.getConvergenceChecker().getRelativeThreshold());
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,46,"assertEquals(3 * Math.PI / 2, optimizer.optimize(f, GoalType.MINIMIZE, 1, 5).getPoint(), 1e-8);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,67,nivariateRealOptimizer optimizer = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,68,"ptimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-10, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,64,"UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,83,nivariateRealOptimizer optimizer = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,84,"ptimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-12, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,79,"UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-11, 1e-14);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,104,ssertTrue(meanOptValue > -0.2719561281 && meanOptValue < -0.2719561280);
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,105,"ssertEquals((int) medianEval, 27);"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,99,assertTrue(meanOptValue > -0.2719561281);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,100,assertTrue(meanOptValue < -0.2719561280);
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,101,"assertEquals(23, (int) medianEval);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,113,nivariateRealOptimizer optimizer = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,114,"ptimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-12, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,109,"UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-12, 1e-14);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,130,nivariateRealOptimizer optimizer = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,131,"ptimizer.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-8, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,125,"UnivariateRealOptimizer optimizer = new BrentOptimizer(1e-8, 1e-14);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,136,"ssertEquals(3 * Math.PI / 2, result, 100 * optimizer.getConvergenceChecker().getRelativeThreshold());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,130,"assertEquals(3 * Math.PI / 2, result, 1e-6);"
False,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,139,"ssertEquals(3 * Math.PI / 2, result, 100 * optimizer.getConvergenceChecker().getRelativeThreshold());"
True,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,133,"assertEquals(3 * Math.PI / 2, result, 1e-6);"
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,39,nivariateRealOptimizer underlying = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,40,"nderlying.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-10, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,39,"UnivariateRealOptimizer underlying = new BrentOptimizer(1e-10, 1e-14);"
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,63,nivariateRealOptimizer underlying = new BrentOptimizer();
False,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,64,"nderlying.setConvergenceChecker(new BrentOptimizer.BrentConvergenceChecker(1e-9, 1e-14));"
True,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,62,"UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);"

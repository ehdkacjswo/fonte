is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,60, @version $Revision: 1.3 $ $Date: 2003/06/11 14:50:29 $
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,60,* @version $Revision: 1.4 $ $Date: 2003/06/15 17:01:39 $
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,64,ublic RealMatrix copy();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,65,* Returns a (deep) copy of this.
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,67,* @return matrix copy
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,69,RealMatrix copy();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,67, Compute the sum of *this and m
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,72,* Compute the sum of this and m.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,70, @exception  IllegalArgumentException if m is not the same size as *this
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,76,* @exception  IllegalArgumentException if m is not the same size as this
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,72,ublic RealMatrix add(RealMatrix m);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,78,RealMatrix add(RealMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,75, Compute *this minus m
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,81,* Compute this minus m.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,78, @exception  IllegalArgumentException if m is not the same size as *this
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,85,* @exception  IllegalArgumentException if m is not the same size as this
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,80,ublic RealMatrix subtract(RealMatrix m);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,87,RealMatrix subtract(RealMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,83, Returns the rank of the matrix
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,84, @return     the rank of this matrix
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,90,* Returns the rank of the matrix.
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,92,* @return the rank of this matrix
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,86,ublic int getRank();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,94,int getRank();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,89, Returns the result of adding d to each entry of *this
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,97,* Returns the result of adding d to each entry of this.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,93,ublic RealMatrix scalarAdd(double d);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,102,RealMatrix scalarAdd(double d);
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,96, Returns the result multiplying each entry of *this by d
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,105,* Returns the result multiplying each entry of this by d.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,98, @return     d*this
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,108,* @return     d * this
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,100,ublic RealMatrix scalarMultiply(double d);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,110,RealMatrix scalarMultiply(double d);
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,103, Returns the result postmultiplyin *this by m
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,113,* Returns the result postmultiplying this by m.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,105, @return     this*m
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,116,* @return     this * m
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,109,ublic RealMatrix multiply(RealMatrix m);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,120,RealMatrix multiply(RealMatrix m) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,112, Returns matrix entries as a two-dimensional array
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,123,* Returns matrix entries as a two-dimensional array.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,115,ublic double[][] getData();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,127,double[][] getData();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,118, Sets/overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,130,* Overwrites the underlying data for the matrix with
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,131,* a fresh copy of <code>data</code>.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,121,ublic void setData(double[][] data);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,135,void setData(double[][] data);
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,124, Returns the norm of the matrix
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,138,"* Returns the <a href=""http://mathworld.wolfram.com/"
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,139,"* MaximumAbsoluteRowSumNorm.html"">maximum absolute row sum norm</a>"
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,140,* of the matrix.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,127,ublic double getNorm();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,144,double getNorm();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,130, Returns entries in row as an array
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,131, @param row  the row to be fetched
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,132, @return     array of entries in the row
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,133, @throws     IllegalArgumentException if row > rowDimension
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,147,* Returns the entries in row number <code>row</code> as an array.
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,149,* @param row the row to be fetched
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,150,* @return array of entries in the row
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,151,* @throws IllegalArgumentException if row > rowDimension
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,135,ublic double[] getRow(int row);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,153,double[] getRow(int row) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,138, Returns entries in column as an array
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,156,* Returns the entries in column number <code>col</code> as an array.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,140, @return     array of entries in the column
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,141, @throws     IllegalArgumentException if column > columnDimension
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,159,* @return array of entries in the column
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,160,* @throws IllegalArgumentException if column > columnDimension
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,143,ublic double[] getColumn(int col);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,162,double[] getColumn(int col) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,146, Returns the entry in the specified row and column
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,165,* Returns the entry in the specified row and column.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,152,"ublic double getEntry(int row, int column);"
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,172,"double getEntry(int row, int column) throws IllegalArgumentException;"
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,155, Sets the entry in the specified row and column to the specified value
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,175,* Sets the entry in the specified row and column to the specified value.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,161,"ublic void setEntry(int row, int column, double value);"
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,182,"void setEntry(int row, int column, double value)"
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,183,throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,164, Returns the transpose of this matrix
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,186,* Returns the transpose of this matrix.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,167,ublic RealMatrix transpose();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,190,RealMatrix transpose();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,170, Returns the inverse of this matrix
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,193,* Returns the inverse of this matrix.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,174,ublic RealMatrix inverse();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,198,RealMatrix inverse() throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,177, Returns the determinant of this matrix
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,201,* Returns the determinant of this matrix.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,180,ublic double getDeterminant();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,205,double getDeterminant();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,186,ublic boolean isSquare();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,211,boolean isSquare();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,192,ublic boolean isSingular();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,217,boolean isSingular();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,195, Returns the number of rows in the matrix
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,220,* Returns the number of rows in the matrix.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,198,ublic int getRowDimension();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,224,int getRowDimension();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,201, Returns the number of columns in the matrix
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,227,* Returns the number of columns in the matrix.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,204,ublic int getColumnDimension();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,231,int getColumnDimension();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,207, Returns the trace of the matrix
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,234,"* Returns the <a href=""http://mathworld.wolfram.com/MatrixTrace.html"">"
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,235,* trace</a> of the matrix (the sum of the elements on the main diagonal).
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,210,ublic double getTrace();
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,239,double getTrace();
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,213, Returns the result of multiplying this by vector v
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,242,* Returns the result of multiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,244,* @param v the vector to operate on
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,217,ublic double[] operate(double[] v);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,248,double[] operate(double[] v) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,220, Returns the result of premultiplying this by vector v
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,251,* Returns the result of premultiplying this by the vector <code>v</code>.
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,253,* @param v the row vector to premultiply by
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,224,ublic RealMatrix preMultiply(double[] v);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,257,RealMatrix preMultiply(double[] v) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,228, matrix = *this and constant vector = b
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,261,* matrix = this and constant vector = <code>b</code>.
False,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,234,ublic double[] solve(double[] b);
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,268,double[] solve(double[] b) throws IllegalArgumentException;
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,271,* Returns a matrix of (column) solution vectors for linear systems with
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,272,* coefficient matrix = this and constant vectors = columns of
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,273,* <code>b</code>.
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,275,* @param b  matrix of constant vectors forming RHS of linear systems to
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,276,* to solve
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,277,* @return matrix of solution vectors
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,278,* @throws IllegalArgumentException if rowDimension != row dimension of b
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,279,* or this is singular
True,src/java/org/apache/commons/math/RealMatrix.java,src/java/org/apache/commons/math/RealMatrix.java,281,RealMatrix solve(RealMatrix b) throws IllegalArgumentException;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,59, Implementation for RealMatrix using double[][] array
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,60, @author  Phil Stetiz
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,61, @version $Revision: 1.3 $ $Date: 2003/06/11 14:50:29 $
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,59,* Implementation for RealMatrix using a double[][] array to store entries
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,60,"* and <a href=""http://www.math.gatech.edu/~bourbaki/"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,61,"* math2601/Web-notes/2num.pdf"">LU decompostion</a> to support linear system"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,62,* solution and inverse.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,63,* <p>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,64,"* The <a href=""http://www.math.gatech.edu/~bourbaki/math2601/Web-notes"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,65,"* /2num.pdf"">LU decompostion</a> is performed as needed, to support the"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,66,* following operations: <ul>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,67,* <li>solve</li>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,68,* <li>isSingular</li>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,69,* <li>getDeterminant</li>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,70,* <li>inverse</li> </ul>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,71,* <p>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,72,* <strong>Usage note</strong>:<br>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,73,* The LU decomposition is stored and reused on subsequent calls.  If matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,74,"* data are modified using any of the public setXxx methods, the saved"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,75,* decomposition is discarded.  If data are modified via references to the
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,76,"* underlying array obtained using <code>getDataRef()</code>, then the stored"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,77,"* LU decomposition will not be discarded.  In this case, you need to"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,78,* explicitly invoke <code>LUDecompose()</code> to recompute the decomposition
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,79,* before using any of the methods above.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,81,* @author  Phil Steitz
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,82,* @version $Revision: 1.4 $ $Date: 2003/06/15 17:01:39 $
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,66,rivate double data[][];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,87,private double data[][] = null;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,89,/** Entries of LU decomposition.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,90,* All updates to data (other than luDecompostion) *must* set this to null
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,92,private double lu[][] = null;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,94,/** Pivot array associated with LU decompostion */
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,95,private int[] pivot = null;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,97,/** Parity of the permutation associated with the LU decomposition */
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,98,private int parity = 1;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,100,/** Bound to determine effective singularity in LU decomposition */
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,101,private static double TOO_SMALL = 10E-12;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,104,* Creates a matrix with no data
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,72, Create a new RealMatrix with the supplied row and column dimensions
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,110,* Create a new RealMatrix with the supplied row and column dimensions.
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,77,nt columnDimension) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,116,int columnDimension) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,118,lu = null;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,81,ublic RealMatrixImpl(double[][] data) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,82,his.data = data;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,122,* Create a new RealMatrix using the <code>data</code> as the underlying
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,123,* data array.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,124,* <p>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,125,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,127,* @param d data for new matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,129,public RealMatrixImpl(double[][] d) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,130,this.copyIn(d);
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,131,lu = null;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,86, Create a new RealMatrix which is a copy of *this
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,135,* Create a new (column) RealMatrix using <code>v</code> as the
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,136,* data for the unique column of the <code>v.length x 1</code> matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,137,* created.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,138,* <p>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,139,"* The input array is copied, not referenced."
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,141,* @param v column vector holding data for new matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,143,public RealMatrixImpl(double[] v) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,144,int nRows = v.length;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,145,data = new double[nRows][1];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,146,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,147,data[row][0] = v[row];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,152,* Create a new RealMatrix which is a copy of this.
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,90,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,157,return new RealMatrixImpl(this.copyOut());
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,94, Compute the sum of *this and m
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,161,* Compute the sum of this and <code>m</code>.
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,97, @exception  IllegalArgumentException if m is not the same size as *this
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,165,* @exception  IllegalArgumentException if m is not the same size as this
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,99,ublic RealMatrix add(RealMatrix m) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,167,public RealMatrix add(RealMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,101,his.getRowDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,102,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,169,this.getRowDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,170,"throw new IllegalArgumentException(""matrix dimension mismatch"");"
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,117, Compute *this minus m
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,185,* Compute  this minus <code>m</code>.
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,122,ublic RealMatrix subtract(RealMatrix m) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,191,public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,124,his.getRowDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,125,"hrow new IllegalArgumentException(""matrix dimension mismatch"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,193,this.getRowDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,194,"throw new IllegalArgumentException(""matrix dimension mismatch"");"
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,140, Returns the rank of the matrix
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,141, @return     the rank of this matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,209,* Returns the rank of the matrix.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,211,* @return the rank of this matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,214,// FIXME: need to add singular value decomposition or drop this
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,149, Returns the result of adding d to each entry of *this
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,220,* Returns the result of adding d to each entry of this.
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,166, Returns the result multiplying each entry of *this by d
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,167, @param d    value to multiply all entries by
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,168, @return     d*this
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,238,* Returns the result multiplying each entry of this by <code>d</code>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,239,* @param d  value to multiply all entries by
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,240,* @return d * this
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,176,utData[row][col] = data[row][col]*d;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,248,outData[row][col] = data[row][col] * d;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,183, Returns the result postmultiplying *this by m
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,255,* Returns the result postmultiplying this by <code>m</code>.
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,186, @throws     IllegalArgumentException
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,258,* @throws     IllegalArgumentException
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,189,ublic RealMatrix multiply(RealMatrix m) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,190,f (this.getColumnDimension() != m.getRowDimension()) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,191,hrow new IllegalArgumentException
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,261,public RealMatrix multiply(RealMatrix m) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,262,if (this.getColumnDimension() != m.getRowDimension()) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,263,throw new IllegalArgumentException
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,194,ouble[][] mData = m.getData();
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,195,ouble[][] outData =
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,196,ew double[this.getRowDimension()][m.getColumnDimension()];
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,197,ouble sum = 0;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,198,or (int row = 0; row < this.getRowDimension(); row++) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,199,or (int col = 0; col < m.getColumnDimension(); col++) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,200,um = 0;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,201,or (int i = 0; i < this.getColumnDimension(); i++) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,202,um += data[row][i] * mData[i][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,266,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,267,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,268,double[][] mData = m.getData();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,269,double[][] outData =
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,270,new double[nRows][nCols];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,271,double sum = 0;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,272,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,273,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,274,sum = 0;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,275,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,276,sum += data[row][i] * mData[i][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,278,outData[row][col] = sum;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,204,utData[row][col] = sum;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,207,eturn new RealMatrixImpl(outData);
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,281,return new RealMatrixImpl(outData);
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,211, Returns matrix entries as a two-dimensional array
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,285,* Returns matrix entries as a two-dimensional array.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,286,* <p>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,287,* Makes a fresh copy of the underlying data.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,292,return copyOut();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,296,* Overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,297,* with a fresh copy of <code>inData</code>.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,299,* @param  inData 2-dimensional array of entries
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,301,public void setData(double[][] inData) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,302,copyIn(inData);
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,303,lu = null;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,307,* Returns a reference to the underlying data array.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,308,* <p>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,309,* Does not make a fresh copy of the underlying data.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,311,* @return 2-dimensional array of entries
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,313,public double[][] getDataRef() {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,219, Sets/overwrites the underlying data for the matrix
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,220, @param  data  2-dimensional array of entries
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,318,* Overwrites the underlying data for the matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,319,* with a reference to <code>inData</code>.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,320,* <p>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,321,* Does not make a fresh copy of <code>data</code>.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,323,* @param  inData 2-dimensional array of entries
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,222,ublic void setData(double[][] data) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,223,his.data = data;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,325,public void setDataRef(double[][] inData) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,326,this.data = inData;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,327,lu = null;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,227, Returns the 1-norm of the matrix (max column sum)
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,231,ouble maxColSum = 0;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,232,or (int col = 0; col < this.getColumnDimension(); col++) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,233,ouble sum = 0;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,234,or (int row = 0; row < this.getRowDimension(); row++) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,235,um += Math.abs(data[row][col]);
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,237,"axColSum = Math.max(maxColSum,sum);"
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,239,eturn maxColSum;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,335,double maxColSum = 0;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,336,for (int col = 0; col < this.getColumnDimension(); col++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,337,double sum = 0;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,338,for (int row = 0; row < this.getRowDimension(); row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,339,sum += Math.abs(data[row][col]);
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,341,"maxColSum = Math.max(maxColSum, sum);"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,343,return maxColSum;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,243, Returns entries in row as an array
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,245, @return     array of entries in the row
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,246, @throws     IllegalArgumentException if row > rowDimension
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,349,* @return array of entries in the row
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,350,* @throws IllegalArgumentException if row > rowDimension or row < 1
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,248,ublic double[] getRow(int row) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,249,eturn data[row];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,352,public double[] getRow(int row) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,353,if (row > this.getRowDimension() || row < 1) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,354,"throw new IllegalArgumentException(""illegal row argument"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,356,int ncols = this.getColumnDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,357,double[] out = new double[ncols];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,358,"System.arraycopy(data[row - 1], 0, out, 0, ncols);"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,359,return out;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,253, Returns entries in column as an array
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,254, @param col  column to fetch
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,255, @return     array of entries in the column
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,256, @throws     IllegalArgumentException if column > columnDimension
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,363,* @param col column to fetch
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,364,* @return array of entries in the column
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,365,* @throws IllegalArgumentException if column > columnDimension or
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,366,* column < 1
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,258,ublic double[] getColumn(int col) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,259,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,368,public double[] getColumn(int col) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,369,if (col > this.getColumnDimension() || col < 1) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,370,"throw new IllegalArgumentException(""illegal column argument"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,372,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,373,double[] out = new double[nRows];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,374,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,375,out[row] = data[row][col - 1];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,377,return out;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,263, Returns the entry in the specified row and column
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,264, @param row  row location of entry to be fetched
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,381,* @param row  row location of entry to be fetched
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,266," @return     matrix entry in row,column"
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,267, @throws     IllegalArgumentException if entry does not exist
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,383,"* @return matrix entry in row,column"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,384,* @throws IllegalArgumentException if entry does not exist
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,269,"ublic double getEntry(int row, int column) {"
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,270,f (row < 1 || column < 1 || row > this.getRowDimension()
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,271,| column > this.getColumnDimension()) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,272,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,273,"""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,386,"public double getEntry(int row, int column)"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,387,throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,388,if (row < 1 || column < 1 || row > this.getRowDimension()
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,389,|| column > this.getColumnDimension()) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,390,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,391,"(""matrix entry does not exist"");"
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,275,eturn data[row-1][column-1];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,393,return data[row - 1][column - 1];
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,279, Sets the entry in the specified row and column to the specified value
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,280, @param row    row location of entry to be set
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,397,* @param row    row location of entry to be set
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,282, @param value  value to set
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,399,* @param value  value to set
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,285,"ublic void setEntry(int row, int column, double value) {"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,402,"public void setEntry(int row, int column, double value)"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,403,throws IllegalArgumentException {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,287,| column > this.getColumnDimension()) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,288,hrow new IllegalArgumentException
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,289,"""matrix entry does not exist"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,405,|| column > this.getColumnDimension()) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,406,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,407,"(""matrix entry does not exist"");"
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,291,ata[row-1][column-1] = value;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,409,data[row - 1][column - 1] = value;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,410,lu = null;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,295, Returns the transpose of this matrix
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,299,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,418,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,419,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,420,"RealMatrixImpl out = new RealMatrixImpl(nCols, nRows);"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,421,double[][] outData = out.getDataRef();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,422,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,423,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,424,outData[col][row] = data[row][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,427,return out;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,304, Returns the inverse of this matrix
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,306, @throws IllegalArgumentException if *this is not invertible
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,432,* @throws IllegalArgumentException if this is not invertible
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,308,ublic RealMatrix inverse() {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,309,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,434,public RealMatrix inverse() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,435,return solve(getIdentity(this.getRowDimension()));
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,313, Returns the determinant of this matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,440,* @throws IllegalArgumentException if matrix is not square
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,316,ublic double getDeterminant() {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,317,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,442,public double getDeterminant() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,443,if (!isSquare()) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,444,"throw new IllegalArgumentException(""matrix is not square"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,446,if (isSingular()) {  // note: this has side effect of attempting LU
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,447,return 0d;        //       decomp if lu == null
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,448,} else {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,449,double det = (double) parity;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,450,for (int i = 0; i < this.getRowDimension(); i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,451,det *= lu[i][i];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,453,return det;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,321, Is this a square matrix?
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,329, Is this a singular matrix?
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,333,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,468,if (lu == null) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,469,try {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,470,LUDecompose();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,471,return false;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,472,} catch (IllegalArgumentException ex) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,473,return true;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,475,} else {            // LU decomp must have been successfully performed
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,476,return false;   // so the matrix is not singular
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,337, Returns the number of rows in the matrix
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,341,eturn data.length;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,484,return data.length;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,345, Returns the number of columns in the matrix
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,353, Returns the trace of the matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,496,* @throws IllegalArgumentException if the matrix is not square
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,356,ublic double getTrace() {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,357,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,498,public double getTrace() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,499,if (!isSquare()) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,500,"throw new IllegalArgumentException(""matrix is not square"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,502,double trace = data[0][0];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,503,for (int i = 1; i < this.getRowDimension(); i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,504,trace += data[i][i];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,506,return trace;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,361, Returns the result of multiplying this by the vector b
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,362, @return this*v
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,363, @throws IllegalArgumentException if columnDimension != v.size()
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,510,* @param v vector to operate on
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,511,* @throws IllegalArgumentException if columnDimension != v.length
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,512,* @return resulting vector
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,365,ublic double[] operate(double[] v) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,366,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,514,public double[] operate(double[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,515,if (v.length != this.getColumnDimension()) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,516,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,518,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,519,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,520,double[] out = new double[v.length];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,521,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,522,double sum = 0;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,523,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,524,sum += data[row][i] * v[i];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,526,out[row] = sum;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,528,return out;
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,370, Returns the result of premultiplying this by the vector v
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,371, @return v*this
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,372, @throws IllegalArgumentException if rowDimension != v.size()
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,532,* @param v vector to premultiply by
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,533,* @throws IllegalArgumentException if rowDimension != v.length
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,534,* @return resulting matrix
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,374,ublic RealMatrix preMultiply(double[] v) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,375,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,536,public RealMatrix preMultiply(double[] v) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,537,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,538,if (v.length != nCols) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,539,"throw new IllegalArgumentException(""vector has wrong length"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,541,"// being a bit lazy here -- probably should implement directly, like"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,542,// operate
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,543,RealMatrix pm = new RealMatrixImpl(v).transpose();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,544,return pm.multiply(this);
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,379, Returns the solution vector for a linear system with coefficient
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,380, matrix = *this and constant vector = b
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,382," @return   vector of solution values to AX = b, where A is *this"
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,383, @throws   IllegalArgumentException if rowDimension != b.length or matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,549,"* @return   vector of solution values to AX = b, where A is this"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,550,* @throws   IllegalArgumentException if rowDimension != b.length or matrix
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,386,ublic double[] solve(double[] b) {
False,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,387,"hrow new UnsupportedOperationException(""not implemented yet"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,553,public double[] solve(double[] b) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,554,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,555,if (b.length != nRows) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,556,throw new IllegalArgumentException
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,557,"(""constant vector has wrong length"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,559,RealMatrix bMatrix = new RealMatrixImpl(b);
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,560,double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,561,double[] out = new double[nRows];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,562,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,563,out[row] = solution[row][0];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,565,return out;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,569,"* Uses LU decomposition, performing the composition if the matrix has"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,570,"* not been decomposed, or if there have been changes to the matrix since"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,571,* the last decomposition.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,573,* @param b the constant vector
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,574,* @return solution matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,575,* @throws IllegalArgumentException if this is singular or dimensions
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,576,* do not match.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,578,public RealMatrix solve(RealMatrix b) throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,579,if (b.getRowDimension() != this.getRowDimension()) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,580,"throw new IllegalArgumentException(""Incorrect row dimension"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,582,if (this.isSingular()) {  // side effect: compute LU decomp
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,583,"throw new IllegalArgumentException(""Matrix is singular."");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,586,int nCol = this.getColumnDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,587,int nRow = this.getRowDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,588,int nColB = b.getColumnDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,589,int nRowB = b.getRowDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,591,// Apply permutations to b
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,592,double[][] bv = b.getData();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,593,double[][] bp = new double[nRowB][nColB];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,594,for (int row = 0; row < nRowB; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,595,for (int col = 0; col < nColB; col++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,596,bp[row][col] = bv[pivot[row]][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,599,bv = null;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,601,// Solve LY = b
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,602,for (int col = 0; col < nCol; col++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,603,for (int i = col + 1; i < nCol; i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,604,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,605,bp[i][j] -= bp[col][j] * lu[i][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,610,// Solve UX = Y
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,611,for (int col = nCol - 1; col >= 0; col--) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,612,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,613,bp[col][j] /= lu[col][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,615,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,616,for (int j = 0; j < nColB; j++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,617,bp[i][j] -= bp[col][j] * lu[i][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,622,RealMatrixImpl outMat = new RealMatrixImpl(bp);
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,623,return outMat;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,627,"* Computes a new <a href=""http://www.math.gatech.edu/~bourbaki/"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,628,"* math2601/Web-notes/2num.pdf"">LU decompostion</a> for this matrix,"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,629,* storing the result for use by other methods.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,630,* <p>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,631,* <strong>Implementation Note</strong>:<br>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,632,"* Uses <a href=""http://www.damtp.cam.ac.uk/user/fdl/"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,633,"* people/sd/lectures/nummeth98/linear.htm"">Crout's algortithm</a>,"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,634,* with partial pivoting.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,635,* <p>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,636,* <strong>Usage Note</strong>:<br>
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,637,* This method should rarely be invoked directly. Its only use is
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,638,* to force recomputation of the LU decomposition when changes have been
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,639,* made to the underlying data using direct array references. Changes
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,640,* made using setXxx methods will trigger recomputation when needed
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,641,* automatically.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,643,* @throws IllegalArgumentException if the matrix is singular
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,645,public void LUDecompose() throws IllegalArgumentException {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,646,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,647,int nCols = this.getColumnDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,648,lu = this.getData();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,650,// Initialize pivot array and parity
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,651,pivot = new int[nRows];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,652,for (int row = 0; row < nRows; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,653,pivot[row] = row;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,655,parity = 1;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,657,// Loop over columns
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,658,for (int col = 0; col < nCols; col++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,660,double sum = 0;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,662,// upper
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,663,for (int row = 0; row < col; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,664,sum = lu[row][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,665,for (int i = 0; i < row; i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,666,sum -= lu[row][i] * lu[i][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,668,lu[row][col] = sum;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,671,// lower
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,672,int max = col; // pivot row
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,673,double largest = 0d;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,674,for (int row = col; row < nRows; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,675,sum = lu[row][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,676,for (int i = 0; i < col; i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,677,sum -= lu[row][i] * lu[i][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,679,lu[row][col] = sum;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,681,// maintain best pivot choice
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,682,if (Math.abs(sum) > largest) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,683,largest = Math.abs(sum);
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,684,max = row;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,688,// Singularity check
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,689,if (Math.abs(lu[max][col]) < TOO_SMALL) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,690,lu = null;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,691,"throw new IllegalArgumentException(""matrix is singular"");"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,694,// Pivot if necessary
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,695,if (max != col) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,696,double tmp = 0;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,697,for (int i = 0; i < nCols; i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,698,tmp = lu[max][i];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,699,lu[max][i] = lu[col][i];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,700,lu[col][i] = tmp;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,702,int temp = pivot[max];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,703,pivot[max] = pivot[col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,704,pivot[col] = temp;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,705,parity = -parity;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,708,"//Divide the lower elements by the ""winning"" diagonal elt."
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,709,for (int row = col + 1; row < nRows; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,710,lu[row][col] /= lu[col][col];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,715,//------------------------ Protected methods
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,718,* Returns <code>dimension x dimension</code> identity matrix.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,720,* @param dimension dimension of identity matrix to generate
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,721,* @return identity matrix
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,723,protected RealMatrix getIdentity(int dimension) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,724,"RealMatrixImpl out = new RealMatrixImpl(dimension, dimension);"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,725,double[][] d = out.getDataRef();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,726,for (int row = 0; row < dimension; row++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,727,for (int col = 0; col < dimension; col++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,728,d[row][col] = row == col ? 1d : 0d;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,731,return out;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,734,//------------------------ Private methods
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,737,* Returns a fresh copy of the underlying data array.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,739,* @return a copy of the underlying data array.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,741,private double[][] copyOut() {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,742,int nRows = this.getRowDimension();
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,743,double[][] out =
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,744,new double[nRows][this.getColumnDimension()];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,745,"// can't copy 2-d array in one shot, otherwise get row references"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,746,for (int i = 0; i < nRows; i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,747,"System.arraycopy(data[i], 0, out[i], 0, data[i].length);"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,749,return out;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,753,* Replaces data with a fresh copy of the input array.
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,755,* @param in data to copy in
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,757,private void copyIn(double[][] in) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,758,int nRows = in.length;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,759,int nCols = in[0].length;
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,760,data = new double[nRows][nCols];
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,761,"System.arraycopy(in, 0, data, 0, in.length);"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,762,for (int i = 0; i < nRows ; i++) {
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,763,"System.arraycopy(in[i], 0, data[i], 0, nCols);"
True,src/java/org/apache/commons/math/RealMatrixImpl.java,src/java/org/apache/commons/math/RealMatrixImpl.java,765,lu = null;
False,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,64, @version $Revision: 1.1 $ $Date: 2003/05/12 19:02:53 $
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,64,* @version $Revision: 1.2 $ $Date: 2003/06/15 17:01:39 $
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,70,"private double[][] testDataPlus2 = { {3d,4d,5d}, {4d,7d,5d}, {3d,2d,10d} };"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,71,"private double[][] testDataMinus = { {-1d,-2d,-3d}, {-2d,-5d,-3d},"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,72,"{-1d,0d,-8d} };"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,73,"private double[] testDataRow1 = {1d,2d,3d};"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,74,"private double[] testDataCol3 = {3d,3d,8d};"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,77,"private double[][] preMultTest = {{8,12,33}};"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,79,"private double[][] testData2T = { {1d,2d}, {2d,5d}, {3d,3d}};"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,83,"private double[][] luData = { {2d,3d,3d}, {0d,5d,7d}, {6d,9d,8d} };"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,84,"private double[][] singular = { {2d,3d}, {2d,3d} };"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,85,"private double[][] bigSingular = {{1d,2d,3d,4d}, {2d,5d,3d,4d},"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,86,"{7d,3d,256d,1930d}, {3d,7d,6d,8d}}; // 4th row = 1st + 2nd"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,87,"private double[][] detData = { {1d,2d,3d}, {4d,5d,6d}, {7d,8d,10d} };"
False,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,77,"rivate double entryTolerance = Math.pow(2,-64);"
False,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,78,"rivate double normTolerance = Math.pow(2,-64);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,89,"private double[] testVector2 = {1,2,3,4};"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,90,private double entryTolerance = 10E-16;
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,91,private double normTolerance = 10E-14;
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,119,/** test copy functions */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,120,public void testCopyFunctions() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,121,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,122,RealMatrixImpl m2 = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,123,m2.setData(m.getData());
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,124,"assertClose(""getData"",m2,m,entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,125,// no dangling reference...
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,126,"m2.setEntry(1,1,2000d);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,127,RealMatrixImpl m3 = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,128,"assertClose(""no getData side effect"",m,m3,entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,129,m3 = (RealMatrixImpl) m.copy();
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,130,"double[][] stompMe = {{1d,2d,3d}};"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,131,m3.setDataRef(stompMe);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,132,"assertClose(""no copy side effect"",m,new RealMatrixImpl(testData),"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,133,entryTolerance);
False,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,146,"2.scalarMultiply(-1d).add(m),entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,176,"m2.scalarMultiply(-1d).add(m),entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,177,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,178,RealMatrix a = m.subtract(new RealMatrixImpl(testData2));
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,179,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,180,} catch (IllegalArgumentException ex) {
False,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,164,"2,entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,200,"m2,entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,201,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,202,RealMatrix a = m.multiply(new RealMatrixImpl(bigSingular));
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,203,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,204,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,209,/** test isSingular */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,210,public void testIsSingular() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,211,RealMatrixImpl m = new RealMatrixImpl(singular);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,212,"assertTrue(""singular"",m.isSingular());"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,213,m = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,214,"assertTrue(""big singular"",m.isSingular());"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,215,m = new RealMatrixImpl(id);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,216,"assertTrue(""identity nonsingular"",!m.isSingular());"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,217,m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,218,"assertTrue(""testData nonsingular"",!m.isSingular());"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,221,/** test inverse */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,222,public void testInverse() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,223,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,224,RealMatrix mInv = new RealMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,225,"assertClose(""inverse"",mInv,m.inverse(),normTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,226,"assertClose(""inverse^2"",m,m.inverse().inverse(),10E-12);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,229,/** test solve */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,230,public void testSolve() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,231,RealMatrixImpl m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,232,RealMatrix mInv = new RealMatrixImpl(testDataInv);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,233,// being a bit slothful here -- actually testing that X = A^-1 * B
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,234,"assertClose(""inverse-operate"",mInv.operate(testVector),"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,235,"m.solve(testVector),normTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,236,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,237,double[] x = m.solve(testVector2);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,238,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,239,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,242,RealMatrix bs = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,243,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,244,RealMatrix a = bs.solve(bs);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,245,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,246,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,249,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,250,RealMatrix a = m.solve(bs);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,251,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,252,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,257,/** test determinant */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,258,public void testDeterminant() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,259,RealMatrix m = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,260,"assertEquals(""singular determinant"",0,m.getDeterminant(),0);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,261,m = new RealMatrixImpl(detData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,262,"assertEquals(""nonsingular test"",-3d,m.getDeterminant(),normTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,263,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,264,double a = new RealMatrixImpl(testData2).getDeterminant();
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,265,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,266,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,271,/** test trace */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,272,public void testTrace() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,273,RealMatrix m = new RealMatrixImpl(id);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,274,"assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,275,m = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,276,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,277,double x = m.getTrace();
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,278,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,279,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,284,/** test sclarAdd */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,285,public void testScalarAdd() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,286,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,287,"assertClose(""scalar add"",new RealMatrixImpl(testDataPlus2),"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,288,"m.scalarAdd(2d),entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,291,/** test operate */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,292,public void testOperate() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,293,RealMatrix m = new RealMatrixImpl(id);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,294,double[] x = m.operate(testVector);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,295,"assertClose(""identity operate"",testVector,x,entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,296,m = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,297,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,298,x = m.operate(testVector);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,299,"fail(""Expecting illegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,300,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,305,/** test transpose */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,306,public void testTranspose() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,307,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,308,"assertClose(""inverse-transpose"",m.inverse().transpose(),"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,309,"m.transpose().inverse(),normTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,310,m = new RealMatrixImpl(testData2);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,311,RealMatrix mt = new RealMatrixImpl(testData2T);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,312,"assertClose(""transpose"",mt,m.transpose(),normTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,315,/** test preMultiply */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,316,public void testPremultiply() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,317,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,318,RealMatrix mp = new RealMatrixImpl(preMultTest);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,319,"assertClose(""premultiply"",m.preMultiply(testVector),mp,normTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,320,m = new RealMatrixImpl(bigSingular);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,321,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,322,RealMatrix x = m.preMultiply(testVector);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,323,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,324,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,329,public void testGetVectors() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,330,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,331,"assertClose(""get row"",m.getRow(1),testDataRow1,entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,332,"assertClose(""get col"",m.getColumn(3),testDataCol3,entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,333,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,334,double[] x = m.getRow(10);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,335,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,336,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,339,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,340,double[] x = m.getColumn(-1);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,341,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,342,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,347,public void testEntryMutators() {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,348,RealMatrix m = new RealMatrixImpl(testData);
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,349,"assertEquals(""get entry"",m.getEntry(1,2),2d,entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,350,"m.setEntry(1,2,100d);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,351,"assertEquals(""get entry"",m.getEntry(1,2),100d,entryTolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,352,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,353,"double x = m.getEntry(0,2);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,354,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,355,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,358,try {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,359,"m.setEntry(1,4,200d);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,360,"fail(""expecting IllegalArgumentException"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,361,} catch (IllegalArgumentException ex) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,367,//--------------- -----------------Private methods
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,369,/** verifies that two matrices are close (1-norm) */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,375,/** verifies that two vectors are close (sup norm) */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,376,"private void assertClose(String msg, double[] m, double[] n,"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,377,double tolerance) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,378,if (m.length != n.length) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,379,"fail(""vectors not same length"");"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,381,for (int i = 0; i < m.length; i++) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,382,"assertEquals(msg + "" "" +  i + "" elements differ"","
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,383,"m[i],n[i],tolerance);"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,387,/** Useful for debugging */
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,388,private void dumpMatrix(RealMatrix m) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,389,for (int i = 0; i < m.getRowDimension(); i++) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,390,"String os = """";"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,391,for (int j = 0; j < m.getColumnDimension(); j++) {
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,392,"os += m.getEntry(i+1, j+1) + "" "";"
True,src/test/org/apache/commons/math/RealMatrixImplTest.java,src/test/org/apache/commons/math/RealMatrixImplTest.java,394,System.out.println(os);

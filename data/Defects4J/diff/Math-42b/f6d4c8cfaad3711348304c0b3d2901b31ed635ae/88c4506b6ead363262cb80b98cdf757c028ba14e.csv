is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,23,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,101,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,102,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,103,* @param v coordinates array
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,104,* @exception DimensionMismatchException if array does not have 3 elements
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,105,* @see #toArray()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,107,public Vector3D(double[] v) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,108,if (v.length != 3) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,109,"throw new DimensionMismatchException(v.length, 3);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,111,this.x = v[0];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,112,this.y = v[1];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,113,this.z = v[2];
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,217,/** Get the vector coordinates as a dimension 3 array.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,218,* @return vector coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,219,* @see #Vector3D(double[])
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,221,public double[] toArray() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,222,"return new double[] { x, y, z };"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,21,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,73,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,74,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,75,* @param v coordinates array
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,76,* @exception DimensionMismatchException if array does not have 2 elements
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,77,* @see #toArray()
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,79,public Vector2D(double[] v) throws DimensionMismatchException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,80,if (v.length != 2) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,81,"throw new DimensionMismatchException(v.length, 2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,83,this.x = v[0];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,84,this.y = v[1];
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,161,/** Get the vector coordinates as a dimension 2 array.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,162,* @return vector coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,163,* @see #Vector2D(double[])
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,165,public double[] toArray() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,166,"return new double[] { x, y };"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,20,import org.apache.commons.math.exception.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,45,"checkVector(new Vector3D(new double[] { 2,  5,  -3 }),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,46,"2, 5, -3);"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,49,@Test(expected=DimensionMismatchException.class)
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,50,public void testWrongDimension() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,51,"new Vector3D(new double[] { 2,  5 });"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,60,double[] coordinates = v.toArray();
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,61,Assert.assertTrue(FastMath.abs(coordinates[0] - 1) < 1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,62,Assert.assertTrue(FastMath.abs(coordinates[1] - 2) < 1.0e-12);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DTest.java,63,Assert.assertTrue(FastMath.abs(coordinates[2] - 3) < 1.0e-12);

is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,17,ackage org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,17,package org.apache.commons.math.geometry;
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,19,** This interface represents a generic point to be used in a space partition.
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,20, <p>Points are completely virtual entities with no specification at
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,21," all, so this class is essentially a marker interface with no"
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,22, methods. This allows to perform partition in traditional euclidean
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,23," n-dimensions spaces, but also in more exotic universes like for"
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,24, example the surface of the unit sphere.</p>
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,25, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,21,"/** This interface represents a generic space, with affine and vectorial counterparts."
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,22,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,23,* @see Vector
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,24,* @since 3.0
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,27,ublic interface Point {
False,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,28,"/ nothing here, this is only a marker interface"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,26,public interface Space extends Serializable {
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,28,/** Get the dimension of the space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,29,* @return dimension of the space
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,31,int getDimension();
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,33,/** Get the n-1 dimension subspace of this space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,34,* @return n-1 dimension sub-space of this space
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,35,* @see #getDimension()
True,src/main/java/org/apache/commons/math/geometry/partitioning/Point.java,src/main/java/org/apache/commons/math/geometry/Space.java,37,Space getSubSpace();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,17,package org.apache.commons.math.geometry;
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,19,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,20,import java.text.NumberFormat;
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,22,/** This interface represents a generic vector in a vectorial space or a point in an affine space.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,23,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,24,* @see Space
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,25,* @see Vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,26,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,28,public interface Vector<S extends Space> extends Serializable {
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,30,/** Get the space to which the vector belongs.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,31,* @return containing space
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,33,Space getSpace();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,35,/** Get the null vector of the vetorial space or origin point of the affine space.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,36,* @return null vector of the vetorial space or origin point of the affine space
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,38,Vector<S> getZero();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,40,/** Get the L<sub>1</sub> norm for the vector.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,41,* @return L<sub>1</sub> norm for the vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,43,double getNorm1();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,45,/** Get the L<sub>2</sub> norm for the vector.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,46,* @return Euclidean norm for the vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,48,double getNorm();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,50,/** Get the square of the norm for the vector.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,51,* @return square of the Euclidean norm for the vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,53,double getNormSq();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,55,/** Get the L<sub>&infin;</sub> norm for the vector.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,56,* @return L<sub>&infin;</sub> norm for the vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,58,double getNormInf();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,60,/** Add a vector to the instance.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,61,* @param v vector to add
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,62,* @return a new vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,64,Vector<S> add(Vector<S> v);
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,66,/** Add a scaled vector to the instance.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,67,* @param factor scale factor to apply to v before adding it
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,68,* @param v vector to add
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,69,* @return a new vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,71,"Vector<S> add(double factor, Vector<S> v);"
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,73,/** Subtract a vector from the instance.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,74,* @param v vector to subtract
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,75,* @return a new vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,77,Vector<S> subtract(Vector<S> v);
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,79,/** Subtract a scaled vector from the instance.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,80,* @param factor scale factor to apply to v before subtracting it
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,81,* @param v vector to subtract
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,82,* @return a new vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,84,"Vector<S> subtract(double factor, Vector<S> v);"
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,87,* Returns true if any coordinate of this vector is NaN; false otherwise
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,88,* @return  true if any coordinate of this vector is NaN; false otherwise
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,90,boolean isNaN();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,93,* Returns true if any coordinate of this vector is infinite and none are NaN;
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,94,* false otherwise
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,95,* @return  true if any coordinate of this vector is infinite and none are NaN;
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,96,* false otherwise
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,98,boolean isInfinite();
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,100,/** Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,101,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,102,* <code>q.subtract(p).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,103,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,104,* @param v second vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,105,* @return the distance between the instance and p according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,107,double distance1(Vector<S> v);
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,109,/** Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,110,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,111,* <code>q.subtract(p).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,112,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,113,* @param v second vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,114,* @return the distance between the instance and p according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,116,double distance(Vector<S> v);
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,118,/** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,119,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,120,* <code>q.subtract(p).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,121,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,122,* @param v second vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,123,* @return the distance between the instance and p according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,125,double distanceInf(Vector<S> v);
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,127,/** Compute the square of the distance between the instance and another vector.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,128,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,129,* <code>q.subtract(p).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,130,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,131,* @param v second vector
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,132,* @return the square of the distance between the instance and p
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,134,double distanceSq(Vector<S> v);
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,136,/** Get a string representation of this vector.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,137,* @param format the custom format for components.
True,src/main/java/org/apache/commons/math/geometry/Vector.java,src/main/java/org/apache/commons/math/geometry/Vector.java,139,public String toString(final NumberFormat format);
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,18,package org.apache.commons.math.geometry;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,20,import java.text.FieldPosition;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,21,import java.text.NumberFormat;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,22,import java.text.ParsePosition;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,23,import java.util.Locale;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,25,import org.apache.commons.math.util.CompositeFormat;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,26,import org.apache.commons.math.exception.MathParseException;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,29,"* Formats a vector in components list format ""{x; y; ...}""."
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,30,"* <p>The prefix and suffix ""{"" and ""}"" and the separator ""; "" can be replaced by"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,31,* any user-defined strings. The number format for components can be configured.</p>
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,32,"* <p>White space is ignored at parse time, even if it is in the prefix, suffix"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,33,* or separator specifications. So even if the default separator does include a space
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,34,"* character that is used at format time, both input string ""{1;1;1}"" and"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,35,"* "" { 1 ; 1 ; 1 } "" will be parsed without error and the same vector will be"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,36,"* returned. In the second case, however, the parse position after parsing will be"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,37,"* just after the closing curly brace, i.e. just before the trailing space.</p>"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,39,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,40,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,42,public abstract class VectorFormat<S extends Space> {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,44,"/** The default prefix: ""{"". */"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,45,"public static final String DEFAULT_PREFIX = ""{"";"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,47,"/** The default suffix: ""}"". */"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,48,"public static final String DEFAULT_SUFFIX = ""}"";"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,50,"/** The default separator: "", "". */"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,51,"public static final String DEFAULT_SEPARATOR = ""; "";"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,53,/** Prefix. */
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,54,private final String prefix;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,56,/** Suffix. */
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,57,private final String suffix;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,59,/** Separator. */
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,60,private final String separator;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,62,/** Trimmed prefix. */
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,63,private final String trimmedPrefix;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,65,/** Trimmed suffix. */
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,66,private final String trimmedSuffix;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,68,/** Trimmed separator. */
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,69,private final String trimmedSeparator;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,71,/** The format used for components. */
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,72,private final NumberFormat format;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,75,* Create an instance with default settings.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,76,"* <p>The instance uses the default prefix, suffix and separator:"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,77,"* ""{"", ""}"", and ""; "" and the default number format for components.</p>"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,79,protected VectorFormat() {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,80,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,81,CompositeFormat.getDefaultNumberFormat());
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,85,* Create an instance with a custom number format for components.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,86,* @param format the custom format for components.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,88,protected VectorFormat(final NumberFormat format) {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,89,"this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,93,"* Create an instance with custom prefix, suffix and separator."
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,94,"* @param prefix prefix to use instead of the default ""{"""
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,95,"* @param suffix suffix to use instead of the default ""}"""
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,96,"* @param separator separator to use instead of the default ""; """
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,98,"protected VectorFormat(final String prefix, final String suffix,"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,99,final String separator) {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,100,"this(prefix, suffix, separator, CompositeFormat.getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,104,"* Create an instance with custom prefix, suffix, separator and format"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,105,* for components.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,106,"* @param prefix prefix to use instead of the default ""{"""
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,107,"* @param suffix suffix to use instead of the default ""}"""
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,108,"* @param separator separator to use instead of the default ""; """
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,109,* @param format the custom format for components.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,111,"protected VectorFormat(final String prefix, final String suffix,"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,112,"final String separator, final NumberFormat format) {"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,113,this.prefix      = prefix;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,114,this.suffix      = suffix;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,115,this.separator   = separator;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,116,trimmedPrefix    = prefix.trim();
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,117,trimmedSuffix    = suffix.trim();
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,118,trimmedSeparator = separator.trim();
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,119,this.format      = format;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,123,* Get the set of locales for which point/vector formats are available.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,124,* <p>This is the same set as the {@link NumberFormat} set.</p>
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,125,* @return available point/vector format locales.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,127,public static Locale[] getAvailableLocales() {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,128,return NumberFormat.getAvailableLocales();
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,132,* Get the format prefix.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,133,* @return format prefix.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,135,public String getPrefix() {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,136,return prefix;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,140,* Get the format suffix.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,141,* @return format suffix.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,143,public String getSuffix() {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,144,return suffix;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,148,* Get the format separator between components.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,149,* @return format separator.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,151,public String getSeparator() {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,152,return separator;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,156,* Get the components format.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,157,* @return components format.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,159,public NumberFormat getFormat() {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,160,return format;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,164,* Formats a {@link Vector} object to produce a string.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,165,* @param vector the object to format.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,166,* @return a formatted string.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,168,public String format(Vector<S> vector) {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,169,"return format(vector, new StringBuffer(), new FieldPosition(0)).toString();"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,173,* Formats a {@link Vector} object to produce a string.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,174,* @param vector the object to format.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,175,* @param toAppendTo where the text is to be appended
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,176,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,177,*            offsets of the alignment field
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,178,* @return the value passed in as toAppendTo.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,180,"public abstract StringBuffer format(Vector<S> vector,"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,181,"StringBuffer toAppendTo, FieldPosition pos);"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,184,* Formats the coordinates of a {@link Vector} to produce a string.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,185,* @param toAppendTo where the text is to be appended
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,186,"* @param pos On input: an alignment field, if desired. On output: the"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,187,*            offsets of the alignment field
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,188,* @param coordinates coordinates of the object to format.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,189,* @return the value passed in as toAppendTo.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,191,"protected StringBuffer format(StringBuffer toAppendTo, FieldPosition pos,"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,192,double ... coordinates) {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,194,pos.setBeginIndex(0);
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,195,pos.setEndIndex(0);
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,197,// format prefix
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,198,toAppendTo.append(prefix);
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,200,// format components
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,201,for (int i = 0; i < coordinates.length; ++i) {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,202,if (i > 0) {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,203,toAppendTo.append(separator);
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,205,"CompositeFormat.formatDouble(coordinates[i], format, toAppendTo, pos);"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,208,// format suffix
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,209,toAppendTo.append(suffix);
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,211,return toAppendTo;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,216,* Parses a string to produce a {@link Vector} object.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,217,* @param source the string to parse
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,218,* @return the parsed {@link Vector} object.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,219,* @throws MathParseException if the beginning of the specified string
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,220,* cannot be parsed.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,222,public abstract Vector<S> parse(String source);
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,225,* Parses a string to produce a {@link Vector} object.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,226,* @param source the string to parse
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,227,* @param pos input/ouput parsing parameter.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,228,* @return the parsed {@link Vector} object.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,230,"public abstract Vector<S> parse(String source, ParsePosition pos);"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,233,* Parses a string to produce an array of coordinates.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,234,* @param dimension dimension of the space
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,235,* @param source the string to parse
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,236,* @param pos input/ouput parsing parameter.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,237,* @return coordinates array.
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,239,"protected double[] parseCoordinates(int dimension, String source, ParsePosition pos) {"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,241,int initialIndex = pos.getIndex();
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,242,double[] coordinates = new double[dimension];
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,244,// parse prefix
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,245,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,246,"if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,247,return null;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,250,for (int i = 0; i < dimension; ++i) {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,252,// skip whitespace
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,253,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,255,// parse separator
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,256,if (i > 0) {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,257,"if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,258,return null;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,262,// skip whitespace
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,263,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,265,// parse coordinate
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,266,"Number c = CompositeFormat.parseNumber(source, format, pos);"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,267,if (c == null) {
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,268,// invalid coordinate
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,269,"// set index back to initial, error index should already be set"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,270,pos.setIndex(initialIndex);
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,271,return null;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,274,// store coordinate
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,275,coordinates[i] = c.doubleValue();
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,279,// parse suffix
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,280,"CompositeFormat.parseAndIgnoreWhitespace(source, pos);"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,281,"if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {"
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,282,return null;
True,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,src/main/java/org/apache/commons/math/geometry/VectorFormat.java,285,return coordinates;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,18,package org.apache.commons.math.geometry.euclidean.oned;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,22,import org.apache.commons.math.exception.MathUnsupportedOperationException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,23,import org.apache.commons.math.exception.util.LocalizedFormats;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,24,import org.apache.commons.math.geometry.Space;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,27,* This class implements a one-dimensional space.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,28,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,29,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,31,"public class Euclidean1D implements Serializable, Space {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,33,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,34,private static final long serialVersionUID = -1178039568877797126L;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,36,/** Private constructor for the singleton.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,38,private Euclidean1D() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,41,/** Get the unique instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,42,* @return the unique instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,44,public static Euclidean1D getInstance() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,45,return LazyHolder.INSTANCE;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,48,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,49,public int getDimension() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,50,return 1;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,53,/** {@inheritDoc}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,54,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,55,"* As the 1-dimension Euclidean space does not have proper sub-spaces,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,56,* this method always throws a {@link MathUnsupportedOperationException}
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,57,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,58,* @return nothing
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,59,* @throws MathUnsupportedOperationException in all cases
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,61,public Space getSubSpace() throws MathUnsupportedOperationException {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,62,"throw new MathUnsupportedOperationException(LocalizedFormats.NOT_SUPPORTED_IN_DIMENSION_N, 1);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,65,// CHECKSTYLE: stop HideUtilityClassConstructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,66,/** Holder for the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,67,* <p>We use here the Initialization On Demand Holder Idiom.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,69,private static class LazyHolder {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,70,/** Cached field instance. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,71,private static final Euclidean1D INSTANCE = new Euclidean1D();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,73,// CHECKSTYLE: resume HideUtilityClassConstructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,75,/** Handle deserialization of the singleton.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,76,* @return the singleton instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,78,private Object readResolve() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,79,// return the singleton instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Euclidean1D.java,80,return LazyHolder.INSTANCE;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,17,ackage org.apache.commons.math.geometry.euclidean.oned;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,19,mport org.apache.commons.math.geometry.partitioning.Point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,21,** This class represents a 1D point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,22, <p>Instances of this class are guaranteed to be immutable.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,23, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,25,ublic class Point1D implements Point {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,27,** Point at 0.0 abscissa. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,28,ublic static final Point1D ZERO = new Point1D(0.0);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,30,** Point at 1.0 abscissa. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,31,ublic static final Point1D ONE = new Point1D(1.0);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,33,** Point at undefined (NaN) abscissa. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,34,ublic static final Point1D UNDEFINED = new Point1D(Double.NaN);
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,36,** Abscissa of the point. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,37,rivate double x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,39,** Simple constructor.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,40, @param x abscissa of the point
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,42,ublic Point1D(final double x) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,43,his.x = x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,46,** Get the abscissa of the point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,47, @return abscissa of the point
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,49,ublic double getAbscissa() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Point1D.java,50,eturn x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,17,package org.apache.commons.math.geometry.euclidean.oned;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,19,import java.text.NumberFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,21,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,22,import org.apache.commons.math.geometry.Space;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,23,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,24,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,26,/** This class represents a 1D vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,27,* <p>Instances of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,28,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,29,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,31,public class Vector1D implements Vector<Euclidean1D> {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,33,/** Origin (coordinates: 0). */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,34,public static final Vector1D ZERO = new Vector1D(0.0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,36,/** Unit (coordinates: 1). */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,37,public static final Vector1D ONE  = new Vector1D(1.0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,39,// CHECKSTYLE: stop ConstantName
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,40,/** A vector with all coordinates set to NaN. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,41,public static final Vector1D NaN = new Vector1D(Double.NaN);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,42,// CHECKSTYLE: resume ConstantName
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,44,/** A vector with all coordinates set to positive infinity. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,45,public static final Vector1D POSITIVE_INFINITY =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,46,new Vector1D(Double.POSITIVE_INFINITY);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,48,/** A vector with all coordinates set to negative infinity. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,49,public static final Vector1D NEGATIVE_INFINITY =
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,50,new Vector1D(Double.NEGATIVE_INFINITY);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,52,/** Serializable UID. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,53,private static final long serialVersionUID = 7556674948671647925L;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,55,/** Abscissa. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,56,private final double x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,58,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,59,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,60,* @param x abscissa
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,61,* @see #getX()
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,63,public Vector1D(double x) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,64,this.x = x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,67,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,68,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,69,* The vector built will be a * u
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,70,* @param a scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,71,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,73,"public Vector1D(double a, Vector1D u) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,74,this.x = a * u.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,77,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,78,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,79,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,80,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,81,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,82,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,83,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,85,"public Vector1D(double a1, Vector1D u1, double a2, Vector1D u2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,86,this.x = a1 * u1.x + a2 * u2.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,89,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,90,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,91,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,92,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,93,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,94,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,95,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,96,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,97,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,99,"public Vector1D(double a1, Vector1D u1, double a2, Vector1D u2,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,100,"double a3, Vector1D u3) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,101,this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,104,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,105,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,106,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,107,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,108,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,109,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,110,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,111,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,112,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,113,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,114,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,116,"public Vector1D(double a1, Vector1D u1, double a2, Vector1D u2,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,117,"double a3, Vector1D u3, double a4, Vector1D u4) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,118,this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,121,/** Get the abscissa of the vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,122,* @return abscissa of the vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,123,* @see #Vector1D(double)
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,125,public double getX() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,126,return x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,129,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,130,public Space getSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,131,return Euclidean1D.getInstance();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,134,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,135,public Vector1D getZero() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,136,return ZERO;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,139,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,140,public double getNorm1() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,141,return FastMath.abs(x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,144,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,145,public double getNorm() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,146,return FastMath.abs(x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,149,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,150,public double getNormSq() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,151,return x * x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,154,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,155,public double getNormInf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,156,return FastMath.abs(x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,159,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,160,public Vector1D add(Vector<Euclidean1D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,161,Vector1D v1 = (Vector1D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,162,return new Vector1D(x + v1.getX());
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,165,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,166,"public Vector1D add(double factor, Vector<Euclidean1D> v) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,167,Vector1D v1 = (Vector1D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,168,return new Vector1D(x + factor * v1.getX());
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,171,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,172,public Vector1D subtract(Vector<Euclidean1D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,173,Vector1D p3 = (Vector1D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,174,return new Vector1D(x - p3.x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,177,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,178,"public Vector1D subtract(double factor, Vector<Euclidean1D> v) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,179,Vector1D v1 = (Vector1D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,180,return new Vector1D(x - factor * v1.getX());
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,183,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,184,public boolean isNaN() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,185,return Double.isNaN(x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,188,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,189,public boolean isInfinite() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,190,return !isNaN() && Double.isInfinite(x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,193,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,194,public double distance1(Vector<Euclidean1D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,195,Vector1D p3 = (Vector1D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,196,final double dx = FastMath.abs(p3.x - x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,197,return dx;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,200,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,201,public double distance(Vector<Euclidean1D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,202,Vector1D p3 = (Vector1D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,203,final double dx = p3.x - x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,204,return FastMath.abs(dx);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,207,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,208,public double distanceInf(Vector<Euclidean1D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,209,Vector1D p3 = (Vector1D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,210,final double dx = FastMath.abs(p3.x - x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,211,return dx;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,214,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,215,public double distanceSq(Vector<Euclidean1D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,216,Vector1D p3 = (Vector1D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,217,final double dx = p3.x - x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,218,return dx * dx;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,221,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,222,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,223,* <code>p1.subtract(p2).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,224,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,225,* @param p1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,226,* @param p2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,227,* @return the distance between p1 and p2 according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,229,"public static double distance(Vector1D p1, Vector1D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,230,return p1.distance(p2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,233,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,234,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,235,* <code>p1.subtract(p2).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,236,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,237,* @param p1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,238,* @param p2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,239,* @return the distance between p1 and p2 according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,241,"public static double distanceInf(Vector1D p1, Vector1D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,242,return p1.distanceInf(p2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,245,/** Compute the square of the distance between two vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,246,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,247,* <code>p1.subtract(p2).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,248,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,249,* @param p1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,250,* @param p2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,251,* @return the square of the distance between p1 and p2
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,253,"public static double distanceSq(Vector1D p1, Vector1D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,254,return p1.distanceSq(p2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,258,* Test for the equality of two 1D vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,259,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,260,"* If all coordinates of two 1D vectors are exactly the same, and none are"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,261,"* <code>Double.NaN</code>, the two 1D vectors are considered to be equal."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,262,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,263,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,264,* <code>NaN</code> coordinates are considered to affect globally the vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,265,"* and be equals to each other - i.e, if either (or all) coordinates of the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,266,"* 1D vector are equal to <code>Double.NaN</code>, the 1D vector is equal to"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,267,* {@link #NaN}.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,268,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,270,* @param other Object to test for equality to this
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,271,"* @return true if two 1D vector objects are equal, false if"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,272,"*         object is null, not an instance of Vector1D, or"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,273,*         not equal to this Vector1D instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,276,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,277,public boolean equals(Object other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,279,if (this == other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,280,return true;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,283,if (other instanceof Vector1D) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,284,final Vector1D rhs = (Vector1D)other;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,285,if (rhs.isNaN()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,286,return this.isNaN();
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,289,return x == rhs.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,291,return false;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,295,* Get a hashCode for the 1D vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,296,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,297,* All NaN values have the same hash code.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,299,* @return a hash code value for this object
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,301,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,302,public int hashCode() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,303,if (isNaN()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,304,return 7785;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,306,return 997 * MathUtils.hash(x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,309,/** Get a string representation of this vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,310,* @return a string representation of this vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,312,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,313,public String toString() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,314,return Vector1DFormat.getInstance().format(this);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,317,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,318,public String toString(final NumberFormat format) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1D.java,319,return new Vector1DFormat(format).format(this);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,18,package org.apache.commons.math.geometry.euclidean.oned;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,20,import java.text.FieldPosition;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,21,import java.text.NumberFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,22,import java.text.ParsePosition;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,23,import java.util.Locale;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,25,import org.apache.commons.math.exception.MathParseException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,26,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,27,import org.apache.commons.math.geometry.VectorFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,28,import org.apache.commons.math.util.CompositeFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,31,"* Formats a 1D vector in components list format ""{x}""."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,32,"* <p>The prefix and suffix ""{"" and ""}"" can be replaced by"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,33,* any user-defined strings. The number format for components can be configured.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,34,"* <p>White space is ignored at parse time, even if it is in the prefix, suffix"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,35,* or separator specifications. So even if the default separator does include a space
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,36,"* character that is used at format time, both input string ""{1}"" and"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,37,"* "" { 1 } "" will be parsed without error and the same vector will be"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,38,"* returned. In the second case, however, the parse position after parsing will be"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,39,"* just after the closing curly brace, i.e. just before the trailing space.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,41,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,42,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,44,public class Vector1DFormat extends VectorFormat<Euclidean1D> {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,47,* Create an instance with default settings.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,48,"* <p>The instance uses the default prefix, suffix and separator:"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,49,"* ""{"", ""}"", and ""; "" and the default number format for components.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,51,public Vector1DFormat() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,52,"super(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,53,CompositeFormat.getDefaultNumberFormat());
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,57,* Create an instance with a custom number format for components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,58,* @param format the custom format for components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,60,public Vector1DFormat(final NumberFormat format) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,61,"super(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,65,"* Create an instance with custom prefix, suffix and separator."
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,66,"* @param prefix prefix to use instead of the default ""{"""
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,67,"* @param suffix suffix to use instead of the default ""}"""
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,69,"public Vector1DFormat(final String prefix, final String suffix) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,70,"super(prefix, suffix, DEFAULT_SEPARATOR, CompositeFormat.getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,74,"* Create an instance with custom prefix, suffix, separator and format"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,75,* for components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,76,"* @param prefix prefix to use instead of the default ""{"""
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,77,"* @param suffix suffix to use instead of the default ""}"""
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,78,* @param format the custom format for components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,80,"public Vector1DFormat(final String prefix, final String suffix,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,81,final NumberFormat format) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,82,"super(prefix, suffix, DEFAULT_SEPARATOR, format);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,86,* Returns the default 1D vector format for the current locale.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,87,* @return the default 1D vector format.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,89,public static Vector1DFormat getInstance() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,90,return getInstance(Locale.getDefault());
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,94,* Returns the default 1D vector format for the given locale.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,95,* @param locale the specific locale used by the format.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,96,* @return the 1D vector format specific to the given locale.
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,98,public static Vector1DFormat getInstance(final Locale locale) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,99,return new Vector1DFormat(CompositeFormat.getDefaultNumberFormat(locale));
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,102,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,103,"public StringBuffer format(final Vector<Euclidean1D> vector, final StringBuffer toAppendTo,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,104,final FieldPosition pos) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,105,final Vector1D p1 = (Vector1D) vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,106,"return format(toAppendTo, pos, p1.getX());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,109,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,110,public Vector1D parse(final String source) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,111,ParsePosition parsePosition = new ParsePosition(0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,112,"Vector1D result = parse(source, parsePosition);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,113,if (parsePosition.getIndex() == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,114,"throw new MathParseException(source,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,115,"parsePosition.getErrorIndex(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,116,Vector1D.class);
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,118,return result;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,121,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,122,"public Vector1D parse(final String source, final ParsePosition pos) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,123,"final double[] coordinates = parseCoordinates(1, source, pos);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,124,if (coordinates == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,125,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/oned/Vector1DFormat.java,127,return new Vector1D(coordinates[0]);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,18,package org.apache.commons.math.geometry.euclidean.threed;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,22,import org.apache.commons.math.geometry.Space;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,23,import org.apache.commons.math.geometry.euclidean.twod.Euclidean2D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,26,* This class implements a three-dimensional space.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,27,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,28,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,30,"public class Euclidean3D implements Serializable, Space {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,32,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,33,private static final long serialVersionUID = 6249091865814886817L;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,35,/** Private constructor for the singleton.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,37,private Euclidean3D() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,40,/** Get the unique instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,41,* @return the unique instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,43,public static Euclidean3D getInstance() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,44,return LazyHolder.INSTANCE;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,47,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,48,public int getDimension() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,49,return 3;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,52,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,53,public Euclidean2D getSubSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,54,return Euclidean2D.getInstance();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,57,// CHECKSTYLE: stop HideUtilityClassConstructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,58,/** Holder for the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,59,* <p>We use here the Initialization On Demand Holder Idiom.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,61,private static class LazyHolder {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,62,/** Cached field instance. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,63,private static final Euclidean3D INSTANCE = new Euclidean3D();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,65,// CHECKSTYLE: resume HideUtilityClassConstructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,67,/** Handle deserialization of the singleton.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,68,* @return the singleton instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,70,private Object readResolve() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,71,// return the singleton instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Euclidean3D.java,72,return LazyHolder.INSTANCE;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,17,ackage org.apache.commons.math.geometry.euclidean.threed;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,19,mport org.apache.commons.math.geometry.partitioning.Point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,21,** This class represents a 3D point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,22, <p>Instances of this class are guaranteed to be immutable.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,23, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,25,ublic class Point3D extends Vector3D implements Point {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,27,** Point at undefined (NaN) coordinates. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,28,"ublic static final Point3D UNDEFINED = new Point3D(Double.NaN, Double.NaN, Double.NaN);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,30,** Serializable UID. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,31,rivate static final long serialVersionUID = 9128130934224884451L;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,33,** Simple constructor.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,34, Build a vector from its coordinates
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,35, @param x abscissa
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,36, @param y ordinate
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,37, @param z height
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,38, @see #getX()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,39, @see #getY()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,40, @see #getZ()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,42,"ublic Point3D(final double x, final double y, final double z) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,43,"uper(x, y, z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,46,** Simple constructor.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,47, Build a vector from its azimuthal coordinates
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,48, @param alpha azimuth (&alpha;) around Z
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,49,"              (0 is +X, &pi;/2 is +Y, &pi; is -X and 3&pi;/2 is -Y)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,50," @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,51, @see #getAlpha()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,52, @see #getDelta()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,54,"ublic Point3D(final double alpha, final double delta) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,55,"uper(alpha, delta);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,58,** Multiplicative constructor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,59, Build a vector from another one and a scale factor.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,60, The vector built will be a * u
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,61, @param a scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,62, @param u base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,64,"ublic Point3D(final double a, final Vector3D u) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,65,"uper(a, u);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,68,** Linear constructor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,69, Build a vector from two other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,70, The vector built will be a1 * u1 + a2 * u2
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,71, @param a1 first scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,72, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,73, @param a2 second scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,74, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,76,"ublic Point3D(final double a1, final Vector3D u1, final double a2, final Vector3D u2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,77,"uper(a1, u1, a2, u2);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,80,** Linear constructor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,81, Build a vector from three other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,82, The vector built will be a1 * u1 + a2 * u2 + a3 * u3
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,83, @param a1 first scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,84, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,85, @param a2 second scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,86, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,87, @param a3 third scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,88, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,90,"ublic Point3D(final double a1, final Vector3D u1, final double a2, final Vector3D u2,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,91,"inal double a3, final Vector3D u3) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,92,"uper(a1, u1, a2, u2, a3, u3);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,95,** Linear constructor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,96, Build a vector from four other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,97, The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,98, @param a1 first scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,99, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,100, @param a2 second scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,101, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,102, @param a3 third scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,103, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,104, @param a4 fourth scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,105, @param u4 fourth base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,107,"ublic Point3D(final double a1, final Vector3D u1, final double a2, final Vector3D u2,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,108,"inal double a3, final Vector3D u3, final double a4, final Vector3D u4) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Point3D.java,109,"uper(a1, u1, a2, u2, a3, u3, a4, u4);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,21,import java.text.NumberFormat;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,24,mport org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,25,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,26,import org.apache.commons.math.geometry.Space;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,28,import org.apache.commons.math.util.MathUtils;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,30, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,33,* @version $Id$
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,33,ublic class Vector3D implements Serializable {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,34,"** Null vector (coordinates: 0, 0, 0). */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,35,"ublic static final Vector3D ZERO   = new Vector3D(0, 0, 0);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,37,"** First canonical vector (coordinates: 1, 0, 0). */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,38,"ublic static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,40,"** Opposite of the first canonical vector (coordinates: -1, 0, 0). */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,41,"ublic static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,43,"** Second canonical vector (coordinates: 0, 1, 0). */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,44,"ublic static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,46,"** Opposite of the second canonical vector (coordinates: 0, -1, 0). */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,47,"ublic static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,49,"** Third canonical vector (coordinates: 0, 0, 1). */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,50,"ublic static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,52,"** Opposite of the third canonical vector (coordinates: 0, 0, -1).  */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,53,"ublic static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,55,/ CHECKSTYLE: stop ConstantName
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,56,** A vector with all coordinates set to NaN. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,57,"ublic static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,58,/ CHECKSTYLE: resume ConstantName
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,60,** A vector with all coordinates set to positive infinity. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,61,ublic static final Vector3D POSITIVE_INFINITY =
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,62,"ew Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,64,** A vector with all coordinates set to negative infinity. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,65,ublic static final Vector3D NEGATIVE_INFINITY =
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,66,"ew Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,68,** Default format. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,69,rivate static final Vector3DFormat DEFAULT_FORMAT =
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,70,ector3DFormat.getInstance();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,72,** Serializable version identifier. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,73,rivate static final long serialVersionUID = 5133268763396045979L;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,75,** Abscissa. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,76,rivate final double x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,78,** Ordinate. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,79,rivate final double y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,81,** Height. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,82,rivate final double z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,84,** Simple constructor.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,85, Build a vector from its coordinates
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,86, @param x abscissa
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,87, @param y ordinate
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,88, @param z height
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,89, @see #getX()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,90, @see #getY()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,91, @see #getZ()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,93,"ublic Vector3D(double x, double y, double z) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,94,his.x = x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,95,his.y = y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,96,his.z = z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,99,** Simple constructor.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,100, Build a vector from its azimuthal coordinates
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,101, @param alpha azimuth (&alpha;) around Z
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,102,"              (0 is +X, &pi;/2 is +Y, &pi; is -X and 3&pi;/2 is -Y)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,103," @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,104, @see #getAlpha()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,105, @see #getDelta()
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,107,"ublic Vector3D(double alpha, double delta) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,108,ouble cosDelta = FastMath.cos(delta);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,109,his.x = FastMath.cos(alpha) * cosDelta;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,110,his.y = FastMath.sin(alpha) * cosDelta;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,111,his.z = FastMath.sin(delta);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,114,** Multiplicative constructor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,115, Build a vector from another one and a scale factor.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,116, The vector built will be a * u
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,117, @param a scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,118, @param u base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,120,"ublic Vector3D(double a, Vector3D u) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,121,his.x = a * u.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,122,his.y = a * u.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,123,his.z = a * u.z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,126,** Linear constructor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,127, Build a vector from two other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,128, The vector built will be a1 * u1 + a2 * u2
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,129, @param a1 first scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,130, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,131, @param a2 second scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,132, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,134,"ublic Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,135,his.x = a1 * u1.x + a2 * u2.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,136,his.y = a1 * u1.y + a2 * u2.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,137,his.z = a1 * u1.z + a2 * u2.z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,140,** Linear constructor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,141, Build a vector from three other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,142, The vector built will be a1 * u1 + a2 * u2 + a3 * u3
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,143, @param a1 first scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,144, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,145, @param a2 second scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,146, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,147, @param a3 third scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,148, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,150,"ublic Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,151,"ouble a3, Vector3D u3) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,152,his.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,153,his.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,154,his.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,157,** Linear constructor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,158, Build a vector from four other ones and corresponding scale factors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,159, The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,160, @param a1 first scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,161, @param u1 first base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,162, @param a2 second scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,163, @param u2 second base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,164, @param a3 third scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,165, @param u3 third base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,166, @param a4 fourth scale factor
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,167, @param u4 fourth base (unscaled) vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,169,"ublic Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,170,"ouble a3, Vector3D u3, double a4, Vector3D u4) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,171,his.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,172,his.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,173,his.z = a1 * u1.z + a2 * u2.z + a3 * u3.z + a4 * u4.z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,176,** Get the abscissa of the vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,177, @return abscissa of the vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,178," @see #Vector3D(double, double, double)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,180,ublic double getX() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,181,eturn x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,184,** Get the ordinate of the vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,185, @return ordinate of the vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,186," @see #Vector3D(double, double, double)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,188,ublic double getY() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,189,eturn y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,192,** Get the height of the vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,193, @return height of the vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,194," @see #Vector3D(double, double, double)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,196,ublic double getZ() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,197,eturn z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,200,** Get the L<sub>1</sub> norm for the vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,201, @return L<sub>1</sub> norm for the vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,203,ublic double getNorm1() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,204,eturn FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,207,** Get the L<sub>2</sub> norm for the vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,208, @return euclidean norm for the vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,210,ublic double getNorm() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,211,eturn FastMath.sqrt (x * x + y * y + z * z);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,214,** Get the square of the norm for the vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,215, @return square of the euclidean norm for the vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,217,ublic double getNormSq() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,218,eturn x * x + y * y + z * z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,221,** Get the L<sub>&infin;</sub> norm for the vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,222, @return L<sub>&infin;</sub> norm for the vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,224,ublic double getNormInf() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,225,"eturn FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,228,** Get the azimuth of the vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,229," @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,230," @see #Vector3D(double, double)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,232,ublic double getAlpha() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,233,"eturn FastMath.atan2(y, x);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,236,** Get the elevation of the vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,237," @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,238," @see #Vector3D(double, double)"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,240,ublic double getDelta() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,241,eturn FastMath.asin(z / getNorm());
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,244,** Add a vector to the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,245, @param v vector to add
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,246, @return a new vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,248,ublic Vector3D add(Vector3D v) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,249,"eturn new Vector3D(x + v.x, y + v.y, z + v.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,252,** Add a scaled vector to the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,253, @param factor scale factor to apply to v before adding it
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,254, @param v vector to add
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,255, @return a new vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,257,"ublic Vector3D add(double factor, Vector3D v) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,258,"eturn new Vector3D(x + factor * v.x, y + factor * v.y, z + factor * v.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,261,** Subtract a vector from the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,262, @param v vector to subtract
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,263, @return a new vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,265,ublic Vector3D subtract(Vector3D v) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,266,"eturn new Vector3D(x - v.x, y - v.y, z - v.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,269,** Subtract a scaled vector from the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,270, @param factor scale factor to apply to v before subtracting it
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,271, @param v vector to subtract
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,272, @return a new vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,274,"ublic Vector3D subtract(double factor, Vector3D v) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,275,"eturn new Vector3D(x - factor * v.x, y - factor * v.y, z - factor * v.z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,278,** Get a normalized vector aligned with the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,279, @return a new normalized vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,280, @exception ArithmeticException if the norm is zero
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,282,ublic Vector3D normalize() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,283,ouble s = getNorm();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,284,f (s == 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,285,hrow new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,287,eturn scalarMultiply(1 / s);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,290,** Get a vector orthogonal to the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,291, <p>There are an infinite number of normalized vectors orthogonal
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,292, to the instance. This method picks up one of them almost
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,293, arbitrarily. It is useful when one needs to compute a reference
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,294, frame with one of the axes in a predefined direction. The
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,295, following example shows how to build a frame having the k axis
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,296, aligned with the known vector u :
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,297, <pre><code>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,298,   Vector3D k = u.normalize();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,299,   Vector3D i = k.orthogonal();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,300,"   Vector3D j = Vector3D.crossProduct(k, i);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,301, </code></pre></p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,302, @return a new normalized vector orthogonal to the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,303, @exception ArithmeticException if the norm of the instance is null
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,305,ublic Vector3D orthogonal() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,307,ouble threshold = 0.6 * getNorm();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,308,f (threshold == 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,309,hrow new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,312,f ((x >= -threshold) && (x <= threshold)) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,313,ouble inverse  = 1 / FastMath.sqrt(y * y + z * z);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,314,"eturn new Vector3D(0, inverse * z, -inverse * y);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,315, else if ((y >= -threshold) && (y <= threshold)) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,316,ouble inverse  = 1 / FastMath.sqrt(x * x + z * z);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,317,"eturn new Vector3D(-inverse * z, 0, inverse * x);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,319,ouble inverse  = 1 / FastMath.sqrt(x * x + y * y);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,320,"eturn new Vector3D(inverse * y, -inverse * x, 0);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,324,** Compute the angular separation between two vectors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,325, <p>This method computes the angular separation between two
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,326, vectors using the dot product for well separated vectors and the
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,327, cross product for almost aligned vectors. This allows to have a
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,328," good accuracy in all cases, even for vectors very close to each"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,329, other.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,330, @param v1 first vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,331, @param v2 second vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,332, @return angular separation between v1 and v2
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,333, @exception ArithmeticException if either vector has a null norm
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,335,"ublic static double angle(Vector3D v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,337,ouble normProduct = v1.getNorm() * v2.getNorm();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,338,f (normProduct == 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,339,hrow new MathArithmeticException(LocalizedFormats.ZERO_NORM);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,342,"ouble dot = dotProduct(v1, v2);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,343,ouble threshold = normProduct * 0.9999;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,344,f ((dot < -threshold) || (dot > threshold)) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,345,"/ the vectors are almost aligned, compute using the sine"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,346,"ector3D v3 = crossProduct(v1, v2);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,347,f (dot >= 0) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,348,eturn FastMath.asin(v3.getNorm() / normProduct);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,350,eturn FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,353,/ the vectors are sufficiently separated to use the cosine
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,354,eturn FastMath.acos(dot / normProduct);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,358,** Get the opposite of the instance.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,359, @return a new vector which is opposite to the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,361,ublic Vector3D negate() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,362,"eturn new Vector3D(-x, -y, -z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,365,** Multiply the instance by a scalar
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,366, @param a scalar
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,367, @return a new vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,369,ublic Vector3D scalarMultiply(double a) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,370,"eturn new Vector3D(a * x, a * y, a * z);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,374, Returns true if any coordinate of this vector is NaN; false otherwise
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,375, @return  true if any coordinate of this vector is NaN; false otherwise
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,377,ublic boolean isNaN() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,378,eturn Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,382, Returns true if any coordinate of this vector is infinite and none are NaN;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,383, false otherwise
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,384, @return  true if any coordinate of this vector is infinite and none are NaN;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,385, false otherwise
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,387,ublic boolean isInfinite() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,388,eturn !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,392, Test for the equality of two 3D vectors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,393, <p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,394," If all coordinates of two 3D vectors are exactly the same, and none are"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,395," <code>Double.NaN</code>, the two 3D vectors are considered to be equal."
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,396, </p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,397, <p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,398, <code>NaN</code> coordinates are considered to affect globally the vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,399," and be equals to each other - i.e, if either (or all) coordinates of the"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,400," 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,401, {@link #NaN}.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,402, </p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,404, @param other Object to test for equality to this
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,405," @return true if two 3D vector objects are equal, false if"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,406,"         object is null, not an instance of Vector3D, or"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,407,         not equal to this Vector3D instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,410,Override
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,411,ublic boolean equals(Object other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,413,f (this == other) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,414,eturn true;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,417,f (other instanceof Vector3D) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,418,inal Vector3D rhs = (Vector3D)other;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,419,f (rhs.isNaN()) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,420,eturn this.isNaN();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,423,eturn (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,425,eturn false;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,429, Get a hashCode for the 3D vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,430, <p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,431, All NaN values have the same hash code.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,433, @return a hash code value for this object
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,435,Override
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,436,ublic int hashCode() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,437,f (isNaN()) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,438,eturn 8;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,440,eturn 31 * (23 * MathUtils.hash(x) +  19 * MathUtils.hash(y) +  MathUtils.hash(z));
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,443,** Compute the dot-product of two vectors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,444, @param v1 first vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,445, @param v2 second vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,446, @return the dot product v1.v2
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,448,"ublic static double dotProduct(Vector3D v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,449,eturn v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,452,** Compute the cross-product of two vectors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,453, @param v1 first vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,454, @param v2 second vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,455, @return the cross product v1 ^ v2 as a new Vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,457,"ublic static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,459,inal double n1 = v1.getNormSq();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,460,inal double n2 = v2.getNormSq();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,461,f ((n1 * n2) < MathUtils.SAFE_MIN) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,462,eturn ZERO;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,465,"/ rescale both vectors without losing precision,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,466,/ to ensure their norm are the same order of magnitude
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,467,inal int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,468,"inal double x1    = FastMath.scalb(v1.x, -deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,469,"inal double y1    = FastMath.scalb(v1.y, -deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,470,"inal double z1    = FastMath.scalb(v1.z, -deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,471,"inal double x2    = FastMath.scalb(v2.x,  deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,472,"inal double y2    = FastMath.scalb(v2.y,  deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,473,"inal double z2    = FastMath.scalb(v2.z,  deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,475,"/ we reduce cancellation errors by preconditioning,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,476,/ we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,477,/ v3 without loss of precision. See Kahan lecture
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,478,"/ ""Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"""
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,479,/ available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,481,/ compute rho as an 8 bits approximation of v1.v2 / v2.v2
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,482,"inal double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,483,inal double rho   = FastMath.rint(256 * ratio) / 256;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,485,inal double x3 = x1 - rho * x2;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,486,inal double y3 = y1 - rho * y2;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,487,inal double z3 = z1 - rho * z2;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,489,/ compute cross product from v3 and v2 instead of v1 and v2
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,490,"eturn new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,494,** Compute the distance between two vectors according to the L<sub>1</sub> norm.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,495, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,496, <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,497, vector is built</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,498, @param v1 first vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,499, @param v2 second vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,500, @return the distance between v1 and v2 according to the L<sub>1</sub> norm
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,502,"ublic static double distance1(Vector3D v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,503,inal double dx = FastMath.abs(v2.x - v1.x);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,504,inal double dy = FastMath.abs(v2.y - v1.y);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,505,inal double dz = FastMath.abs(v2.z - v1.z);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,506,eturn dx + dy + dz;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,509,** Compute the distance between two vectors according to the L<sub>2</sub> norm.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,510, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,511, <code>v1.subtract(v2).getNorm()</code> except that no intermediate
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,512, vector is built</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,513, @param v1 first vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,514, @param v2 second vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,515, @return the distance between v1 and v2 according to the L<sub>2</sub> norm
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,517,"ublic static double distance(Vector3D v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,518,inal double dx = v2.x - v1.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,519,inal double dy = v2.y - v1.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,520,inal double dz = v2.z - v1.z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,521,eturn FastMath.sqrt(dx * dx + dy * dy + dz * dz);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,524,** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,525, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,526, <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,527, vector is built</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,528, @param v1 first vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,529, @param v2 second vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,530, @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,532,"ublic static double distanceInf(Vector3D v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,533,inal double dx = FastMath.abs(v2.x - v1.x);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,534,inal double dy = FastMath.abs(v2.y - v1.y);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,535,inal double dz = FastMath.abs(v2.z - v1.z);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,536,"eturn FastMath.max(FastMath.max(dx, dy), dz);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,539,** Compute the square of the distance between two vectors.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,540, <p>Calling this method is equivalent to calling:
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,541, <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,542, vector is built</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,543, @param v1 first vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,544, @param v2 second vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,545, @return the square of the distance between v1 and v2
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,547,"ublic static double distanceSq(Vector3D v1, Vector3D v2) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,548,inal double dx = v2.x - v1.x;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,549,inal double dy = v2.y - v1.y;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,550,inal double dz = v2.z - v1.z;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,551,eturn dx * dx + dy * dy + dz * dz;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,554,** Get a string representation of this vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,555, @return a string representation of this vector
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,557,Override
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,558,ublic String toString() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,559,eturn DEFAULT_FORMAT.format(this);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,36,"public class Vector3D implements Serializable, Vector<Euclidean3D> {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,38,/** Serializable version id. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,39,private static final long serialVersionUID = 1313493323784566947L;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,41,"/** Null vector (coordinates: 0, 0, 0). */"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,42,"public static final Vector3D ZERO   = new Vector3D(0, 0, 0);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,44,"/** First canonical vector (coordinates: 1, 0, 0). */"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,45,"public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,47,"/** Opposite of the first canonical vector (coordinates: -1, 0, 0). */"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,48,"public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,50,"/** Second canonical vector (coordinates: 0, 1, 0). */"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,51,"public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,53,"/** Opposite of the second canonical vector (coordinates: 0, -1, 0). */"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,54,"public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,56,"/** Third canonical vector (coordinates: 0, 0, 1). */"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,57,"public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,59,"/** Opposite of the third canonical vector (coordinates: 0, 0, -1).  */"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,60,"public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,62,// CHECKSTYLE: stop ConstantName
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,63,/** A vector with all coordinates set to NaN. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,64,"public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,65,// CHECKSTYLE: resume ConstantName
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,67,/** A vector with all coordinates set to positive infinity. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,68,public static final Vector3D POSITIVE_INFINITY =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,69,"new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,71,/** A vector with all coordinates set to negative infinity. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,72,public static final Vector3D NEGATIVE_INFINITY =
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,73,"new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,75,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,77,/** Abscissa. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,78,private final double x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,80,/** Ordinate. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,81,private final double y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,83,/** Height. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,84,private final double z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,86,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,87,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,88,* @param x abscissa
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,89,* @param y ordinate
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,90,* @param z height
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,91,* @see #getX()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,92,* @see #getY()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,93,* @see #getZ()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,95,"public Vector3D(double x, double y, double z) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,96,this.x = x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,97,this.y = y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,98,this.z = z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,101,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,102,* Build a vector from its azimuthal coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,103,* @param alpha azimuth (&alpha;) around Z
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,104,"*              (0 is +X, &pi;/2 is +Y, &pi; is -X and 3&pi;/2 is -Y)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,105,"* @param delta elevation (&delta;) above (XY) plane, from -&pi;/2 to +&pi;/2"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,106,* @see #getAlpha()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,107,* @see #getDelta()
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,109,"public Vector3D(double alpha, double delta) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,110,double cosDelta = FastMath.cos(delta);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,111,this.x = FastMath.cos(alpha) * cosDelta;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,112,this.y = FastMath.sin(alpha) * cosDelta;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,113,this.z = FastMath.sin(delta);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,116,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,117,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,118,* The vector built will be a * u
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,119,* @param a scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,120,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,122,"public Vector3D(double a, Vector3D u) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,123,this.x = a * u.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,124,this.y = a * u.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,125,this.z = a * u.z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,128,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,129,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,130,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,131,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,132,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,133,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,134,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,136,"public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,137,this.x = a1 * u1.x + a2 * u2.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,138,this.y = a1 * u1.y + a2 * u2.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,139,this.z = a1 * u1.z + a2 * u2.z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,142,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,143,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,144,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,145,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,146,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,147,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,148,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,149,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,150,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,152,"public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,153,"double a3, Vector3D u3) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,154,this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,155,this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,156,this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,159,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,160,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,161,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,162,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,163,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,164,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,165,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,166,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,167,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,168,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,169,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,171,"public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,172,"double a3, Vector3D u3, double a4, Vector3D u4) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,173,this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,174,this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,175,this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z + a4 * u4.z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,178,/** Get the abscissa of the vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,179,* @return abscissa of the vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,180,"* @see #Vector3D(double, double, double)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,182,public double getX() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,183,return x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,186,/** Get the ordinate of the vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,187,* @return ordinate of the vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,188,"* @see #Vector3D(double, double, double)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,190,public double getY() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,191,return y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,194,/** Get the height of the vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,195,* @return height of the vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,196,"* @see #Vector3D(double, double, double)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,198,public double getZ() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,199,return z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,202,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,203,public Space getSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,204,return Euclidean3D.getInstance();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,207,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,208,public Vector3D getZero() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,209,return ZERO;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,212,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,213,public double getNorm1() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,214,return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,217,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,218,public double getNorm() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,219,return FastMath.sqrt (x * x + y * y + z * z);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,222,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,223,public double getNormSq() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,224,return x * x + y * y + z * z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,227,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,228,public double getNormInf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,229,"return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,232,/** Get the azimuth of the vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,233,"* @return azimuth (&alpha;) of the vector, between -&pi; and +&pi;"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,234,"* @see #Vector3D(double, double)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,236,public double getAlpha() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,237,"return FastMath.atan2(y, x);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,240,/** Get the elevation of the vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,241,"* @return elevation (&delta;) of the vector, between -&pi;/2 and +&pi;/2"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,242,"* @see #Vector3D(double, double)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,244,public double getDelta() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,245,return FastMath.asin(z / getNorm());
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,248,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,249,public Vector3D add(final Vector<Euclidean3D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,250,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,251,"return new Vector3D(x + v3.x, y + v3.y, z + v3.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,254,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,255,"public Vector3D add(double factor, final Vector<Euclidean3D> v) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,256,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,257,"return new Vector3D(x + factor * v3.x, y + factor * v3.y, z + factor * v3.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,260,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,261,public Vector3D subtract(final Vector<Euclidean3D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,262,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,263,"return new Vector3D(x - v3.x, y - v3.y, z - v3.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,266,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,267,"public Vector3D subtract(final double factor, final Vector<Euclidean3D> v) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,268,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,269,"return new Vector3D(x - factor * v3.x, y - factor * v3.y, z - factor * v3.z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,272,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,273,public Vector3D normalize() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,274,double s = getNorm();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,275,if (s == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,276,throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,278,return scalarMultiply(1 / s);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,281,/** Get a vector orthogonal to the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,282,* <p>There are an infinite number of normalized vectors orthogonal
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,283,* to the instance. This method picks up one of them almost
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,284,* arbitrarily. It is useful when one needs to compute a reference
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,285,* frame with one of the axes in a predefined direction. The
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,286,* following example shows how to build a frame having the k axis
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,287,* aligned with the known vector u :
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,288,* <pre><code>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,289,*   Vector3D k = u.normalize();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,290,*   Vector3D i = k.orthogonal();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,291,"*   Vector3D j = Vector3D.crossProduct(k, i);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,292,* </code></pre></p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,293,* @return a new normalized vector orthogonal to the instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,294,* @exception MathArithmeticException if the norm of the instance is null
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,296,public Vector3D orthogonal() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,298,double threshold = 0.6 * getNorm();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,299,if (threshold == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,300,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,303,if ((x >= -threshold) && (x <= threshold)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,304,double inverse  = 1 / FastMath.sqrt(y * y + z * z);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,305,"return new Vector3D(0, inverse * z, -inverse * y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,306,} else if ((y >= -threshold) && (y <= threshold)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,307,double inverse  = 1 / FastMath.sqrt(x * x + z * z);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,308,"return new Vector3D(-inverse * z, 0, inverse * x);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,310,double inverse  = 1 / FastMath.sqrt(x * x + y * y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,311,"return new Vector3D(inverse * y, -inverse * x, 0);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,315,/** Compute the angular separation between two vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,316,* <p>This method computes the angular separation between two
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,317,* vectors using the dot product for well separated vectors and the
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,318,* cross product for almost aligned vectors. This allows to have a
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,319,"* good accuracy in all cases, even for vectors very close to each"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,320,* other.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,321,* @param v1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,322,* @param v2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,323,* @return angular separation between v1 and v2
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,324,* @exception MathArithmeticException if either vector has a null norm
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,326,"public static double angle(Vector3D v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,328,double normProduct = v1.getNorm() * v2.getNorm();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,329,if (normProduct == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,330,throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,333,"double dot = dotProduct(v1, v2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,334,double threshold = normProduct * 0.9999;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,335,if ((dot < -threshold) || (dot > threshold)) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,336,"// the vectors are almost aligned, compute using the sine"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,337,"Vector3D v3 = crossProduct(v1, v2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,338,if (dot >= 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,339,return FastMath.asin(v3.getNorm() / normProduct);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,341,return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,344,// the vectors are sufficiently separated to use the cosine
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,345,return FastMath.acos(dot / normProduct);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,349,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,350,public Vector3D negate() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,351,"return new Vector3D(-x, -y, -z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,354,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,355,public Vector3D scalarMultiply(double a) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,356,"return new Vector3D(a * x, a * y, a * z);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,359,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,360,public boolean isNaN() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,361,return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,364,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,365,public boolean isInfinite() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,366,return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,370,* Test for the equality of two 3D vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,371,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,372,"* If all coordinates of two 3D vectors are exactly the same, and none are"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,373,"* <code>Double.NaN</code>, the two 3D vectors are considered to be equal."
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,374,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,375,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,376,* <code>NaN</code> coordinates are considered to affect globally the vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,377,"* and be equals to each other - i.e, if either (or all) coordinates of the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,378,"* 3D vector are equal to <code>Double.NaN</code>, the 3D vector is equal to"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,379,* {@link #NaN}.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,380,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,382,* @param other Object to test for equality to this
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,383,"* @return true if two 3D vector objects are equal, false if"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,384,"*         object is null, not an instance of Vector3D, or"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,385,*         not equal to this Vector3D instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,388,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,389,public boolean equals(Object other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,391,if (this == other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,392,return true;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,395,if (other instanceof Vector3D) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,396,final Vector3D rhs = (Vector3D)other;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,397,if (rhs.isNaN()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,398,return this.isNaN();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,401,return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,403,return false;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,407,* Get a hashCode for the 3D vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,408,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,409,* All NaN values have the same hash code.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,411,* @return a hash code value for this object
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,413,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,414,public int hashCode() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,415,if (isNaN()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,416,return 642;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,418,return 643 * (164 * MathUtils.hash(x) +  3 * MathUtils.hash(y) +  MathUtils.hash(z));
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,421,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,422,public double dotProduct(final Vector<Euclidean3D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,423,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,424,return x * v3.x + y * v3.y + z * v3.z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,427,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,428,public Vector3D crossProduct(final Vector<Euclidean3D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,429,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,431,final double n1 = getNormSq();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,432,final double n2 = v.getNormSq();
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,433,if ((n1 * n2) < MathUtils.SAFE_MIN) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,434,return ZERO;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,437,"// rescale both vectors without losing precision,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,438,// to ensure their norm are the same order of magnitude
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,439,final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,440,"final double x1    = FastMath.scalb(x,   -deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,441,"final double y1    = FastMath.scalb(y,   -deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,442,"final double z1    = FastMath.scalb(z,   -deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,443,"final double x2    = FastMath.scalb(v3.x, deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,444,"final double y2    = FastMath.scalb(v3.y, deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,445,"final double z2    = FastMath.scalb(v3.z, deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,447,"// we reduce cancellation errors by preconditioning,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,448,// we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,449,// v3 without loss of precision. See Kahan lecture
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,450,"// ""Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces"""
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,451,// available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,453,// compute rho as an 8 bits approximation of v1.v2 / v2.v2
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,454,"final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,455,final double rho   = FastMath.rint(256 * ratio) / 256;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,457,final double x3 = x1 - rho * x2;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,458,final double y3 = y1 - rho * y2;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,459,final double z3 = z1 - rho * z2;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,461,// compute cross product from v3 and v2 instead of v1 and v2
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,462,"return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,466,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,467,public double distance1(Vector<Euclidean3D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,468,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,469,final double dx = FastMath.abs(v3.x - x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,470,final double dy = FastMath.abs(v3.y - y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,471,final double dz = FastMath.abs(v3.z - z);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,472,return dx + dy + dz;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,475,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,476,public double distance(Vector<Euclidean3D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,477,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,478,final double dx = v3.x - x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,479,final double dy = v3.y - y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,480,final double dz = v3.z - z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,481,return FastMath.sqrt(dx * dx + dy * dy + dz * dz);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,484,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,485,public double distanceInf(Vector<Euclidean3D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,486,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,487,final double dx = FastMath.abs(v3.x - x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,488,final double dy = FastMath.abs(v3.y - y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,489,final double dz = FastMath.abs(v3.z - z);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,490,"return FastMath.max(FastMath.max(dx, dy), dz);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,493,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,494,public double distanceSq(Vector<Euclidean3D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,495,final Vector3D v3 = (Vector3D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,496,final double dx = v3.x - x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,497,final double dy = v3.y - y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,498,final double dz = v3.z - z;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,499,return dx * dx + dy * dy + dz * dz;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,502,/** Compute the dot-product of two vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,503,* @param v1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,504,* @param v2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,505,* @return the dot product v1.v2
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,507,"public static double dotProduct(Vector3D v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,508,return v1.dotProduct(v2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,511,/** Compute the cross-product of two vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,512,* @param v1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,513,* @param v2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,514,* @return the cross product v1 ^ v2 as a new Vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,516,"public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,517,return v1.crossProduct(v2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,520,/** Compute the distance between two vectors according to the L<sub>1</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,521,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,522,* <code>v1.subtract(v2).getNorm1()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,523,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,524,* @param v1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,525,* @param v2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,526,* @return the distance between v1 and v2 according to the L<sub>1</sub> norm
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,528,"public static double distance1(Vector3D v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,529,return v1.distance1(v2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,532,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,533,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,534,* <code>v1.subtract(v2).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,535,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,536,* @param v1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,537,* @param v2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,538,* @return the distance between v1 and v2 according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,540,"public static double distance(Vector3D v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,541,return v1.distance(v2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,544,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,545,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,546,* <code>v1.subtract(v2).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,547,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,548,* @param v1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,549,* @param v2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,550,* @return the distance between v1 and v2 according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,552,"public static double distanceInf(Vector3D v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,553,return v1.distanceInf(v2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,556,/** Compute the square of the distance between two vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,557,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,558,* <code>v1.subtract(v2).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,559,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,560,* @param v1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,561,* @param v2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,562,* @return the square of the distance between v1 and v2
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,564,"public static double distanceSq(Vector3D v1, Vector3D v2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,565,return v1.distanceSq(v2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,568,/** Get a string representation of this vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,569,* @return a string representation of this vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,571,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,572,public String toString() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,573,return Vector3DFormat.getInstance().format(this);
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,576,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,577,public String toString(final NumberFormat format) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3D.java,578,return new Vector3DFormat(format).format(this);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,25,mport org.apache.commons.math.util.CompositeFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,26,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,27,import org.apache.commons.math.geometry.VectorFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,28,import org.apache.commons.math.util.CompositeFormat;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,39, @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,41,* @version $Id:$
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,41,ublic class Vector3DFormat {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,42,** Serializable version identifier */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,43,rivate static final long serialVersionUID = -5447606608652576301L;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,44,"** The default prefix: ""{"". */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,45,"rivate static final String DEFAULT_PREFIX = ""{"";"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,46,"** The default suffix: ""}"". */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,47,"rivate static final String DEFAULT_SUFFIX = ""}"";"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,48,"** The default separator: "", "". */"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,49,"rivate static final String DEFAULT_SEPARATOR = ""; "";"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,50,** Prefix. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,51,rivate final String prefix;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,52,** Suffix. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,53,rivate final String suffix;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,54,** Separator. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,55,rivate final String separator;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,56,** Trimmed prefix. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,57,rivate final String trimmedPrefix;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,58,** Trimmed suffix. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,59,rivate final String trimmedSuffix;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,60,** Trimmed separator. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,61,rivate final String trimmedSeparator;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,62,** The format used for components. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,63,rivate final NumberFormat format;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,43,public class Vector3DFormat extends VectorFormat<Euclidean3D> {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,71,"his(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,72,ompositeFormat.getDefaultNumberFormat());
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,51,"super(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,52,CompositeFormat.getDefaultNumberFormat());
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,80,"his(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,60,"super(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,90,inal String separator) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,91,"his(prefix, suffix, separator, CompositeFormat.getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,70,final String separator) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,71,"super(prefix, suffix, separator, CompositeFormat.getDefaultNumberFormat());"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,103,"inal String separator, final NumberFormat format) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,104,his.prefix      = prefix;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,105,his.suffix      = suffix;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,106,his.separator   = separator;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,107,rimmedPrefix    = prefix.trim();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,108,rimmedSuffix    = suffix.trim();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,109,rimmedSeparator = separator.trim();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,110,his.format      = format;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,114, Get the set of locales for which 3D vectors formats are available.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,115, <p>This is the same set as the {@link NumberFormat} set.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,116, @return available 3D vector format locales.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,118,ublic static Locale[] getAvailableLocales() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,119,eturn NumberFormat.getAvailableLocales();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,123, Get the format prefix.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,124, @return format prefix.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,126,ublic String getPrefix() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,127,eturn prefix;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,131, Get the format suffix.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,132, @return format suffix.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,134,ublic String getSuffix() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,135,eturn suffix;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,139, Get the format separator between components.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,140, @return format separator.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,142,ublic String getSeparator() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,143,eturn separator;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,147, Get the components format.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,148, @return components format.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,150,ublic NumberFormat getFormat() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,151,eturn format;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,83,"final String separator, final NumberFormat format) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,84,"super(prefix, suffix, separator, format);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,172," This method calls {@link #format(Vector3D,StringBuffer,FieldPosition)}."
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,174, @param v Vector3D object to format.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,175, @return a formatted vector.
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,177,ublic String format(Vector3D v) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,178,"eturn format(v, new StringBuffer(), new FieldPosition(0)).toString();"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,189,"ublic StringBuffer format(Vector3D vector, StringBuffer toAppendTo,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,190,ieldPosition pos) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,192,os.setBeginIndex(0);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,193,os.setEndIndex(0);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,195,/ format prefix
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,196,oAppendTo.append(prefix);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,198,/ format components
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,199,"ompositeFormat.formatDouble(vector.getX(), format, toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,200,oAppendTo.append(separator);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,201,"ompositeFormat.formatDouble(vector.getY(), format, toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,202,oAppendTo.append(separator);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,203,"ompositeFormat.formatDouble(vector.getZ(), format, toAppendTo, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,205,/ format suffix
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,206,oAppendTo.append(suffix);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,208,eturn toAppendTo;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,112,"public StringBuffer format(final Vector<Euclidean3D> vector, final StringBuffer toAppendTo,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,113,final FieldPosition pos) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,114,final Vector3D v3 = (Vector3D) vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,115,"return format(toAppendTo, pos, v3.getX(), v3.getY(), v3.getZ());"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,218,ublic Vector3D parse(String source) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,125,public Vector3D parse(final String source) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,235,"ublic Vector3D parse(String source, ParsePosition pos) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,236,nt initialIndex = pos.getIndex();
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,238,/ parse prefix
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,239,"ompositeFormat.parseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,240,"f (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,241,eturn null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,244,/ parse X component
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,245,"ompositeFormat.parseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,246,"umber x = CompositeFormat.parseNumber(source, format, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,247,f (x == null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,248,/ invalid abscissa
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,249,"/ set index back to initial, error index should already be set"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,250,os.setIndex(initialIndex);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,251,eturn null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,254,/ parse Y component
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,255,"ompositeFormat.parseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,256,"f (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,142,"public Vector3D parse(final String source, final ParsePosition pos) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,143,"final double[] coordinates = parseCoordinates(3, source, pos);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,144,if (coordinates == null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,259,"ompositeFormat.parseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,260,"umber y = CompositeFormat.parseNumber(source, format, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,261,f (y == null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,262,/ invalid ordinate
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,263,"/ set index back to initial, error index should already be set"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,264,os.setIndex(initialIndex);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,265,eturn null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,268,/ parse Z component
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,269,"ompositeFormat.parseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,270,"f (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,271,eturn null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,273,"ompositeFormat.parseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,274,"umber z = CompositeFormat.parseNumber(source, format, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,275,f (z == null) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,276,/ invalid height
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,277,"/ set index back to initial, error index should already be set"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,278,os.setIndex(initialIndex);
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,279,eturn null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,282,/ parse suffix
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,283,"ompositeFormat.parseAndIgnoreWhitespace(source, pos);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,284,"f (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,285,eturn null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,288,"eturn new Vector3D(x.doubleValue(), y.doubleValue(), z.doubleValue());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/threed/Vector3DFormat.java,147,"return new Vector3D(coordinates[0], coordinates[1], coordinates[2]);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,18,package org.apache.commons.math.geometry.euclidean.twod;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,20,import java.io.Serializable;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,22,import org.apache.commons.math.geometry.Space;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,23,import org.apache.commons.math.geometry.euclidean.oned.Euclidean1D;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,26,* This class implements a three-dimensional space.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,27,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,28,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,30,"public class Euclidean2D implements Serializable, Space {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,32,/** Serializable version identifier. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,33,private static final long serialVersionUID = 4793432849757649566L;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,35,/** Private constructor for the singleton.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,37,private Euclidean2D() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,40,/** Get the unique instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,41,* @return the unique instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,43,public static Euclidean2D getInstance() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,44,return LazyHolder.INSTANCE;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,47,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,48,public int getDimension() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,49,return 2;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,52,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,53,public Euclidean1D getSubSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,54,return Euclidean1D.getInstance();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,57,// CHECKSTYLE: stop HideUtilityClassConstructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,58,/** Holder for the instance.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,59,* <p>We use here the Initialization On Demand Holder Idiom.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,61,private static class LazyHolder {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,62,/** Cached field instance. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,63,private static final Euclidean2D INSTANCE = new Euclidean2D();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,65,// CHECKSTYLE: resume HideUtilityClassConstructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,67,/** Handle deserialization of the singleton.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,68,* @return the singleton instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,70,private Object readResolve() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,71,// return the singleton instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Euclidean2D.java,72,return LazyHolder.INSTANCE;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,2, Licensed to the Apache Software Foundation (ASF) under one or more
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,3, contributor license agreements.  See the NOTICE file distributed with
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,4, this work for additional information regarding copyright ownership.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,5," The ASF licenses this file to You under the Apache License, Version 2.0"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,6," (the ""License""); you may not use this file except in compliance with"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,7, the License.  You may obtain a copy of the License at
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,9,      http://www.apache.org/licenses/LICENSE-2.0
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,11," Unless required by applicable law or agreed to in writing, software"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,12," distributed under the License is distributed on an ""AS IS"" BASIS,"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,13," WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,14, See the License for the specific language governing permissions and
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,15, limitations under the License.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,17,ackage org.apache.commons.math.geometry.euclidean.twod;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,19,mport org.apache.commons.math.geometry.partitioning.Point;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,20,mport org.apache.commons.math.geometry.partitioning.SubSpace;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,22,** This class represents a 2D point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,23, <p>Instances of this class are guaranteed to be immutable.</p>
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,24, @version $Revision$ $Date$
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,26,"ublic class Point2D extends java.awt.geom.Point2D.Double implements Point, SubSpace {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,28,** Point at undefined (NaN) coordinates. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,29,"ublic static final Point2D UNDEFINED = new Point2D(java.lang.Double.NaN, java.lang.Double.NaN);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,31,** Serializable UID. */
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,32,rivate static final long serialVersionUID = 8883702098988517151L;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,34,** Build a point with default coordinates.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,36,ublic Point2D() {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,39,** Build a point from its coordinates.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,40, @param x abscissa
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,41, @param y ordinate
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,43,"ublic Point2D(final double x, final double y) {"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,44,"uper(x, y);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,47,** Build a point from a java awt point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,48, @param point java awt point
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,50,ublic Point2D(final java.awt.geom.Point2D.Double point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,51,"uper(point.x, point.y);"
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,54,** Transform a 2D space point into a sub-space point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,55, @param point 2D point of the space
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,56, @return always return null
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,57, @see #toSpace
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,59,ublic Point toSubSpace(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,60,eturn null;
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,63,** Transform a sub-space point into a space point.
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,64, @param point ignored parameter
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,65, @return always return the instance
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,66, @see #toSubSpace
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,68,ublic Point toSpace(final Point point) {
False,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Point2D.java,69,eturn this;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,17,package org.apache.commons.math.geometry.euclidean.twod;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,19,import java.text.NumberFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,21,import org.apache.commons.math.geometry.Space;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,22,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,23,import org.apache.commons.math.util.FastMath;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,24,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,26,/** This class represents a 2D vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,27,* <p>Instances of this class are guaranteed to be immutable.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,28,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,29,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,31,public class Vector2D implements Vector<Euclidean2D> {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,33,"/** Origin (coordinates: 0, 0). */"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,34,"public static final Vector2D ZERO   = new Vector2D(0, 0);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,36,// CHECKSTYLE: stop ConstantName
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,37,/** A vector with all coordinates set to NaN. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,38,"public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,39,// CHECKSTYLE: resume ConstantName
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,41,/** A vector with all coordinates set to positive infinity. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,42,public static final Vector2D POSITIVE_INFINITY =
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,43,"new Vector2D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,45,/** A vector with all coordinates set to negative infinity. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,46,public static final Vector2D NEGATIVE_INFINITY =
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,47,"new Vector2D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,49,/** Serializable UID. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,50,private static final long serialVersionUID = 266938651998679754L;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,52,/** Abscissa. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,53,private final double x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,55,/** Ordinate. */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,56,private final double y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,58,/** Simple constructor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,59,* Build a vector from its coordinates
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,60,* @param x abscissa
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,61,* @param y ordinate
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,62,* @see #getX()
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,63,* @see #getY()
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,65,"public Vector2D(double x, double y) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,66,this.x = x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,67,this.y = y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,70,/** Multiplicative constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,71,* Build a vector from another one and a scale factor.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,72,* The vector built will be a * u
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,73,* @param a scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,74,* @param u base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,76,"public Vector2D(double a, Vector2D u) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,77,this.x = a * u.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,78,this.y = a * u.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,81,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,82,* Build a vector from two other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,83,* The vector built will be a1 * u1 + a2 * u2
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,84,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,85,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,86,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,87,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,89,"public Vector2D(double a1, Vector2D u1, double a2, Vector2D u2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,90,this.x = a1 * u1.x + a2 * u2.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,91,this.y = a1 * u1.y + a2 * u2.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,94,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,95,* Build a vector from three other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,96,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,97,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,98,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,99,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,100,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,101,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,102,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,104,"public Vector2D(double a1, Vector2D u1, double a2, Vector2D u2,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,105,"double a3, Vector2D u3) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,106,this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,107,this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,110,/** Linear constructor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,111,* Build a vector from four other ones and corresponding scale factors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,112,* The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,113,* @param a1 first scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,114,* @param u1 first base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,115,* @param a2 second scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,116,* @param u2 second base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,117,* @param a3 third scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,118,* @param u3 third base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,119,* @param a4 fourth scale factor
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,120,* @param u4 fourth base (unscaled) vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,122,"public Vector2D(double a1, Vector2D u1, double a2, Vector2D u2,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,123,"double a3, Vector2D u3, double a4, Vector2D u4) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,124,this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,125,this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,128,/** Get the abscissa of the vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,129,* @return abscissa of the vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,130,"* @see #Vector2D(double, double)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,132,public double getX() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,133,return x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,136,/** Get the ordinate of the vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,137,* @return ordinate of the vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,138,"* @see #Vector2D(double, double)"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,140,public double getY() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,141,return y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,144,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,145,public Space getSpace() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,146,return Euclidean2D.getInstance();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,149,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,150,public Vector2D getZero() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,151,return ZERO;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,154,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,155,public Vector2D toVector() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,156,"return new Vector2D(x, y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,159,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,160,public double getNorm1() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,161,return FastMath.abs(x) + FastMath.abs(y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,164,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,165,public double getNorm() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,166,return FastMath.sqrt (x * x + y * y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,169,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,170,public double getNormSq() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,171,return x * x + y * y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,174,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,175,public double getNormInf() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,176,"return FastMath.max(FastMath.abs(x), FastMath.abs(y));"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,179,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,180,public Vector2D add(Vector<Euclidean2D> v) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,181,Vector2D v2 = (Vector2D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,182,"return new Vector2D(x + v2.getX(), y + v2.getY());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,185,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,186,"public Vector2D add(double factor, Vector<Euclidean2D> v) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,187,Vector2D v2 = (Vector2D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,188,"return new Vector2D(x + factor * v2.getX(), y + factor * v2.getY());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,191,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,192,public Vector2D subtract(Vector<Euclidean2D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,193,Vector2D p3 = (Vector2D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,194,"return new Vector2D(x - p3.x, y - p3.y);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,197,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,198,"public Vector2D subtract(double factor, Vector<Euclidean2D> v) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,199,Vector2D v2 = (Vector2D) v;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,200,"return new Vector2D(x - factor * v2.getX(), y - factor * v2.getY());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,203,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,204,public boolean isNaN() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,205,return Double.isNaN(x) || Double.isNaN(y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,208,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,209,public boolean isInfinite() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,210,return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,213,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,214,public double distance1(Vector<Euclidean2D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,215,Vector2D p3 = (Vector2D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,216,final double dx = FastMath.abs(p3.x - x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,217,final double dy = FastMath.abs(p3.y - y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,218,return dx + dy;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,221,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,222,public double distance(Vector<Euclidean2D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,223,Vector2D p3 = (Vector2D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,224,final double dx = p3.x - x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,225,final double dy = p3.y - y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,226,return FastMath.sqrt(dx * dx + dy * dy);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,229,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,230,public double distanceInf(Vector<Euclidean2D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,231,Vector2D p3 = (Vector2D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,232,final double dx = FastMath.abs(p3.x - x);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,233,final double dy = FastMath.abs(p3.y - y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,234,"return FastMath.max(dx, dy);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,237,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,238,public double distanceSq(Vector<Euclidean2D> p) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,239,Vector2D p3 = (Vector2D) p;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,240,final double dx = p3.x - x;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,241,final double dy = p3.y - y;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,242,return dx * dx + dy * dy;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,245,/** Compute the distance between two vectors according to the L<sub>2</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,246,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,247,* <code>p1.subtract(p2).getNorm()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,248,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,249,* @param p1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,250,* @param p2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,251,* @return the distance between p1 and p2 according to the L<sub>2</sub> norm
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,253,"public static double distance(Vector2D p1, Vector2D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,254,return p1.distance(p2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,257,/** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,258,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,259,* <code>p1.subtract(p2).getNormInf()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,260,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,261,* @param p1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,262,* @param p2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,263,* @return the distance between p1 and p2 according to the L<sub>&infin;</sub> norm
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,265,"public static double distanceInf(Vector2D p1, Vector2D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,266,return p1.distanceInf(p2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,269,/** Compute the square of the distance between two vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,270,* <p>Calling this method is equivalent to calling:
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,271,* <code>p1.subtract(p2).getNormSq()</code> except that no intermediate
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,272,* vector is built</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,273,* @param p1 first vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,274,* @param p2 second vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,275,* @return the square of the distance between p1 and p2
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,277,"public static double distanceSq(Vector2D p1, Vector2D p2) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,278,return p1.distanceSq(p2);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,282,* Test for the equality of two 2D vectors.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,283,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,284,"* If all coordinates of two 2D vectors are exactly the same, and none are"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,285,"* <code>Double.NaN</code>, the two 2D vectors are considered to be equal."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,286,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,287,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,288,* <code>NaN</code> coordinates are considered to affect globally the vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,289,"* and be equals to each other - i.e, if either (or all) coordinates of the"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,290,"* 2D vector are equal to <code>Double.NaN</code>, the 2D vector is equal to"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,291,* {@link #NaN}.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,292,* </p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,294,* @param other Object to test for equality to this
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,295,"* @return true if two 2D vector objects are equal, false if"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,296,"*         object is null, not an instance of Vector2D, or"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,297,*         not equal to this Vector2D instance
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,300,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,301,public boolean equals(Object other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,303,if (this == other) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,304,return true;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,307,if (other instanceof Vector2D) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,308,final Vector2D rhs = (Vector2D)other;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,309,if (rhs.isNaN()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,310,return this.isNaN();
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,313,return (x == rhs.x) && (y == rhs.y);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,315,return false;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,319,* Get a hashCode for the 2D vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,320,* <p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,321,* All NaN values have the same hash code.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,323,* @return a hash code value for this object
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,325,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,326,public int hashCode() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,327,if (isNaN()) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,328,return 542;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,330,return 122 * (76 * MathUtils.hash(x) +  MathUtils.hash(y));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,333,/** Get a string representation of this vector.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,334,* @return a string representation of this vector
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,336,@Override
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,337,public String toString() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,338,return Vector2DFormat.getInstance().format(this);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,341,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,342,public String toString(final NumberFormat format) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2D.java,343,return new Vector2DFormat(format).format(this);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,18,package org.apache.commons.math.geometry.euclidean.twod;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,20,import java.text.FieldPosition;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,21,import java.text.NumberFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,22,import java.text.ParsePosition;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,23,import java.util.Locale;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,25,import org.apache.commons.math.exception.MathParseException;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,26,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,27,import org.apache.commons.math.geometry.VectorFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,28,import org.apache.commons.math.util.CompositeFormat;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,31,"* Formats a 2D vector in components list format ""{x; y}""."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,32,"* <p>The prefix and suffix ""{"" and ""}"" and the separator ""; "" can be replaced by"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,33,* any user-defined strings. The number format for components can be configured.</p>
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,34,"* <p>White space is ignored at parse time, even if it is in the prefix, suffix"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,35,* or separator specifications. So even if the default separator does include a space
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,36,"* character that is used at format time, both input string ""{1;1}"" and"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,37,"* "" { 1 ; 1 } "" will be parsed without error and the same vector will be"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,38,"* returned. In the second case, however, the parse position after parsing will be"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,39,"* just after the closing curly brace, i.e. just before the trailing space.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,41,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,42,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,44,public class Vector2DFormat extends VectorFormat<Euclidean2D> {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,47,* Create an instance with default settings.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,48,"* <p>The instance uses the default prefix, suffix and separator:"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,49,"* ""{"", ""}"", and ""; "" and the default number format for components.</p>"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,51,public Vector2DFormat() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,52,"super(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,53,CompositeFormat.getDefaultNumberFormat());
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,57,* Create an instance with a custom number format for components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,58,* @param format the custom format for components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,60,public Vector2DFormat(final NumberFormat format) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,61,"super(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,65,"* Create an instance with custom prefix, suffix and separator."
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,66,"* @param prefix prefix to use instead of the default ""{"""
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,67,"* @param suffix suffix to use instead of the default ""}"""
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,68,"* @param separator separator to use instead of the default ""; """
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,70,"public Vector2DFormat(final String prefix, final String suffix,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,71,final String separator) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,72,"super(prefix, suffix, separator, CompositeFormat.getDefaultNumberFormat());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,76,"* Create an instance with custom prefix, suffix, separator and format"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,77,* for components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,78,"* @param prefix prefix to use instead of the default ""{"""
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,79,"* @param suffix suffix to use instead of the default ""}"""
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,80,"* @param separator separator to use instead of the default ""; """
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,81,* @param format the custom format for components.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,83,"public Vector2DFormat(final String prefix, final String suffix,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,84,"final String separator, final NumberFormat format) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,85,"super(prefix, suffix, separator, format);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,89,* Returns the default 2D vector format for the current locale.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,90,* @return the default 2D vector format.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,92,public static Vector2DFormat getInstance() {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,93,return getInstance(Locale.getDefault());
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,97,* Returns the default 2D vector format for the given locale.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,98,* @param locale the specific locale used by the format.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,99,* @return the 2D vector format specific to the given locale.
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,101,public static Vector2DFormat getInstance(final Locale locale) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,102,return new Vector2DFormat(CompositeFormat.getDefaultNumberFormat(locale));
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,105,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,106,"public StringBuffer format(final Vector<Euclidean2D> vector, final StringBuffer toAppendTo,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,107,final FieldPosition pos) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,108,final Vector2D p2 = (Vector2D) vector;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,109,"return format(toAppendTo, pos, p2.getX(), p2.getY());"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,112,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,113,public Vector2D parse(final String source) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,114,ParsePosition parsePosition = new ParsePosition(0);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,115,"Vector2D result = parse(source, parsePosition);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,116,if (parsePosition.getIndex() == 0) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,117,"throw new MathParseException(source,"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,118,"parsePosition.getErrorIndex(),"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,119,Vector2D.class);
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,121,return result;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,124,/** {@inheritDoc} */
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,125,"public Vector2D parse(final String source, final ParsePosition pos) {"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,126,"final double[] coordinates = parseCoordinates(2, source, pos);"
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,127,if (coordinates == null) {
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,128,return null;
True,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,src/main/java/org/apache/commons/math/geometry/euclidean/twod/Vector2DFormat.java,130,"return new Vector2D(coordinates[0], coordinates[1]);"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,17,package org.apache.commons.math.geometry.partitioning;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,19,import org.apache.commons.math.geometry.Vector;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,20,import org.apache.commons.math.geometry.Space;
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,22,/** This interface defines mappers between a space and one of its sub-spaces.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,24,* <p>Sub-spaces are the lower dimensions subsets of a n-dimensions
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,25,* space. The (n-1)-dimension sub-spaces are specific sub-spaces known
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,26,* as {@link Hyperplane hyperplanes}. This interface can be used regardless
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,27,"* of the dimensions differences. As an example, {@link"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,28,* org.apache.commons.math.geometry.euclidean.threed.Line Line} in 3D
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,29,* implements Embedding<{@link
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,30,"* org.apache.commons.math.geometry.euclidean.threed.Vector3D Vector3D}, {link"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,31,"* org.apache.commons.math.geometry.euclidean.oned.Vector1D Vector1D>, i.e. it"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,32,* maps directly dimensions 3 and 1.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,34,"* <p>In the 3D euclidean space, hyperplanes are 2D planes, and the 1D"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,35,* sub-spaces are lines.</p>
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,37,* @param <S> Type of the embedding space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,38,* @param <T> Type of the embedded sub-space.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,40,* @see Hyperplane
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,41,* @version $Id:$
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,42,* @since 3.0
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,44,"public interface Embedding<S extends Space, T extends Space> {"
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,46,/** Transform a space point into a sub-space point.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,47,* @param point n-dimension point of the space
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,48,* @return (n-1)-dimension point of the sub-space corresponding to
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,49,* the specified space point
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,50,* @see #toSpace
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,52,Vector<T> toSubSpace(Vector<S> point);
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,54,/** Transform a sub-space point into a space point.
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,55,* @param point (n-1)-dimension point of the sub-space
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,56,* @return n-dimension point of the space corresponding to the
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,57,* specified sub-space point
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,58,* @see #toSubSpace
True,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,src/main/java/org/apache/commons/math/geometry/partitioning/Embedding.java,60,Vector<S> toSpace(Vector<T> point);

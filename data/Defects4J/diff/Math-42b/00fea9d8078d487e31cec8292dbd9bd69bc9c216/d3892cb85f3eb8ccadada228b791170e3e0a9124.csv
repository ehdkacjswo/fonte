is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,175,nt sum = 0;
True,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java,175,double sum = 0;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,23,import java.util.ArrayList;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,25,import java.util.Collection;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,172,"* A helper class for testSmallDistances(). This class is similar to EuclideanIntegerPoint, but"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,173,* it defines a different distanceFrom() method that tends to return distances less than 1.
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,175,private class CloseIntegerPoint implements Clusterable<CloseIntegerPoint> {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,176,public CloseIntegerPoint(EuclideanIntegerPoint point) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,177,euclideanPoint = point;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,180,public double distanceFrom(CloseIntegerPoint p) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,181,return euclideanPoint.distanceFrom(p.euclideanPoint) * 0.001;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,184,public CloseIntegerPoint centroidOf(Collection<CloseIntegerPoint> p) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,185,Collection<EuclideanIntegerPoint> euclideanPoints =
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,186,new ArrayList<EuclideanIntegerPoint>();
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,187,for (CloseIntegerPoint point : p) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,188,euclideanPoints.add(point.euclideanPoint);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,190,return new CloseIntegerPoint(euclideanPoint.centroidOf(euclideanPoints));
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,193,@Override
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,194,public boolean equals(Object o) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,195,if (!(o instanceof CloseIntegerPoint)) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,196,return false;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,198,CloseIntegerPoint p = (CloseIntegerPoint) o;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,200,return euclideanPoint.equals(p.euclideanPoint);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,203,@Override
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,204,public int hashCode() {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,205,return euclideanPoint.hashCode();
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,208,private EuclideanIntegerPoint euclideanPoint;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,212,* Test points that are very close together. See issue MATH-546.
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,214,@Test
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,215,public void testSmallDistances() {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,216,"// Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,217,// small distance.
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,218,int[] repeatedArray = { 0 };
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,219,int[] uniqueArray = { 1 };
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,220,CloseIntegerPoint repeatedPoint =
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,221,new CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,222,CloseIntegerPoint uniquePoint =
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,223,new CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,225,Collection<CloseIntegerPoint> points = new ArrayList<CloseIntegerPoint>();
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,226,final int NUM_REPEATED_POINTS = 10 * 1000;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,227,for (int i = 0; i < NUM_REPEATED_POINTS; ++i) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,228,points.add(repeatedPoint);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,230,points.add(uniquePoint);
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,232,"// Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,233,// cluster centers).
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,234,final long RANDOM_SEED = 0;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,235,final int NUM_CLUSTERS = 2;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,236,final int NUM_ITERATIONS = 0;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,237,KMeansPlusPlusClusterer<CloseIntegerPoint> clusterer =
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,238,new KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,239,List<Cluster<CloseIntegerPoint>> clusters =
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,240,"clusterer.cluster(points, NUM_CLUSTERS, NUM_ITERATIONS);"
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,242,// Check that one of the chosen centers is the unique point.
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,243,boolean uniquePointIsCenter = false;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,244,for (Cluster<CloseIntegerPoint> cluster : clusters) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,245,if (cluster.getCenter().equals(uniquePoint)) {
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,246,uniquePointIsCenter = true;
True,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,249,assertTrue(uniquePointIsCenter);

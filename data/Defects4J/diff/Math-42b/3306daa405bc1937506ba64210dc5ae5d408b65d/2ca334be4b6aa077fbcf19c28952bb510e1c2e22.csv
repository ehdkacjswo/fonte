is_addition,old_file_path,new_file_path,line_num,content
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,73,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,74,"l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(0, 1, 0))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,75,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,76,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,77,"l.distance(new Line(new Vector3D(0, -4, -4), new Vector3D(1, 0, 0))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,78,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,79,"Assert.assertEquals(FastMath.sqrt(8),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,80,"l.distance(new Line(new Vector3D(0, -4, 0), new Vector3D(1, 0, 0))),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,81,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,84,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,85,public void testClosest() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,86,"Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,87,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,88,"l.closestPoint(new Line(new Vector3D(1, 0, 1), Vector3D.PLUS_K)).distance(new Vector3D(0, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,89,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,90,"Assert.assertEquals(0.5,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,91,"l.closestPoint(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(0, -1, -1))).distance(new Vector3D(-0.5, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,92,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,93,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,94,"l.closestPoint(l).distance(new Vector3D(0, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,95,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,96,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,97,"l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -1, -1))).distance(new Vector3D(0, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,98,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,99,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,100,"l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(0, 1, 0))).distance(new Vector3D(0, -4, -4)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,101,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,102,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,103,"l.closestPoint(new Line(new Vector3D(0, -4, -4), new Vector3D(1, 0, 0))).distance(new Vector3D(0, -4, -4)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,104,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,105,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,106,"l.closestPoint(new Line(new Vector3D(0, -4, 0), new Vector3D(1, 0, 0))).distance(new Vector3D(0, -2, -2)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,107,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,110,@Test
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,111,public void testIntersection() {
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,112,"Line l = new Line(new Vector3D(0, 1, 1), new Vector3D(0, 1, 1));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,113,"Assert.assertNull(l.intersection(new Line(new Vector3D(1, 0, 1), Vector3D.PLUS_K)));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,114,"Assert.assertNull(l.intersection(new Line(new Vector3D(-0.5, 0, 0), new Vector3D(0, -1, -1))));"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,115,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,116,"l.intersection(l).distance(new Vector3D(0, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,117,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,118,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,119,"l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, -1, -1))).distance(new Vector3D(0, 0, 0)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,120,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,121,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,122,"l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(0, 1, 0))).distance(new Vector3D(0, -4, -4)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,123,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,124,"Assert.assertEquals(0.0,"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,125,"l.intersection(new Line(new Vector3D(0, -4, -4), new Vector3D(1, 0, 0))).distance(new Vector3D(0, -4, -4)),"
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,126,1.0e-10);
True,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,src/test/java/org/apache/commons/math/geometry/euclidean/threed/LineTest.java,127,"Assert.assertNull(l.intersection(new Line(new Vector3D(0, -4, 0), new Vector3D(1, 0, 0))));"

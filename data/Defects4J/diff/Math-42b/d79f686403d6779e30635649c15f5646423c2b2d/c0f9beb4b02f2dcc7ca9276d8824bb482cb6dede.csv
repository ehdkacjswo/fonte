is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,76, @version $Revision: 1.7 $ $Date: 2003/05/26 17:40:20 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,76,* @version $Revision: 1.8 $ $Date: 2003/05/29 19:49:18 $
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,136,* Returns the skewness of a given distribution.  Skewness is a
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,137,* measure of the assymetry of a given distribution. <p>
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,138,* Double.NaN is returned for an empty set of values and 0.0 is
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,139,* returned for a value set &lt;=2.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,141,* @return Value of property skewness.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,143,abstract double getSkewness();
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,146,* Returns the Kurtosis of the available values. Kurtosis is a
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,147,"* measure of the ""peakedness"" of a distribution <p>"
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,148,* Double.NaN is returned for an empty set of values and 0.0 is
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,149,* returned for a value set &lt;=3.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,151,* @return Value of property kurtosis.
True,src/java/org/apache/commons/math/Univariate.java,src/java/org/apache/commons/math/Univariate.java,153,abstract double getKurtosis();
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,70, @version $Revision: 1.8 $ $Date: 2003/05/26 17:40:20 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,70,* @version $Revision: 1.9 $ $Date: 2003/05/29 19:49:18 $
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,89,/** running sum of 3rd powers that have been added */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,90,private double sumCube = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,92,/** running sum of 4th powers that have been added */
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,93,private double sumQuad = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,173,* Returns the skewness of the values that have been added as described by
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,174,* <a href=http://mathworld.wolfram.com/k-Statistic.html>Equation (6) for k-Statistics</a>.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,176,* @return The skew of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,177,*         an empty set of values and 0.0 is returned for a &lt;= 2 value set.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,179,public double getSkewness() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,181,if( n < 1) return Double.NaN;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,182,if( n <= 2 ) return 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,184,"return ( 2*Math.pow(sum,3) - 3*sum*sumsq + ((double)n)*((double)n)*sumCube ) /"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,185,( ((double)n)*(((double)n)-1)*(((double)n)-2));
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,189,* Returns the kurtosis of the values that have been added as described by
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,190,* <a href=http://mathworld.wolfram.com/k-Statistic.html>Equation (7) for k-Statistics</a>.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,192,* @return The kurtosis of a set of values.  Double.NaN is returned for
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,193,*         an empty set of values and 0.0 is returned for a &lt;= 3 value set.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,195,public double getKurtosis() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,197,if( n < 1) return Double.NaN;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,198,if( n <= 3 ) return 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,200,"double x1 = -6*Math.pow(sum,4);"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,201,"double x2 = 12*((double)n)*Math.pow(sum,2)*sumsq;"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,202,"double x3 = -3*((double)n)*(((double)n)-1)*Math.pow(sumsq,2);"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,203,double x4 = -4*((double)n)*(((double)n)+1)*sum*sumCube;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,204,"double x5 = Math.pow(((double)n),2)*(((double)n)+1)*sumQuad;"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,205,return (x1 + x2 + x3 + x4 + x5) /
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,206,(((double)n)*(((double)n)-1)*(((double)n)-2)*(((double)n)-3));
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,229,"sumCube -= Math.pow(discarded,3);"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,230,"sumQuad -= Math.pow(discarded,4);"
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,195,um += v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,196,umsq += v*v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,206,roduct *= elements[i];
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,248,product *= elements[i];
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,215,um += v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,216,umsq += v*v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,226,um += v;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,227,umsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,269,sum += v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,270,sumsq += v*v;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,271,"sumCube += Math.pow(v,3);"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,272,"sumQuad += Math.pow(v,4);"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,318,/** Getter for property sumCube.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,319,* @return Value of property sumCube.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,321,public double getSumCube() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,322,return sumCube;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,325,/** Getter for property sumQuad.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,326,* @return Value of property sumQuad.
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,328,public double getSumQuad() {
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,329,return sumQuad;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,346,"outBuffer.append(""skewness: "" + getSkewness() + ""\n"");"
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,347,"outBuffer.append(""kurtosis: "" + getKurtosis() + ""\n"");"
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,294,his.sum = 0.0;
False,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,295,his.sumsq = 0.0;
True,src/java/org/apache/commons/math/UnivariateImpl.java,src/java/org/apache/commons/math/UnivariateImpl.java,353,this.sum = this.sumsq = this.sumCube = this.sumQuad = 0.0;
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,65, @version $Revision: 1.3 $ $Date: 2003/05/23 17:33:18 $
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,65,* @version $Revision: 1.4 $ $Date: 2003/05/29 19:49:18 $
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,120,"ssertTrue(""Standard Deviation of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,120,"assertTrue(""Standard Deviation of n = 0 set should be NaN"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,122,"ssertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,122,"assertTrue(""Variance of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,124,"assertTrue(""skew of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,125,Double.isNaN(u.getSkewness() ) );
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,126,"assertTrue(""kurtosis of n = 0 set should be NaN"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,127,Double.isNaN(u.getKurtosis() ) );
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,125,.addValue(one);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,130,/* n=1 */
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,131,u.addValue(one);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,132,"assertTrue(""mean should be one (n = 1)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,133,u.getMean() == one);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,134,"assertTrue(""geometric should be one (n = 1)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,135,u.getGeometricMean() == one);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,136,"assertTrue(""Std should be zero (n = 1)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,137,u.getStandardDeviation() == 0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,138,"assertTrue(""variance should be zero (n = 1)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,139,u.getVariance() == 0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,140,"assertTrue(""skew should be zero (n = 1)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,141,u.getSkewness() == 0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,142,"assertTrue(""kurtosis should be zero (n = 1)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,143,u.getKurtosis() == 0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,145,/* n=2 */
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,146,u.addValue(twoF);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,147,"assertTrue(""Std should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,148,u.getStandardDeviation() != 0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,149,"assertTrue(""variance should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,150,u.getVariance() != 0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,151,"assertTrue(""skew should not be zero (n = 2)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,152,u.getSkewness() == 0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,153,"assertTrue(""kurtosis should be zero (n = 2)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,154,u.getKurtosis() == 0.0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,127,"ssertTrue( ""Mean of n = 1 set should be value of single item n1"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,128,.getMean() == one);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,129,"ssertTrue( ""Mean of n = 1 set should be zero"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,130,.getStandardDeviation() == 0);
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,131,"ssertTrue( ""Variance of n = 1 set should be zero"","
False,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,132,.getVariance() == 0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,156,/* n=3 */
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,157,u.addValue(twoL);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,158,"assertTrue(""skew should not be zero (n = 3)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,159,u.getSkewness() != 0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,160,"assertTrue(""kurtosis should be zero (n = 3)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,161,u.getKurtosis() == 0.0);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,163,/* n=4 */
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,164,u.addValue(three);
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,165,"assertTrue(""kurtosis should not be zero (n = 4)"","
True,src/test/org/apache/commons/math/UnivariateImplTest.java,src/test/org/apache/commons/math/UnivariateImplTest.java,166,u.getKurtosis() != 0.0);

is_addition,old_file_path,new_file_path,line_num,content
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,20,import java.util.ArrayList;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,21,import java.util.List;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,76,"rivate Integer getPivotRow(final int col, final SimplexTableau tableau) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,79,"private Integer getPivotRow(SimplexTableau tableau, final int col) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,80,// create a list of all the rows that tie for the lowest score in the minimum ratio test
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,81,List<Integer> minRatioPositions = new ArrayList<Integer>();
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,78,nteger minRatioPos = null;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,84,f (ratio < minRatio) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,88,"if (MathUtils.equals(ratio, minRatio, epsilon)) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,89,minRatioPositions.add(i);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,90,} else if (ratio < minRatio) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,86,inRatioPos = i;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,92,minRatioPositions = new ArrayList<Integer>();
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,93,minRatioPositions.add(i);
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,90,eturn minRatioPos;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,98,if (minRatioPositions.size() == 0) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,99,return null;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,100,} else if (minRatioPositions.size() > 1) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,101,// there's a degeneracy as indicated by a tie in the minimum ratio test
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,102,// check if there's an artificial variable that can be forced out of the basis
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,103,for (Integer row : minRatioPositions) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,104,for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,105,int column = i + tableau.getArtificialVariableOffset();
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,106,"if (MathUtils.equals(tableau.getEntry(row, column), 1, epsilon) &&"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,107,row.equals(tableau.getBasicRow(column))) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,108,return row;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,113,return minRatioPositions.get(0);
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,106,"nteger pivotRow = getPivotRow(pivotCol, tableau);"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,128,"Integer pivotRow = getPivotRow(tableau, pivotCol);"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,125, Checks whether Phase 1 is solved.
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,126, @param tableau simple tableau for the problem
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,127, @return whether Phase 1 is solved
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,129,rivate boolean isPhase1Solved(final SimplexTableau tableau) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,130,f (tableau.getNumArtificialVariables() == 0) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,131,eturn true;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,133,or (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,134,"f (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,135,eturn false;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,138,eturn true;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,142, Returns whether the problem is at an optimal state.
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,143, @param tableau simple tableau for the problem
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,144, @return whether the model has been solved
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,146,ublic boolean isOptimal(final SimplexTableau tableau) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,147,f (tableau.getNumArtificialVariables() > 0) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,148,eturn false;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,150,or (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,151,"f (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {"
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,152,eturn false;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,155,eturn true;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,165,rotected void solvePhase1(final SimplexTableau tableau)
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,166,hrows OptimizationException {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,153,protected void solvePhase1(final SimplexTableau tableau) throws OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,172,hile (!isPhase1Solved(tableau)) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,160,while (!tableau.isOptimal()) {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,184,ublic RealPointValuePair doOptimize()
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,185,hrows OptimizationException {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,172,public RealPointValuePair doOptimize() throws OptimizationException {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,190,hile (!isOptimal(tableau)) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java,179,while (!tableau.isOptimal()) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,30,import org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,32,mport org.apache.commons.math.linear.Array2DRowRealMatrix;
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,109,his.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,109,this.numDecisionVariables   = f.getCoefficients().getDimension() +
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,110,(restrictToNonNegative ? 0 : 1);
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,186,** Get the number of variables.
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,187, @return number of variables
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,189,ublic int getNumVariables() {
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,190,eturn f.getCoefficients().getDimension();
False,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,273,rivate Integer getBasicRow(final int col) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,267,Integer getBasicRow(final int col) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,329,* Returns whether the problem is at an optimal state.
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,330,* @return whether the model has been solved
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,332,boolean isOptimal() {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,333,for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,334,"if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {"
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,335,return false;
True,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java,338,return true;
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,20,mport static org.junit.Assert.assertEquals;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,20,import org.junit.Assert;
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,25,mport org.apache.commons.math.linear.RealVector;
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,26,mport org.apache.commons.math.linear.ArrayRealVector;
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,45,"ssertEquals(0.0, solution.getPoint()[0], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,46,"ssertEquals(1.0, solution.getPoint()[1], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,47,"ssertEquals(1.0, solution.getPoint()[2], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,48,"ssertEquals(3.0, solution.getValue(), .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,43,"Assert.assertEquals(0.0, solution.getPoint()[0], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,44,"Assert.assertEquals(1.0, solution.getPoint()[1], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,45,"Assert.assertEquals(1.0, solution.getPoint()[2], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,46,"Assert.assertEquals(3.0, solution.getValue(), .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,53,"inearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,54,ollection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,55,"onstraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,51,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,52,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,53,"constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,55,SimplexSolver solver = new SimplexSolver();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,56,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,57,"Assert.assertEquals(6.9, solution.getValue(), .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,57,"ealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,58,"ssertEquals(6.9, solution.getValue(), .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,60,@Test
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,61,public void testDegeneracy() throws OptimizationException {
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,62,"LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.7 }, 0 );"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,63,Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,64,"constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 18.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,65,"constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.GEQ, 10.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,66,"constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 8.0));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,68,SimplexSolver solver = new SimplexSolver();
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,69,"RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,70,"Assert.assertEquals(13.6, solution.getValue(), .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,73,"ssertEquals(10.0, solution.getValue(), .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,85,"Assert.assertEquals(10.0, solution.getValue(), .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,83,"ssertEquals(0, solution.getValue(), .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,84,"ssertEquals(0, solution.getPoint()[0], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,85,"ssertEquals(0, solution.getPoint()[1], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,95,"Assert.assertEquals(0, solution.getValue(), .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,96,"Assert.assertEquals(0, solution.getPoint()[0], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,97,"Assert.assertEquals(0, solution.getPoint()[1], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,108,"ssertEquals(2.0, solution.getPoint()[0], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,109,"ssertEquals(2.0, solution.getPoint()[1], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,110,"ssertEquals(57.0, solution.getValue(), 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,120,"Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,121,"Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,122,"Assert.assertEquals(57.0, solution.getValue(), 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,121,"ssertEquals(10.0, solution.getPoint()[0], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,122,"ssertEquals(30.0, solution.getValue(), 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,133,"Assert.assertEquals(10.0, solution.getPoint()[0], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,134,"Assert.assertEquals(30.0, solution.getValue(), 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,139,"ssertEquals(2.0, solution.getPoint()[0], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,140,"ssertEquals(2.0, solution.getPoint()[1], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,141,"ssertEquals(50.0, solution.getValue(), 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,151,"Assert.assertEquals(2.0, solution.getPoint()[0], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,152,"Assert.assertEquals(2.0, solution.getPoint()[1], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,153,"Assert.assertEquals(50.0, solution.getValue(), 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,154,"ssertEquals(4.0, solution.getPoint()[0], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,155,"ssertEquals(0.0, solution.getPoint()[1], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,156,"ssertEquals(-13.0, solution.getValue(), 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,166,"Assert.assertEquals(4.0, solution.getPoint()[0], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,167,"Assert.assertEquals(0.0, solution.getPoint()[1], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,168,"Assert.assertEquals(-13.0, solution.getValue(), 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,168,"ssertEquals(-2.0, solution.getPoint()[0], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,169,"ssertEquals(8.0, solution.getPoint()[1], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,170,"ssertEquals(12.0, solution.getValue(), 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,180,"Assert.assertEquals(-2.0, solution.getPoint()[0], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,181,"Assert.assertEquals(8.0, solution.getPoint()[1], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,182,"Assert.assertEquals(12.0, solution.getValue(), 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,206,"ssertEquals(2902.92783505155, solution.getPoint()[0], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,207,"ssertEquals(480.419243986254, solution.getPoint()[1], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,208,"ssertEquals(0.0, solution.getPoint()[2], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,209,"ssertEquals(0.0, solution.getPoint()[3], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,210,"ssertEquals(0.0, solution.getPoint()[4], .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,211,"ssertEquals(1438556.7491409, solution.getValue(), .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,218,"Assert.assertEquals(2902.92783505155, solution.getPoint()[0], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,219,"Assert.assertEquals(480.419243986254, solution.getPoint()[1], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,220,"Assert.assertEquals(0.0, solution.getPoint()[2], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,221,"Assert.assertEquals(0.0, solution.getPoint()[3], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,222,"Assert.assertEquals(0.0, solution.getPoint()[4], .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,223,"Assert.assertEquals(1438556.7491409, solution.getValue(), .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,225,"ssertEquals(1.0, solution.getPoint()[0], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,226,"ssertEquals(1.0, solution.getPoint()[1], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,227,"ssertEquals(0.0, solution.getPoint()[2], 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,228,"ssertEquals(15.0, solution.getValue(), 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,237,"Assert.assertEquals(1.0, solution.getPoint()[0], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,238,"Assert.assertEquals(1.0, solution.getPoint()[1], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,239,"Assert.assertEquals(0.0, solution.getPoint()[2], 0.0);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,240,"Assert.assertEquals(15.0, solution.getValue(), 0.0);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,239,"ssertEquals(0, solution.getValue(), .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,251,"Assert.assertEquals(0, solution.getValue(), .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,366,"ssertEquals(7518.0, solution.getValue(), .0000001);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,378,"Assert.assertEquals(7518.0, solution.getValue(), .0000001);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,388,ealVector lhs = new ArrayRealVector(numCoefficients);
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,400,double[] lhs = new double[numCoefficients];
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,394,"hs.setEntry(index, value);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,406,lhs[index] = value;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,25,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,26,import org.junit.Test;
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,26,mport junit.framework.TestCase;
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,28,ublic class SimplexTableauTest extends TestCase {
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,28,public class SimplexTableauTest {
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,30,@Test
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,46,@Test
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,62,@Test
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,80,@Test
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,82,"ssertEquals(tableau, TestUtils.serializeAndRecover(tableau));"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,86,"Assert.assertEquals(tableau, TestUtils.serializeAndRecover(tableau));"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,97,"ssertEquals(""Wrong number of rows."", expected.length, result.length);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,102,"Assert.assertEquals(""Wrong number of rows."", expected.length, result.length);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,99,"ssertEquals(""Wrong number of columns."", expected[i].length, result[i].length);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,104,"Assert.assertEquals(""Wrong number of columns."", expected[i].length, result[i].length);"
False,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,101,"ssertEquals(""Wrong value at position ["" + i + "","" + j + ""]"", expected[i][j], result[i][j]);"
True,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,src/test/java/org/apache/commons/math/optimization/linear/SimplexTableauTest.java,106,"Assert.assertEquals(""Wrong value at position ["" + i + "","" + j + ""]"", expected[i][j], result[i][j], 1.0e-15);"

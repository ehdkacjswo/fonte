is_addition,old_file_path,new_file_path,line_num,content
False,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,34, @param x abscissa for which the function value should be computed
False,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,35, @param y ordinate for which the function value should be computed
False,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,36, @return the value
False,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,37, @throws FunctionEvaluationException if the function evaluation fails
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,32,* @param x Abscissa for which the function value should be computed.
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,33,* @param y Ordinate for which the function value should be computed.
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,34,* @return the value.
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,35,* @throws FunctionEvaluationException if the function evaluation fails.
False,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,39,"ouble value(double x, double y) throws FunctionEvaluationException;"
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,37,"public double value(double x, double y)"
True,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,src/main/java/org/apache/commons/math/analysis/BivariateRealFunction.java,38,throws FunctionEvaluationException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,19,import org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,20,import org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,21,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,22,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,23,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,24,import org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,27,* Generates a bicubic interpolating function.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,29,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,30,* @since 2.2
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,32,public class BicubicSplineInterpolator
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,33,implements BivariateRealGridInterpolator {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,35,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,37,"public BicubicSplineInterpolatingFunction interpolate(final double[] xval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,38,"final double[] yval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,39,final double[][] fval)
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,40,"throws MathException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,41,if (xval.length == 0 || yval.length == 0 || fval.length == 0) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,42,"throw MathRuntimeException.createIllegalArgumentException(""no data"");"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,44,if (xval.length != fval.length) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,45,"throw new DimensionMismatchException(xval.length, fval.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,48,"MathUtils.checkOrder(xval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,49,"MathUtils.checkOrder(yval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,51,final int xLen = xval.length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,52,final int yLen = yval.length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,54,"// Samples (first index is y-coordinate, i.e. subarray variable is x)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,55,// 0 <= i < xval.length
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,56,// 0 <= j < yval.length
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,57,"// fX[j][i] = f(xval[i], yval[j])"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,58,final double[][] fX = new double[yLen][xLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,59,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,60,if (fval[i].length != yLen) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,61,"throw new DimensionMismatchException(fval[i].length, yLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,64,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,65,fX[j][i] = fval[i][j];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,69,final SplineInterpolator spInterpolator = new SplineInterpolator();
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,71,"// For each line y[j] (0 <= j < yLen), construct a 1D spline with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,72,// respect to variable x
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,73,final PolynomialSplineFunction[] ySplineX = new PolynomialSplineFunction[yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,74,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,75,"ySplineX[j] = spInterpolator.interpolate(xval, fX[j]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,78,"// For each line x[i] (0 <= i < xLen), construct a 1D spline with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,79,// respect to variable y generated by array fY_1[i]
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,80,final PolynomialSplineFunction[] xSplineY = new PolynomialSplineFunction[xLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,81,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,82,"xSplineY[i] = spInterpolator.interpolate(yval, fval[i]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,85,// Partial derivatives with respect to x at the grid knots
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,86,final double[][] dFdX = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,87,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,88,final UnivariateRealFunction f = ySplineX[j].derivative();
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,89,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,90,dFdX[i][j] = f.value(xval[i]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,94,// Partial derivatives with respect to y at the grid knots
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,95,final double[][] dFdY = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,96,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,97,final UnivariateRealFunction f = xSplineY[i].derivative();
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,98,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,99,dFdY[i][j] = f.value(yval[j]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,103,// Cross partial derivatives
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,104,final double[][] d2FdXdY = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,105,for (int i = 0; i < xLen ; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,106,"final int nI = nextIndex(i, xLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,107,final int pI = previousIndex(i);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,108,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,109,"final int nJ = nextIndex(j, yLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,110,final int pJ = previousIndex(j);
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,111,d2FdXdY[i][j] = (fval[nI][nJ] - fval[nI][pJ] -
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,112,fval[pI][nJ] + fval[pI][pJ]) /
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,113,((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,117,// Create the interpolating splines
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,118,"return new BicubicSplineInterpolatingFunction(xval, yval, fval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,119,"dFdX, dFdY, d2FdXdY);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,123,"* Compute the next index of an array, clipping if necessary."
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,124,* It is assumed (but not checked) that {@code i} is larger than or equal to 0}.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,126,* @param i Index
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,127,* @param max Upper limit of the array
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,128,* @return the next index
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,130,"private int nextIndex(int i, int max) {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,131,final int index = i + 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,132,return index < max ? index : index - 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,135,"* Compute the previous index of an array, clipping if necessary."
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,136,* It is assumed (but not checked) that {@code i} is smaller than the size of the array.
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,138,* @param i Index
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,139,* @return the previous index
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,141,private int previousIndex(int i) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,142,final int index = i - 1;
True,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.java,143,return index >= 0 ? index : 0;
False,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,33," @param xval all the x-coordinates of the interpolation points, sorted"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,32,"* @param xval All the x-coordinates of the interpolation points, sorted"
False,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,35," @param yval all the y-coordinates of the interpolation points, sorted"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,34,"* @param yval All the y-coordinates of the interpolation points, sorted"
False,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,37, @param zval the values of the interpolation points on all the grid knots:
False,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,38," {@code zval[i][j] = f(xval[i], yval[j])}"
False,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,39, @return a function which interpolates the data set
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,36,* @param fval The values of the interpolation points on all the grid knots:
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,37,"* {@code fval[i][j] = f(xval[i], yval[j])}."
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,38,* @return a function which interpolates the data set.
False,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,41,         interpolation algorithm
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,40,*         interpolation algorithm.
False,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,43,"ivariateRealFunction interpolate(double[] xval, double[] yval, double[][] zval)"
True,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/BivariateRealGridInterpolator.java,42,"BivariateRealFunction interpolate(double[] xval, double[] yval, double[][] fval)"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,24,mport org.apache.commons.math.analysis.BivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,35,* @deprecated This class does not perform smoothing; the name is thus misleading.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,36,* Please use {@link org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolator}
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,37,"* instead. If smoothing is desired, a tentative implementation is provided in class"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,38,* {@link org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator}.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,39,* This class will be removed in math 3.0.
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,42,"ublic BivariateRealFunction interpolate(final double[] xval,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,43,"inal double[] yval,"
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,44,inal double[][] zval)
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,46,"public BicubicSplineInterpolatingFunction interpolate(final double[] xval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,47,"final double[] yval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,48,final double[][] zval)
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,136,ZdXdY[i][j] =  (zY_2[nI][nJ] - zY_2[nI][pJ] -
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,137,Y_2[pI][nJ] + zY_2[pI][pJ]) /
False,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,138,(xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) ;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,140,dZdXdY[i][j] = (zY_2[nI][nJ] - zY_2[nI][pJ] -
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,141,zY_2[pI][nJ] + zY_2[pI][pJ]) /
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolator.java,142,((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,4,* this work for additional information regarding copyright ownership.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,7,* the License.  You may obtain a copy of the License at
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,14,* See the License for the specific language governing permissions and
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,15,* limitations under the License.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,19,import org.apache.commons.math.DimensionMismatchException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,20,import org.apache.commons.math.MathRuntimeException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,21,import org.apache.commons.math.MathException;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,22,import org.apache.commons.math.util.MathUtils;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,23,import org.apache.commons.math.analysis.UnivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,24,import org.apache.commons.math.analysis.BivariateRealFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,25,import org.apache.commons.math.optimization.general.GaussNewtonOptimizer;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,26,import org.apache.commons.math.optimization.fitting.PolynomialFitter;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,27,import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,30,* Generates a bicubic interpolation function.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,31,"* Prior to generating the interpolating function, the input is smoothed using"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,32,* polynomial fitting.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,34,* @version $Revision$ $Date$
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,35,* @since 2.2
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,37,public class SmoothingPolynomialBicubicSplineInterpolator
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,38,extends BicubicSplineInterpolator {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,39,private final PolynomialFitter xFitter;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,40,private final PolynomialFitter yFitter;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,43,* Default constructor. The degree of the fitting polynomials are set to 3.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,45,public SmoothingPolynomialBicubicSplineInterpolator() {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,46,this(3);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,50,* @param degree Degree of the polynomial fitting functions.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,52,public SmoothingPolynomialBicubicSplineInterpolator(int degree) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,53,"this(degree, degree);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,57,* @param xDegree Degree of the polynomial fitting functions along the
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,58,* x-dimension.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,59,* @param yDegree Degree of the polynomial fitting functions along the
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,60,* y-dimension.
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,62,"public SmoothingPolynomialBicubicSplineInterpolator(int xDegree,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,63,int yDegree) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,64,"xFitter = new PolynomialFitter(xDegree, new GaussNewtonOptimizer(false));"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,65,"yFitter = new PolynomialFitter(yDegree, new GaussNewtonOptimizer(false));"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,69,* {@inheritDoc}
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,71,"public BicubicSplineInterpolatingFunction interpolate(final double[] xval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,72,"final double[] yval,"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,73,final double[][] fval)
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,74,"throws MathException, IllegalArgumentException {"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,75,if (xval.length == 0 || yval.length == 0 || fval.length == 0) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,76,"throw MathRuntimeException.createIllegalArgumentException(""no data"");"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,78,if (xval.length != fval.length) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,79,"throw new DimensionMismatchException(xval.length, fval.length);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,82,final int xLen = xval.length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,83,final int yLen = yval.length;
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,85,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,86,if (fval[i].length != yLen) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,87,"throw new DimensionMismatchException(fval[i].length, yLen);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,91,"MathUtils.checkOrder(xval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,92,"MathUtils.checkOrder(yval, 1, true);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,94,"// For each line y[j] (0 <= j < yLen), construct a polynomial, with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,95,"// respect to variable x, fitting array fval[][j]"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,96,final PolynomialFunction[] yPolyX = new PolynomialFunction[yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,97,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,98,xFitter.clearObservations();
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,99,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,100,"xFitter.addObservedPoint(1, xval[i], fval[i][j]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,103,yPolyX[j] = xFitter.fit();
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,106,"// For every knot (xval[i], yval[j]) of the grid, calculate corrected"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,107,// values fval_1
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,108,final double[][] fval_1 = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,109,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,110,final PolynomialFunction f = yPolyX[j];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,111,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,112,fval_1[i][j] = f.value(xval[i]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,116,"// For each line x[i] (0 <= i < xLen), construct a polynomial, with"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,117,"// respect to variable y, fitting array fval_1[i][]"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,118,final PolynomialFunction[] xPolyY = new PolynomialFunction[xLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,119,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,120,yFitter.clearObservations();
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,121,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,122,"yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,125,xPolyY[i] = yFitter.fit();
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,128,"// For every knot (xval[i], yval[j]) of the grid, calculate corrected"
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,129,// values fval_2
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,130,final double[][] fval_2 = new double[xLen][yLen];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,131,for (int i = 0; i < xLen; i++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,132,final PolynomialFunction f = xPolyY[i];
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,133,for (int j = 0; j < yLen; j++) {
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,134,fval_2[i][j] = f.value(yval[j]);
True,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,src/main/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolator.java,138,"return super.interpolate(xval, yval, fval_2);"
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,64,* Remove all observations.
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,66,public void clearObservations() {
True,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,src/main/java/org/apache/commons/math/optimization/fitting/PolynomialFitter.java,67,fitter.clearObservations();
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,19,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,20,import org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,21,import org.apache.commons.math.analysis.BivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,26,* Testcase for the bicubic interpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,28,"* @version $Revision: 821626 $ $Date: 2009-10-04 23:57:30 +0200 (Sun, 04 Oct 2009) $"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,30,public final class BicubicSplineInterpolatorTest {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,32,* Test preconditions.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,34,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,35,public void testPreconditions() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,36,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,37,"double[] yval = new double[] {-4, -3, -1, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,38,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,40,BivariateRealGridInterpolator interpolator = new BicubicSplineInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,42,"@SuppressWarnings(""unused"")"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,43,"BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,45,"double[] wxval = new double[] {3, 2, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,46,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,47,"p = interpolator.interpolate(wxval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,48,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,49,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,50,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,53,"double[] wyval = new double[] {-4, -3, -1, -1};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,54,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,55,"p = interpolator.interpolate(xval, wyval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,56,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,57,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,58,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,61,double[][] wzval = new double[xval.length][yval.length + 1];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,62,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,63,"p = interpolator.interpolate(xval, yval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,64,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,65,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,66,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,68,wzval = new double[xval.length - 1][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,69,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,70,"p = interpolator.interpolate(xval, yval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,71,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,72,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,73,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,78,* Test of interpolator for a plane.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,79,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,80,* z = 2 x - 3 y + 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,82,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,83,public void testPlane() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,84,BivariateRealFunction f = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,85,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,86,return 2 * x - 3 * y + 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,90,BivariateRealGridInterpolator interpolator = new BicubicSplineInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,92,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,93,"double[] yval = new double[] {-4, -3, -1, 2, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,94,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,95,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,96,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,97,"zval[i][j] = f.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,101,"BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,102,"double x, y;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,103,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,105,x = 4;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,106,y = -3;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,107,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,108,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,109,"Assert.assertEquals(""On sample point"", expected, result, 1e-15);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,111,x = 4.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,112,y = -1.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,113,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,114,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,115,"Assert.assertEquals(""half-way between sample points (middle of the patch)"", expected, result, 0.3);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,117,x = 3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,118,y = -3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,119,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,120,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,121,"Assert.assertEquals(""half-way between sample points (border of the patch)"", expected, result, 0.3);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,125,* Test of interpolator for a paraboloid.
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,126,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,127,* z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,129,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,130,public void testParaboloid() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,131,BivariateRealFunction f = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,132,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,133,return 2 * x * x - 3 * y * y + 4 * x * y - 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,137,BivariateRealGridInterpolator interpolator = new BicubicSplineInterpolator();
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,139,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,140,"double[] yval = new double[] {-4, -3, -2, -1, 0.5, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,141,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,142,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,143,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,144,"zval[i][j] = f.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,148,"BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,149,"double x, y;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,150,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,152,x = 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,153,y = 0.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,154,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,155,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,156,"Assert.assertEquals(""On sample point"", expected, result, 1e-13);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,158,x = 4.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,159,y = -1.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,160,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,161,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,162,"Assert.assertEquals(""half-way between sample points (middle of the patch)"", expected, result, 0.2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,164,x = 3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,165,y = -3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,166,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,167,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatorTest.java,168,"Assert.assertEquals(""half-way between sample points (border of the patch)"", expected, result, 0.2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,29,* @deprecated To be removed in  math 3.0 (when the class for which it is a test will also be removed).
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,63," = interpolator.interpolate(xval, wyval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,64,"p = interpolator.interpolate(xval, yval, wzval);"
False,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,65, catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingBicubicSplineInterpolatorTest.java,66,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,2,* Licensed to the Apache Software Foundation (ASF) under one or more
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,3,* contributor license agreements.  See the NOTICE file distributed with
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,4,* this work for additional information regarding copyright ownership.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,5,"* The ASF licenses this file to You under the Apache License, Version 2.0"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,6,"* (the ""License""); you may not use this file except in compliance with"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,7,* the License.  You may obtain a copy of the License at
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,9,*      http://www.apache.org/licenses/LICENSE-2.0
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,11,"* Unless required by applicable law or agreed to in writing, software"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,12,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,13,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,14,* See the License for the specific language governing permissions and
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,15,* limitations under the License.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,17,package org.apache.commons.math.analysis.interpolation;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,19,import org.apache.commons.math.MathException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,20,import org.apache.commons.math.DimensionMismatchException;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,21,import org.apache.commons.math.analysis.BivariateRealFunction;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,22,import org.junit.Assert;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,23,import org.junit.Test;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,26,* Testcase for the smoothing bicubic interpolator.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,28,* @version $Revision$ $Date$
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,30,public final class SmoothingPolynomialBicubicSplineInterpolatorTest {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,32,* Test preconditions.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,34,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,35,public void testPreconditions() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,36,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,37,"double[] yval = new double[] {-4, -3, -1, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,38,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,40,BivariateRealGridInterpolator interpolator = new SmoothingPolynomialBicubicSplineInterpolator(0);
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,42,"@SuppressWarnings(""unused"")"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,43,"BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,45,"double[] wxval = new double[] {3, 2, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,46,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,47,"p = interpolator.interpolate(wxval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,48,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,49,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,50,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,53,"double[] wyval = new double[] {-4, -3, -1, -1};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,54,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,55,"p = interpolator.interpolate(xval, wyval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,56,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,57,} catch (IllegalArgumentException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,58,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,61,double[][] wzval = new double[xval.length][yval.length + 1];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,62,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,63,"p = interpolator.interpolate(xval, yval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,64,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,65,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,66,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,68,wzval = new double[xval.length - 1][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,69,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,70,"p = interpolator.interpolate(xval, yval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,71,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,72,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,73,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,75,wzval = new double[xval.length][yval.length - 1];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,76,try {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,77,"p = interpolator.interpolate(xval, yval, wzval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,78,"Assert.fail(""an exception should have been thrown"");"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,79,} catch (DimensionMismatchException e) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,80,// Expected
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,85,* Test of interpolator for a plane.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,86,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,87,* z = 2 x - 3 y + 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,89,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,90,public void testPlane() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,91,BivariateRealFunction f = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,92,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,93,return 2 * x - 3 * y + 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,94,+ ((int) (Math.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1);
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,98,BivariateRealGridInterpolator interpolator = new SmoothingPolynomialBicubicSplineInterpolator(1);
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,100,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,101,"double[] yval = new double[] {-4, -3, -1, 2, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,102,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,103,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,104,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,105,"zval[i][j] = f.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,109,"BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,110,"double x, y;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,111,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,113,x = 4;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,114,y = -3;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,115,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,116,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,117,"Assert.assertEquals(""On sample point"", expected, result, 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,119,x = 4.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,120,y = -1.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,121,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,122,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,123,"Assert.assertEquals(""half-way between sample points (middle of the patch)"", expected, result, 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,125,x = 3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,126,y = -3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,127,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,128,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,129,"Assert.assertEquals(""half-way between sample points (border of the patch)"", expected, result, 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,133,* Test of interpolator for a paraboloid.
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,134,* <p>
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,135,* z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,137,@Test
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,138,public void testParaboloid() throws MathException {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,139,BivariateRealFunction f = new BivariateRealFunction() {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,140,"public double value(double x, double y) {"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,141,return 2 * x * x - 3 * y * y + 4 * x * y - 5
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,142,+ ((int) (Math.abs(5 * x + 3 * y)) % 2 == 0 ? 1 : -1);
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,146,BivariateRealGridInterpolator interpolator = new SmoothingPolynomialBicubicSplineInterpolator(4);
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,148,"double[] xval = new double[] {3, 4, 5, 6.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,149,"double[] yval = new double[] {-4, -3, -2, -1, 0.5, 2.5};"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,150,double[][] zval = new double[xval.length][yval.length];
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,151,for (int i = 0; i < xval.length; i++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,152,for (int j = 0; j < yval.length; j++) {
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,153,"zval[i][j] = f.value(xval[i], yval[j]);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,157,"BivariateRealFunction p = interpolator.interpolate(xval, yval, zval);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,158,"double x, y;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,159,"double expected, result;"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,161,x = 5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,162,y = 0.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,163,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,164,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,165,"Assert.assertEquals(""On sample point"", expected, result, 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,167,x = 4.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,168,y = -1.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,169,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,170,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,171,"Assert.assertEquals(""half-way between sample points (middle of the patch)"", expected, result, 2);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,173,x = 3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,174,y = -3.5;
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,175,"expected = f.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,176,"result = p.value(x, y);"
True,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,src/test/java/org/apache/commons/math/analysis/interpolation/SmoothingPolynomialBicubicSplineInterpolatorTest.java,177,"Assert.assertEquals(""half-way between sample points (border of the patch)"", expected, result, 2);"

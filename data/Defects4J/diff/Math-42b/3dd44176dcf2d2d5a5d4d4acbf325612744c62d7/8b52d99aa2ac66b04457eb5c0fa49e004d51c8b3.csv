is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,502,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,503,* @see java.lang.Object#hashCode()
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,505,@Override
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,506,public int hashCode() {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,507,final int prime = 31;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,508,int result = 1;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,509,result = prime * result
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,510,+ ((freqTable == null) ? 0 : freqTable.hashCode());
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,511,return result;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,514,/* (non-Javadoc)
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,515,* @see java.lang.Object#equals(java.lang.Object)
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,517,@Override
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,518,public boolean equals(Object obj) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,519,if (this == obj)
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,520,return true;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,521,if (obj == null)
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,522,return false;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,523,if (!(obj instanceof Frequency))
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,524,return false;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,525,Frequency other = (Frequency) obj;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,526,if (freqTable == null) {
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,527,if (other.freqTable != null)
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,528,return false;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,529,} else if (!freqTable.equals(other.freqTable))
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,530,return false;
True,src/java/org/apache/commons/math/stat/Frequency.java,src/java/org/apache/commons/math/stat/Frequency.java,531,return true;
False,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,36,"mplements StorelessUnivariateStatistic, Serializable {"
False,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,38,** Serialization UID */
False,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,39,rivate static final long serialVersionUID = -44915725420072521L;
True,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic.java,36,implements StorelessUnivariateStatistic {
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,37,"mplements UnivariateStatistic, Serializable {"
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,39,** Serialization UID */
False,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,40,rivate static final long serialVersionUID = -8007759382851708045L;
True,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic.java,35,implements UnivariateStatistic {
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,45, The serialization version of this class
False,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,47,rivate static final long serialVersionUID = 1L;
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,45,/** Serializable version identifier */
True,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,src/java/org/apache/commons/math/stat/descriptive/AggregateSummaryStatistics.java,46,private static final long serialVersionUID = -8207112444016386906L;
False,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,26,ublic interface UnivariateStatistic extends Serializable {
True,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,src/java/org/apache/commons/math/stat/descriptive/UnivariateStatistic.java,25,public interface UnivariateStatistic {
False,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,51,rivate static final long serialVersionUID = -803343206421984070L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,src/java/org/apache/commons/math/stat/descriptive/moment/FirstMoment.java,51,private static final long serialVersionUID = 6112755307178490473L;
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,19,import java.io.Serializable;
False,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,48,ublic class GeometricMean extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/GeometricMean.java,50,public class GeometricMean extends AbstractStorelessUnivariateStatistic implements Serializable {
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,19,import java.io.Serializable;
False,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,43,ublic class Kurtosis extends AbstractStorelessUnivariateStatistic  {
True,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,src/java/org/apache/commons/math/stat/descriptive/moment/Kurtosis.java,45,public class Kurtosis extends AbstractStorelessUnivariateStatistic  implements Serializable {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,121,/** @inheritDoc{} */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,122,@Override
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,123,public int hashCode() {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,124,final int prime = 31;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,125,int result = 1;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,126,result = prime * result + (isBiasCorrected ? 1231 : 1237);
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,127,result = prime * result + (int) (n ^ (n >>> 32));
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,128,result = prime * result + Arrays.hashCode(productsSums);
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,129,result = prime * result + Arrays.hashCode(sums);
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,130,return result;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,133,/** @inheritDoc{} */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,134,@Override
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,135,public boolean equals(Object obj) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,136,if (this == obj)
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,137,return true;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,138,if (obj == null)
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,139,return false;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,140,if (!(obj instanceof VectorialCovariance))
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,141,return false;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,142,VectorialCovariance other = (VectorialCovariance) obj;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,143,if (isBiasCorrected != other.isBiasCorrected)
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,144,return false;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,145,if (n != other.n)
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,146,return false;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,147,"if (!Arrays.equals(productsSums, other.productsSums))"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,148,return false;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,149,"if (!Arrays.equals(sums, other.sums))"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,150,return false;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialCovariance.java,151,return true;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,20,import java.util.Arrays;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,81,/* @inheritDocs{} */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,82,@Override
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,83,public int hashCode() {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,84,final int prime = 31;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,85,int result = 1;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,86,result = prime * result + Arrays.hashCode(means);
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,87,return result;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,90,/* @inheritDocs{} */
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,91,@Override
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,92,public boolean equals(Object obj) {
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,93,if (this == obj)
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,94,return true;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,95,if (obj == null)
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,96,return false;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,97,if (!(obj instanceof VectorialMean))
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,98,return false;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,99,VectorialMean other = (VectorialMean) obj;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,100,"if (!Arrays.equals(means, other.means))"
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,101,return false;
True,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,src/java/org/apache/commons/math/stat/descriptive/moment/VectorialMean.java,102,return true;
True,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,19,import java.io.Serializable;
False,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,38,ublic class Max extends AbstractStorelessUnivariateStatistic {
True,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,src/java/org/apache/commons/math/stat/descriptive/rank/Max.java,40,public class Max extends AbstractStorelessUnivariateStatistic implements Serializable {
True,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,36,* <p>As of version 2.0 this no longer implements Serializable</p>
False,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,42,** serializable version identifier */
False,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,src/java/org/apache/commons/math/transform/FastCosineTransformer.java,43,rivate static final long serialVersionUID = -831323620109865380L;
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,36,** Serializable version identifier. */
False,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,src/java/org/apache/commons/math/transform/FastHadamardTransformer.java,37,rivate static final long serialVersionUID = -720498949613305350L;
True,src/java/org/apache/commons/math/transform/FastSineTransformer.java,src/java/org/apache/commons/math/transform/FastSineTransformer.java,36,* <p>As of version 2.0 this no longer implements Serializable</p>
False,src/java/org/apache/commons/math/transform/FastSineTransformer.java,src/java/org/apache/commons/math/transform/FastSineTransformer.java,42,** serializable version identifier */
False,src/java/org/apache/commons/math/transform/FastSineTransformer.java,src/java/org/apache/commons/math/transform/FastSineTransformer.java,43,rivate static final long serialVersionUID = -7557024407476823001L;
False,src/java/org/apache/commons/math/transform/RealTransformer.java,src/java/org/apache/commons/math/transform/RealTransformer.java,19,mport java.io.Serializable;
False,src/java/org/apache/commons/math/transform/RealTransformer.java,src/java/org/apache/commons/math/transform/RealTransformer.java,37,ublic interface RealTransformer extends Serializable {
True,src/java/org/apache/commons/math/transform/RealTransformer.java,src/java/org/apache/commons/math/transform/RealTransformer.java,35,public interface RealTransformer  {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,271,public void testSerial() {
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,272,f.addValue(oneL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,273,f.addValue(twoL);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,274,f.addValue(oneI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,275,f.addValue(twoI);
True,src/test/org/apache/commons/math/stat/FrequencyTest.java,src/test/org/apache/commons/math/stat/FrequencyTest.java,276,"assertEquals(f, TestUtils.serializeAndRecover(f));"
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,110,rivate static final long serialVersionUID = 9108665370122541953L;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,128,rivate static final long serialVersionUID = 801005145532790795L;
False,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/DescriptiveStatisticsTest.java,171,rivate static final long serialVersionUID = -707437653388052183L;
False,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,src/test/org/apache/commons/math/stat/descriptive/MultivariateSummaryStatisticsTest.java,89,rivate static final long serialVersionUID = 6492471391340853423L;
True,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,205,public void testSerial() {
True,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,206,StorelessUnivariateStatistic s =
True,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,207,(StorelessUnivariateStatistic) getUnivariateStatistic();
True,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,src/test/org/apache/commons/math/stat/descriptive/StorelessUnivariateStatisticAbstractTest.java,208,"assertEquals(s, TestUtils.serializeAndRecover(s));"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,21,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,82,public void testSerial(){
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,83,"VectorialCovariance stat = new VectorialCovariance(points[0].length, true);"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialCovarianceTest.java,84,"assertEquals(stat, TestUtils.serializeAndRecover(stat));"
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,21,import org.apache.commons.math.TestUtils;
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,74,public void testSerial() throws DimensionMismatchException {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,75,VectorialMean stat = new VectorialMean(points[0].length);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,76,for (int i = 0; i < points.length; ++i) {
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,77,stat.increment(points[i]);
True,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,src/test/org/apache/commons/math/stat/descriptive/moment/VectorialMeanTest.java,79,"assertEquals(stat, TestUtils.serializeAndRecover(stat));"

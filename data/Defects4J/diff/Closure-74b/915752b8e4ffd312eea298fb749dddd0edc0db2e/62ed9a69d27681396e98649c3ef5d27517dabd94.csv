is_addition,old_file_path,new_file_path,line_num,content
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,21,import com.google.common.base.Join;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,84,"@FlagSpec(help = ""Runs the compile job many times, then prints out the "" +"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,85,"""best phase ordering from this run"","
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,86,docLevel = DocLevel.SECRET)
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,87,public static final Flag<Boolean> FLAG_compute_phase_ordering =
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,88,Flag.value(false);
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,198,"Options:"" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,205,"""Options:"" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,231,// Bookkeeping to measure optimal phase orderings.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,232,private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,234,private final RunTimeStats runTimeStats = new RunTimeStats();
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,307,nt result;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,319,int result = 0;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,320,int runs = 1;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,321,if (FLAG_compute_phase_ordering.get()) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,322,runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,323,PhaseOptimizer.randomizeLoops();
False,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,309,esult = doRun();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,326,for (int i = 0; i < runs && result == 0; i++) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,327,runTimeStats.recordStartRun();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,328,result = doRun();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,329,runTimeStats.recordEndRun();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,338,if (FLAG_compute_phase_ordering.get()) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,339,runTimeStats.outputBestPhaseOrdering();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,660,"return processResults(result, modules, options);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,664,"* Processes the results of the compile job, and returns an error code."
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,666,"int processResults(Result result, JSModule[] modules, B options)"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,667,"throws FlagUsageException, IOException {"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,668,if (FLAG_compute_phase_ordering.get()) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,669,return 0;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1037,private class RunTimeStats {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1038,private long bestRunTime = Long.MAX_VALUE;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1039,private long worstRunTime = Long.MIN_VALUE;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1040,private long lastStartTime = 0;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1041,private List<List<String>> loopedPassesInBestRun = null;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1044,* Record the start of a run.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1046,private void recordStartRun() {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1047,lastStartTime = System.currentTimeMillis();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1048,PhaseOptimizer.clearLoopsRun();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1052,* Record the end of a run.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1054,private void recordEndRun() {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1055,long endTime = System.currentTimeMillis();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1056,long length = endTime - lastStartTime;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1057,"worstRunTime = Math.max(length, worstRunTime);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1058,if (length < bestRunTime) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1059,loopedPassesInBestRun = PhaseOptimizer.getLoopsRun();
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1060,bestRunTime = length;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1065,* Print the best phase loop to stderr.
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1067,private void outputBestPhaseOrdering() {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1068,"out.println(""Best time: "" + bestRunTime);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1069,"out.println(""Worst time: "" + worstRunTime);"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1071,int i = 1;
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1072,for (List<String> loop : loopedPassesInBestRun) {
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1073,"out.println(""\nLoop "" + i + "":\n"" + Join.join(""\n"", loop));"
True,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,src/com/google/javascript/jscomp/AbstractCompilerRunner.java,1074,i++;
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,745,* Whether the warnings guard in this Options object disables the given
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,746,* group of warnings.
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,748,boolean disables(DiagnosticGroup type) {
True,src/com/google/javascript/jscomp/CompilerOptions.java,src/com/google/javascript/jscomp/CompilerOptions.java,749,return warningsGuard != null && warningsGuard.disables(type);
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,234,// DiagnosticGroups override the plain checkTypes option.
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,235,if (options.enables(DiagnosticGroups.CHECK_TYPES)) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,236,options.checkTypes = true;
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,237,} else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {
True,src/com/google/javascript/jscomp/DefaultPassConfig.java,src/com/google/javascript/jscomp/DefaultPassConfig.java,238,options.checkTypes = false;
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,51,"deprecated, fileoverviewTags, invalidCasts, missingProperties, "" +"
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,52,"nonStandardJsDocs, strictModuleDepCheck, undefinedVars, "" +"
False,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,53,"unknownDefines, visibility"";"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,51,"""checkTypes, deprecated, fileoverviewTags, invalidCasts, "" +"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,52,"""missingProperties, nonStandardJsDocs, strictModuleDepCheck, "" +"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,53,"""undefinedVars, unknownDefines, visibility"";"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,113,public static DiagnosticGroup CHECK_TYPES =
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,114,"DiagnosticGroups.registerGroup(""checkTypes"","
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,115,new DiagnosticGroup(
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,116,"TypeValidator.ALL_DIAGNOSTICS,"
True,src/com/google/javascript/jscomp/DiagnosticGroups.java,src/com/google/javascript/jscomp/DiagnosticGroups.java,117,TypeCheck.ALL_DIAGNOSTICS));
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,25,import java.util.Random;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,52,// The following static properties are only used for computing optimal
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,53,// phase orderings. They should not be touched by normal compiler runs.
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,54,private static boolean randomizeLoops = false;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,55,private static List<List<String>> loopsRun = Lists.newArrayList();
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,64,* Randomizes loops. This should only be used when computing optimal phase
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,65,* orderings.
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,67,static void randomizeLoops() {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,68,randomizeLoops = true;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,72,* Get the phase ordering of loops during this run.
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,73,* Returns an empty list when the loops are not randomized.
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,75,static List<List<String>> getLoopsRun() {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,76,return loopsRun;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,80,* Clears the phase ordering of loops during this run.
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,82,static void clearLoopsRun() {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,83,loopsRun.clear();
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,245,rivate List<CompilerPass> myPasses = Lists.newArrayList();
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,273,private final List<NamedPass> myPasses = Lists.newArrayList();
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,281,"* Gets the pass names, in order."
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,283,private List<String> getPassOrder() {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,284,List<String> order = Lists.newArrayList();
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,285,for (NamedPass pass : myPasses) {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,286,order.add(pass.name);
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,288,return order;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,294,if (randomizeLoops) {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,295,List<NamedPass> mixedupPasses = Lists.newArrayList();
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,296,Random random = new Random();
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,297,while (myPasses.size() > 0) {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,298,mixedupPasses.add(
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,299,myPasses.remove(random.nextInt(myPasses.size())));
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,301,myPasses.addAll(mixedupPasses);
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,260,o {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,308,out: do {
False,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,270,eturn;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,318,break out;
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,324,if (randomizeLoops) {
True,src/com/google/javascript/jscomp/PhaseOptimizer.java,src/com/google/javascript/jscomp/PhaseOptimizer.java,325,loopsRun.add(getPassOrder());
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,81,protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,82,"""overriding prototype with non-object"";"
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,114,rotected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =
False,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,115,"overriding prototype with non-object"";"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,227,static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,228,"DETERMINISTIC_TEST,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,229,"DETERMINISTIC_TEST_NO_RESULT,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,230,"INEXISTENT_ENUM_ELEMENT,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,231,"INEXISTENT_PROPERTY,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,232,"NOT_A_CONSTRUCTOR,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,233,"BIT_OPERATION,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,234,"NOT_CALLABLE,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,235,"CONSTRUCTOR_NOT_CALLABLE,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,236,"FUNCTION_MASKS_VARIABLE,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,237,"MULTIPLE_VAR_DEF,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,238,"ENUM_DUP,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,239,"ENUM_NOT_CONSTANT,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,240,"INTERFACE_FUNCTION_MEMBERS_ONLY,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,241,"INTERFACE_FUNCTION_NOT_EMPTY,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,242,"CONFLICTING_EXTENDED_TYPE,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,243,"BAD_IMPLEMENTED_TYPE,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,244,"HIDDEN_SUPERCLASS_PROPERTY,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,245,"HIDDEN_INTERFACE_PROPERTY,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,246,"HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,247,"HIDDEN_INTERFACE_PROPERTY_MISMATCH,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,248,"UNKNOWN_OVERRIDE,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,249,"INTERFACE_METHOD_OVERRIDE,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,250,"UNKNOWN_EXPR_TYPE,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,251,"UNRESOLVED_TYPE,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,252,"WRONG_ARGUMENT_COUNT,"
True,src/com/google/javascript/jscomp/TypeCheck.java,src/com/google/javascript/jscomp/TypeCheck.java,253,ILLEGAL_IMPLICIT_CAST);
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,108,static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,109,"INVALID_CAST,"
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,110,"TYPE_MISMATCH_WARNING,"
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,111,"MISSING_EXTENDS_TAG_WARNING,"
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,112,"DUP_VAR_DECLARATION,"
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,113,"HIDDEN_PROPERTY_MISMATCH,"
True,src/com/google/javascript/jscomp/TypeValidator.java,src/com/google/javascript/jscomp/TypeValidator.java,114,INTERFACE_METHOD_NOT_IMPLEMENTED);
False,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,76,/ checkTypes and checkFunctions have the side-effect of asserting that the
True,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,76,// checkTypes has the side-effect of asserting that the
False,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,82,ptions.checkFunctions = CheckLevel.WARNING;
False,src/com/google/javascript/jscomp/WarningLevel.java,src/com/google/javascript/jscomp/WarningLevel.java,84,ptions.checkMethods = CheckLevel.WARNING;
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,2,* Copyright 2007 Google Inc.
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,19,import com.google.common.base.Pair;
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,20,import com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator;
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,21,import com.google.javascript.jscomp.CheckLevel;
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,23,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,26,* Tests {@link BasicErrorManager}.
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,30,public class BasicErrorManagerTest extends TestCase {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,31,private static final String NULL_SOURCE = null;
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,33,private LeveledJSErrorComparator comparator = new LeveledJSErrorComparator();
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,35,static final CheckLevel E = CheckLevel.ERROR;
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,37,private static final DiagnosticType FOO_TYPE =
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,38,"DiagnosticType.error(""TEST_FOO"", ""Foo"");"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,40,private static final DiagnosticType JOO_TYPE =
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,41,"DiagnosticType.error(""TEST_JOO"", ""Joo"");"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,43,public void testOrderingBothNull() throws Exception {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,44,"assertEquals(0, comparator.compare(null, null));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,47,public void testOrderingSourceName1() throws Exception {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,48,"JSError e1 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,49,"JSError e2 = JSError.make(""a"", -1, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,51,"assertSmaller(error(e1), error(e2));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,54,public void testOrderingSourceName2() throws Exception {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,55,"JSError e1 = JSError.make(""a"", -1, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,56,"JSError e2 = JSError.make(""b"", -1, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,58,"assertSmaller(error(e1), error(e2));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,61,public void testOrderingLineno1() throws Exception {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,62,"JSError e1 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,63,"JSError e2 = JSError.make(NULL_SOURCE, 2, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,65,"assertSmaller(error(e1), error(e2));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,68,public void testOrderingLineno2() throws Exception {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,69,"JSError e1 = JSError.make(NULL_SOURCE, 8, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,70,"JSError e2 = JSError.make(NULL_SOURCE, 56, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,71,"assertSmaller(error(e1), error(e2));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,74,public void testOrderingCheckLevel() throws Exception {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,75,"JSError e1 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,76,"JSError e2 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,78,"assertSmaller(warning(e1), error(e2));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,81,public void testOrderingCharno1() throws Exception {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,82,"JSError e1 = JSError.make(NULL_SOURCE, 5, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,83,"JSError e2 = JSError.make(NULL_SOURCE, 5, 2, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,85,"assertSmaller(error(e1), error(e2));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,86,// CheckLevel preempts charno comparison
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,87,"assertSmaller(warning(e1), error(e2));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,90,public void testOrderingCharno2() throws Exception {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,91,"JSError e1 = JSError.make(NULL_SOURCE, 8, 7, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,92,"JSError e2 = JSError.make(NULL_SOURCE, 8, 5, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,94,"assertSmaller(error(e2), error(e1));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,95,// CheckLevel preempts charno comparison
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,96,"assertSmaller(warning(e2), error(e1));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,99,public void testOrderingDescription() throws Exception {
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,100,"JSError e1 = JSError.make(NULL_SOURCE, -1, -1, FOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,101,"JSError e2 = JSError.make(NULL_SOURCE, -1, -1, JOO_TYPE);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,103,"assertSmaller(error(e1), error(e2));"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,106,"private Pair<JSError, CheckLevel> error(JSError e) {"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,107,"return Pair.of(e, CheckLevel.ERROR);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,110,"private Pair<JSError, CheckLevel> warning(JSError e) {"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,111,"return Pair.of(e, CheckLevel.WARNING);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,114,"private void assertSmaller(Pair<JSError, CheckLevel> p1,"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,115,"Pair<JSError, CheckLevel> p2) {"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,116,"int p1p2 = comparator.compare(p1, p2);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,117,"assertTrue(Integer.toString(p1p2), p1p2 < 0);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,118,"int p2p1 = comparator.compare(p2, p1);"
True,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,test/com/google/javascript/jscomp/BasicErrorManagerTest.java,119,"assertTrue(Integer.toString(p2p1), p2p1 > 0);"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,19,import com.google.common.base.Predicate;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,20,import com.google.common.base.Predicates;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,21,import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,22,import com.google.javascript.jscomp.graph.DiGraph;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,23,import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,24,import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,26,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,29,* Tests for {@link CheckPathsBetweenNodes}.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,33,public class CheckPathsBetweenNodesTest extends TestCase {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,36,* Predicate satisfied by strings with a given prefix.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,38,private static class PrefixPredicate implements Predicate<String> {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,39,String prefix;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,41,PrefixPredicate(String prefix) {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,42,this.prefix = prefix;
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,45,@Override
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,46,public boolean apply(String input) {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,47,return input.startsWith(prefix);
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,51,private static final Predicate<String> FALSE = Predicates.alwaysFalse();
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,53,"private static final Predicate<DiGraphEdge<String, String>> ALL_EDGE ="
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,54,Predicates.alwaysTrue();
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,56,"private static final Predicate<DiGraphEdge<String, String>> NO_EDGE ="
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,57,Predicates.alwaysFalse();
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,59,/** Tests straight-line graphs. */
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,60,public void testSimple() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,61,"DiGraph<String, String> g = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,62,"g.createDirectedGraphNode(""a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,63,"g.createDirectedGraphNode(""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,64,"g.createDirectedGraphNode(""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,65,"g.createDirectedGraphNode(""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,67,"g.connect(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,68,"g.connect(""b"", ""-"", ""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,69,"g.connect(""c"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,70,"g.connect(""a"", ""x"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,72,"CheckPathsBetweenNodes<String, String> test = null;"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,74,// Simple case: the sole path from a to d has a matching node.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,75,"assertGood(createTest(g, ""a"", ""d"", Predicates.equalTo(""b""), edgeIs(""-"")));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,76,//Test two edge cases where satisfying node is the first and last node on
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,77,// the path.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,78,"assertGood(createTest(g, ""a"", ""d"", Predicates.equalTo(""a""), edgeIs(""-"")));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,79,"assertGood(createTest(g, ""a"", ""d"", Predicates.equalTo(""d""), edgeIs(""-"")));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,81,"// Traverse no edges, so no paths."
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,82,"assertGood(createTest(g, ""a"", ""d"", FALSE, NO_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,84,// No path with matching edges contains b.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,85,"assertBad(createTest(g, ""a"", ""d"", Predicates.equalTo(""b""), edgeIs(""x"")));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,89,* Tests a graph where some paths between the nodes are valid and others
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,90,* are invalid.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,92,public void testSomeValidPaths() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,93,"DiGraph<String, String> g = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,94,"g.createDirectedGraphNode(""a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,95,"g.createDirectedGraphNode(""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,96,"g.createDirectedGraphNode(""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,97,"g.createDirectedGraphNode(""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,98,"g.createDirectedGraphNode(""e"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,100,"g.connect(""a"", ""1"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,101,"g.connect(""b"", ""2"", ""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,102,"g.connect(""b"", ""3"", ""e"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,103,"g.connect(""e"", ""4"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,104,"g.connect(""c"", ""5"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,106,"assertBad(createTest(g, ""a"", ""d"", Predicates.equalTo(""c""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,107,"assertBad(createTest(g, ""a"", ""d"", Predicates.equalTo(""z""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,110,/** Tests a graph with many valid paths. */
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,111,public void testManyValidPaths() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,112,"DiGraph<String, String> g = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,113,"g.createDirectedGraphNode(""a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,114,"g.createDirectedGraphNode(""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,115,"g.createDirectedGraphNode(""c1"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,116,"g.createDirectedGraphNode(""c2"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,117,"g.createDirectedGraphNode(""c3"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,118,"DiGraphNode<String, String> d = g.createDirectedGraphNode(""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,120,"g.connect(""a"",  ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,121,"g.connect(""b"",  ""-"", ""c1"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,122,"g.connect(""b"",  ""-"", ""c2"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,123,"g.connect(""c2"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,124,"g.connect(""c1"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,125,"g.connect(""a"",  ""-"", ""c3"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,126,"g.connect(""c3"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,128,"assertGood(createTest(g, ""a"", ""d"", new PrefixPredicate(""c""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,131,/** Tests a graph with some cycles. */
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,132,public void testCycles1() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,133,"DiGraph<String, String> g = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,134,"g.createDirectedGraphNode(""a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,135,"g.createDirectedGraphNode(""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,136,"g.createDirectedGraphNode(""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,137,"g.createDirectedGraphNode(""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,138,"g.createDirectedGraphNode(""e"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,139,"g.createDirectedGraphNode(""f"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,141,"g.connect(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,142,"g.connect(""b"", ""-"", ""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,143,"g.connect(""c"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,144,"g.connect(""d"", ""-"", ""e"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,145,"g.connect(""e"", ""-"", ""f"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,146,"g.connect(""f"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,148,"assertGood(createTest(g, ""a"", ""e"", Predicates.equalTo(""b""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,149,"assertGood(createTest(g, ""a"", ""e"", Predicates.equalTo(""c""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,150,"assertGood(createTest(g, ""a"", ""e"", Predicates.equalTo(""d""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,151,"assertGood(createTest(g, ""a"", ""e"", Predicates.equalTo(""e""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,152,"assertBad(createTest(g, ""a"", ""e"", Predicates.equalTo(""f""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,156,* Tests another graph with cycles. The topology of this graph was inspired
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,157,* by a control flow graph that was being incorrectly analyzed by an early
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,158,* version of CheckPathsBetweenNodes.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,160,public void testCycles2() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,161,"DiGraph<String, String> g = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,162,"g.createDirectedGraphNode(""a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,163,"g.createDirectedGraphNode(""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,164,"g.createDirectedGraphNode(""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,165,"g.createDirectedGraphNode(""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,167,"g.connect(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,168,"g.connect(""b"", ""-"", ""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,169,"g.connect(""c"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,170,"g.connect(""b"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,172,"assertGood(createTest(g, ""a"", ""d"", Predicates.equalTo(""a""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,173,"assertBad(createTest(g, ""a"", ""d"", Predicates.equalTo(""z""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,177,* Tests another graph with cycles. The topology of this graph was inspired
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,178,* by a control flow graph that was being incorrectly analyzed by an early
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,179,* version of CheckPathsBetweenNodes.
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,181,public void testCycles3() {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,182,"DiGraph<String, String> g = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,183,"g.createDirectedGraphNode(""a"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,184,"g.createDirectedGraphNode(""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,185,"g.createDirectedGraphNode(""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,186,"g.createDirectedGraphNode(""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,188,"g.connect(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,189,"g.connect(""b"", ""-"", ""c"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,190,"g.connect(""c"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,191,"g.connect(""b"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,192,"g.connect(""c"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,194,"assertGood(createTest(g, ""a"", ""d"", Predicates.equalTo(""a""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,195,"assertBad(createTest(g, ""a"", ""d"", Predicates.equalTo(""z""), ALL_EDGE));"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,198,"private static <N, E> void assertGood(CheckPathsBetweenNodes<N, E> test) {"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,199,assertTrue(test.allPathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,202,"private static <N, E> void assertBad(CheckPathsBetweenNodes<N, E> test) {"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,203,assertFalse(test.allPathsSatisfyPredicate());
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,206,"private static CheckPathsBetweenNodes<String, String> createTest("
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,207,"DiGraph<String, String> graph,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,208,"String entry,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,209,"String exit,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,210,"Predicate<String> nodePredicate,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,211,"Predicate<DiGraphEdge<String, String>> edgePredicate) {"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,212,"return new CheckPathsBetweenNodes<String, String>(graph,"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,213,"graph.getDirectedGraphNode(entry), graph.getDirectedGraphNode(exit),"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,214,"nodePredicate, edgePredicate);"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,217,"private static Predicate<DiGraphEdge<String, String>>"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,218,edgeIs(final Object val) {
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,219,"return new Predicate<DiGraphEdge<String, String>>() {"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,220,@Override
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,221,"public boolean apply(DiGraphEdge<String, String> input) {"
True,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,test/com/google/javascript/jscomp/CheckPathsBetweenNodesTest.java,222,return input.getValue().equals(val);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,2,* Copyright 2007 Google Inc.
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,19,import com.google.javascript.rhino.jstype.JSType;
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,20,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,21,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,23,public class ClosureReverseAbstractInterpreterTest extends
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,24,CompilerTypeTestCase {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,26,public void testGoogIsDef1() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,27,"testClosureFunction(""goog.isDef"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,28,"createOptionalType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,29,"NUMBER_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,30,createOptionalType(NUMBER_TYPE));
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,33,public void testGoogIsDef2() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,34,"testClosureFunction(""goog.isDef"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,35,"createNullableType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,36,"createNullableType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,37,createNullableType(NUMBER_TYPE));
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,40,public void testGoogIsNull1() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,41,"testClosureFunction(""goog.isNull"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,42,"createOptionalType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,43,"NULL_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,44,createOptionalType(NUMBER_TYPE));
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,47,public void testGoogIsNull2() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,48,"testClosureFunction(""goog.isNull"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,49,"createNullableType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,50,"NULL_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,51,NUMBER_TYPE);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,54,public void testGoogIsDefAndNotNull1() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,55,"testClosureFunction(""goog.isDefAndNotNull"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,56,"createOptionalType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,57,"NUMBER_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,58,createOptionalType(NUMBER_TYPE));
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,61,public void testGoogIsDefAndNotNull2() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,62,"testClosureFunction(""goog.isDefAndNotNull"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,63,"createNullableType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,64,"NUMBER_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,65,createNullableType(NUMBER_TYPE));
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,68,public void testGoogIsDefAndNotNull3() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,69,"testClosureFunction(""goog.isDefAndNotNull"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,70,"createOptionalType(createNullableType(NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,71,"NUMBER_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,72,createOptionalType(createNullableType(NUMBER_TYPE)));
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,75,public void testGoogIsString1() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,76,"testClosureFunction(""goog.isString"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,77,"createNullableType(STRING_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,78,"STRING_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,79,NULL_TYPE);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,82,public void testGoogIsString2() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,83,"testClosureFunction(""goog.isString"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,84,"createNullableType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,85,"createNullableType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,86,createNullableType(NUMBER_TYPE));
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,89,public void testGoogIsBoolean1() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,90,"testClosureFunction(""goog.isBoolean"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,91,"createNullableType(BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,92,"BOOLEAN_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,93,NULL_TYPE);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,96,public void testGoogIsBoolean2() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,97,"testClosureFunction(""goog.isBoolean"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,98,"createUnionType(BOOLEAN_TYPE, STRING_TYPE, NO_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,99,"BOOLEAN_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,100,"createUnionType(STRING_TYPE, NO_OBJECT_TYPE));"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,103,public void testGoogIsNumber() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,104,"testClosureFunction(""goog.isNumber"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,105,"createNullableType(NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,106,"NUMBER_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,107,NULL_TYPE);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,110,public void testGoogIsFunction() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,111,"testClosureFunction(""goog.isFunction"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,112,"createNullableType(OBJECT_FUNCTION_TYPE),"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,113,"OBJECT_FUNCTION_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,114,NULL_TYPE);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,117,public void testGoogIsArray() throws Exception {
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,118,"testClosureFunction(""goog.isArray"","
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,119,"OBJECT_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,120,"ARRAY_TYPE,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,121,OBJECT_TYPE);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,124,"private void testClosureFunction(String function, JSType type,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,125,"JSType trueType, JSType falseType) {"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,126,// function(a) where a : type
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,127,"Node n = compiler.parseTestCode(""var a; "" + function + ""(a)"");"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,128,Node call = n.getLastChild().getLastChild();
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,129,Node name = call.getLastChild();
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,131,"Scope scope = new SyntacticScopeCreator(compiler).createScope(n, null);"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,132,FlowScope flowScope = LinkedFlowScope.createEntryLattice(scope);
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,134,"assertEquals(Token.CALL, call.getType());"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,135,"assertEquals(Token.NAME, name.getType());"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,137,GoogleCodingConvention convention = new GoogleCodingConvention();
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,138,"flowScope.inferSlotType(""a"", type);"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,139,ClosureReverseAbstractInterpreter rai =
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,140,"new ClosureReverseAbstractInterpreter(convention, registry);"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,142,// trueScope
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,143,"assertEquals(trueType,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,144,"rai.getPreciserScopeKnowingConditionOutcome(call, flowScope, true)"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,145,".getSlot(""a"").getType());"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,147,// falseScope
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,148,"assertEquals(falseType,"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,149,"rai.getPreciserScopeKnowingConditionOutcome(call, flowScope, false)"
True,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,150,".getSlot(""a"").getType());"
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,47,ublic void setUp() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,47,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,48,super.setUp();
False,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,54,ublic void tearDown() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,55,public void tearDown() throws Exception {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,60,AbstractCompilerRunner.FLAG_jscomp_off.resetForTest();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,61,AbstractCompilerRunner.FLAG_jscomp_warning.resetForTest();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,62,AbstractCompilerRunner.FLAG_jscomp_error.resetForTest();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,65,super.tearDown();
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,78,public void testTypeCheckOverride1() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,79,CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.VERBOSE);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,80,CompilerRunner.FLAG_jscomp_off.setForTest(
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,81,"Lists.newArrayList(""checkTypes""));"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,82,"testSame(""var x = x || {}; x.f = function() {}; x.f(3);"");"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,85,public void testTypeCheckOverride2() {
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,86,CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.QUIET);
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,87,CompilerRunner.FLAG_jscomp_warning.setForTest(
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,88,"Lists.newArrayList(""checkTypes""));"
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,89,"test(""var x = x || {}; x.f = function() {}; x.f(3);"","
True,test/com/google/javascript/jscomp/CompilerRunnerTest.java,test/com/google/javascript/jscomp/CompilerRunnerTest.java,90,TypeCheck.WRONG_ARGUMENT_COUNT);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,19,import static com.google.javascript.jscomp.ConcreteType.ALL;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,20,import static com.google.javascript.jscomp.ConcreteType.NONE;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,22,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,23,import com.google.common.collect.Maps;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,24,import com.google.common.collect.Sets;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,25,import com.google.javascript.jscomp.ConcreteType.ConcreteFunctionType;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,26,import com.google.javascript.jscomp.ConcreteType.ConcreteInstanceType;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,27,import com.google.javascript.jscomp.ConcreteType.ConcreteUnionType;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,28,import com.google.javascript.jscomp.ConcreteType.Factory;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,29,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,30,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,31,import com.google.javascript.rhino.jstype.FunctionType;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,32,import com.google.javascript.rhino.jstype.JSType;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,33,import com.google.javascript.rhino.jstype.JSTypeNative;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,34,import com.google.javascript.rhino.jstype.JSTypeRegistry;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,35,import com.google.javascript.rhino.jstype.ObjectType;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,36,import com.google.javascript.rhino.jstype.StaticScope;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,37,import com.google.javascript.rhino.jstype.StaticSlot;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,38,import com.google.javascript.rhino.testing.TestErrorReporter;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,40,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,42,import java.util.Arrays;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,43,import java.util.Collection;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,44,import java.util.List;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,45,import java.util.Map;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,49,* Unit test for the the subclasses of ConcreteType.
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,53,public class ConcreteTypeTest extends TestCase {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,54,private JSTypeRegistry typeRegistry;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,55,private JSType unknownType;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,56,private Factory factory;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,58,@Override
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,59,public void setUp() {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,60,"typeRegistry = new JSTypeRegistry(new TestErrorReporter(null, null));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,61,unknownType = typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,62,factory = new FakeFactory();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,65,private void checkEquality(List<ConcreteType> types) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,66,for (int i = 0; i < types.size(); ++i) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,67,for (int j = 0; j < types.size(); ++j) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,68,if (i == j) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,69,"assertEquals(types.get(i), types.get(j));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,70,} else {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,71,assertFalse(types.get(i).equals(types.get(j)));
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,77,public void testEquals() {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,78,"ConcreteFunctionType fun1 = createFunction(""fun1"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,79,"ConcreteFunctionType fun2 = createFunction(""fun2"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,80,ConcreteType obj1 = fun1.getInstanceType();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,81,ConcreteType obj2 = fun2.getInstanceType();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,82,"ConcreteType union1 = new ConcreteUnionType(fun1, fun2);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,83,"ConcreteType union2 = new ConcreteUnionType(fun1, obj1);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,84,"ConcreteType union3 = new ConcreteUnionType(fun1, obj1);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,86,"checkEquality(Lists.newArrayList(fun1, fun2, obj1, obj2,"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,87,"union1, union2));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,89,"assertEquals(union2, union3);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,92,public void testUnionWith() {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,93,"ConcreteFunctionType fun = createFunction(""fun"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,94,ConcreteType obj = fun.getInstanceType();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,95,"ConcreteType both = new ConcreteUnionType(fun, obj);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,97,assertTrue(fun.isSingleton());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,98,assertTrue(obj.isSingleton());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,99,assertFalse(both.isSingleton());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,100,assertFalse(NONE.isSingleton());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,101,assertFalse(ALL.isSingleton());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,103,"checkUnionWith(fun, NONE, fun);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,104,"checkUnionWith(fun, ALL, ALL);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,106,"checkUnionWith(fun, obj, both);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,107,"checkUnionWith(both, NONE, both);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,108,"checkUnionWith(both, ALL, ALL);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,111,"private void checkUnionWith(ConcreteType a, ConcreteType b, ConcreteType c) {"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,112,"assertEquals(a, a.unionWith(a));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,113,"assertEquals(b, b.unionWith(b));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,114,"assertEquals(c, a.unionWith(b));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,115,"assertEquals(c, b.unionWith(a));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,118,public void testIntersectionWith() {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,119,"ConcreteFunctionType fun = createFunction(""fun"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,120,"ConcreteFunctionType fun2 = createFunction(""fun2"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,121,ConcreteType obj = fun.getInstanceType();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,122,"ConcreteType both = new ConcreteUnionType(fun, obj);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,124,"assertEquals(NONE, fun.intersectWith(obj));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,125,"assertEquals(NONE, obj.intersectWith(fun));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,127,"assertEquals(fun, both.intersectWith(fun));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,128,"assertEquals(fun, fun.intersectWith(both));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,130,"assertEquals(NONE, NONE.intersectWith(both));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,131,"assertEquals(NONE, both.intersectWith(NONE));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,132,"assertEquals(NONE, fun.intersectWith(NONE));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,133,"assertEquals(NONE, NONE.intersectWith(fun));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,135,"assertEquals(NONE, both.intersectWith(fun2));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,137,"assertEquals(both, ALL.intersectWith(both));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,138,"assertEquals(both, both.intersectWith(ALL));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,139,"assertEquals(fun, ALL.intersectWith(fun));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,140,"assertEquals(fun, fun.intersectWith(ALL));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,141,"assertEquals(NONE, ALL.intersectWith(NONE));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,142,"assertEquals(NONE, NONE.intersectWith(ALL));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,145,public void testFunction() {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,146,"ConcreteFunctionType fun = createFunction(""fun"", ""a"", ""b"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,147,assertTrue(fun.isFunction());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,148,assertNotNull(fun.getCallSlot());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,149,assertNotNull(fun.getReturnSlot());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,150,assertNotNull(fun.getParameterSlot(0));
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,151,assertNotNull(fun.getParameterSlot(1));
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,152,assertNull(fun.getParameterSlot(2));
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,153,assertTrue(fun.getInstanceType().isInstance());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,156,public void testInstance() {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,157,"ConcreteInstanceType obj = createInstance(""MyObj"", ""a"", ""b"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,158,assertTrue(obj.isInstance());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,159,"assertNotNull(obj.getPropertySlot(""a""));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,160,"assertNotNull(obj.getPropertySlot(""b""));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,161,"assertNull(obj.getPropertySlot(""c""));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,163,// The prototype chain should be: MyObj -> MyObj.prototype -> Object ->
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,164,// Object.prototype -> {...}.prototype -> null.
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,165,for (int i = 0; i < 4; ++i) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,166,assertNotNull(obj = obj.getImplicitPrototype());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,167,assertTrue(obj.isInstance());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,169,assertNull(obj.getImplicitPrototype());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,172,public void testGetX() {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,173,"ConcreteFunctionType fun1 = createFunction(""fun1"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,174,"ConcreteFunctionType fun2 = createFunction(""fun2"");"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,175,ConcreteInstanceType obj1 = fun1.getInstanceType();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,176,ConcreteInstanceType obj2 = fun2.getInstanceType();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,177,ConcreteType union1 = fun1.unionWith(obj1);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,178,ConcreteType union2 =
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,179,union1.unionWith(fun2).unionWith(obj2);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,181,"assertEqualSets(Lists.newArrayList(), NONE.getFunctions());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,182,"assertEqualSets(Lists.newArrayList(), NONE.getInstances());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,183,"assertEqualSets(Lists.newArrayList(fun1), fun1.getFunctions());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,184,"assertEqualSets(Lists.newArrayList(), fun1.getInstances());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,185,"assertEqualSets(Lists.newArrayList(), obj1.getFunctions());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,186,"assertEqualSets(Lists.newArrayList(obj1), obj1.getInstances());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,188,"assertEqualSets(Lists.newArrayList(fun1), union1.getFunctions());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,189,"assertEqualSets(Lists.newArrayList(obj1), union1.getInstances());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,191,"assertEqualSets(Lists.newArrayList(fun1, fun2), union2.getFunctions());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,192,"assertEqualSets(Lists.newArrayList(obj1, obj2), union2.getInstances());"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,195,/** Checks that the two collections are equal as sets. */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,196,"private void assertEqualSets(Collection<?> first, Collection<?> second) {"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,197,"assertEquals(Sets.newHashSet(first), Sets.newHashSet(second));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,200,/** Creates a fake function with the given description. */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,201,private ConcreteFunctionType createFunction(
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,202,"String name, String... paramNames) {"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,203,Node args = new Node(Token.LP);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,204,for (int i = 0; i < paramNames.length; ++i) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,205,"args.addChildToBack(Node.newString(Token.NAME, paramNames[i]));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,208,"Node decl = new Node(Token.FUNCTION,"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,209,"Node.newString(Token.NAME, name),"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,210,"args,"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,211,new Node(Token.BLOCK));
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,213,JSType[] paramTypes = new JSType[paramNames.length];
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,214,"Arrays.fill(paramTypes, unknownType);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,215,decl.setJSType(
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,216,"typeRegistry.createConstructorType(name, decl, args, unknownType));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,218,"return new ConcreteFunctionType(factory, decl, null);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,221,/** Creates a fake instance with the given description. */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,222,private ConcreteInstanceType createInstance(
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,223,"String name, String... propNames) {"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,224,"ObjectType objType = typeRegistry.createObjectType(name, null,"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,225,"typeRegistry.createObjectType(name + "".prototype"", null, null));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,226,for (int i = 0; i < propNames.length; ++i) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,227,"objType.defineDeclaredProperty(propNames[i], unknownType, false);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,229,"return new ConcreteInstanceType(factory, objType);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,232,private class FakeFactory implements Factory {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,233,"private final Map<Node, ConcreteFunctionType> functionByDeclaration ="
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,234,Maps.newHashMap();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,235,"private final Map<FunctionType, ConcreteFunctionType> functionByJSType ="
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,236,Maps.newHashMap();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,237,"private final Map<ObjectType, ConcreteInstanceType> instanceByJSType ="
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,238,Maps.newHashMap();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,240,private final JSTypeRegistry registry = new JSTypeRegistry(
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,241,"new TestErrorReporter(null, null));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,243,public JSTypeRegistry getTypeRegistry() {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,244,return registry;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,247,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,248,public ConcreteFunctionType createConcreteFunction(
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,249,"Node decl, StaticScope<ConcreteType> parent) {"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,250,ConcreteFunctionType funcType = functionByDeclaration.get(decl);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,251,if (funcType == null) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,252,"functionByDeclaration.put(decl, funcType ="
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,253,"new ConcreteFunctionType(this, decl, parent));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,254,if (decl.getJSType() != null) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,255,"functionByJSType.put((FunctionType) decl.getJSType(), funcType);"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,258,return funcType;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,261,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,262,public ConcreteInstanceType createConcreteInstance(
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,263,ObjectType instanceType) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,264,ConcreteInstanceType instType = instanceByJSType.get(instanceType);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,265,if (instType == null) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,266,"instanceByJSType.put(instanceType,"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,267,"instType = new ConcreteInstanceType(this, instanceType));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,269,return instType;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,272,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,273,public ConcreteFunctionType getConcreteFunction(FunctionType functionType) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,274,return functionByJSType.get(functionType);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,277,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,278,public ConcreteInstanceType getConcreteInstance(ObjectType instanceType) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,279,return instanceByJSType.get(instanceType);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,282,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,283,public StaticScope<ConcreteType> createFunctionScope(
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,284,"Node decl, StaticScope<ConcreteType> parent) {"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,285,FakeScope scope = new FakeScope((FakeScope) parent);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,286,scope.addSlot(ConcreteFunctionType.CALL_SLOT_NAME);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,287,scope.addSlot(ConcreteFunctionType.THIS_SLOT_NAME);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,288,scope.addSlot(ConcreteFunctionType.RETURN_SLOT_NAME);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,289,for (Node n = decl.getFirstChild().getNext().getFirstChild();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,290,n != null;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,291,n = n.getNext()) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,292,scope.addSlot(n.getString());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,294,return scope;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,297,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,298,public StaticScope<ConcreteType> createInstanceScope(
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,299,ObjectType instanceType) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,300,FakeScope parentScope = null;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,301,if (instanceType.getImplicitPrototype() != null) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,302,ConcreteInstanceType prototype =
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,303,createConcreteInstance(instanceType.getImplicitPrototype());
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,304,parentScope = (FakeScope) prototype.getScope();
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,307,FakeScope scope = new FakeScope(parentScope);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,308,for (String propName : instanceType.getOwnPropertyNames()) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,309,scope.addSlot(propName);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,311,return scope;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,315,// TODO(user): move to a common place if it can be used elsewhere
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,316,private class FakeScope implements StaticScope<ConcreteType> {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,317,private final FakeScope parent;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,318,"private final Map<String, FakeSlot> slots = Maps.newHashMap();"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,320,FakeScope(FakeScope parent) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,321,this.parent = parent;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,324,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,325,public StaticScope<ConcreteType> getParentScope() { return parent; }
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,327,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,328,public StaticSlot<ConcreteType> getOwnSlot(String name) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,329,return slots.get(name);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,332,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,333,public StaticSlot<ConcreteType> getSlot(String name) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,334,if (slots.containsKey(name)) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,335,return slots.get(name);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,336,} else if (parent != null) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,337,return parent.getSlot(name);
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,338,} else {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,339,return null;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,343,/** @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,344,public ConcreteType getTypeOfThis() { return ConcreteType.ALL; }
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,346,void addSlot(String name) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,347,"slots.put(name, new FakeSlot(name));"
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,351,// TODO(user): move to a common place if it can be used elsewhere
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,352,private class FakeSlot implements StaticSlot<ConcreteType> {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,353,private final String name;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,355,FakeSlot(String name) {
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,356,this.name = name;
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,359,/* @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,360,public String getName() { return name; }
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,362,/* @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,363,public ConcreteType getType() { return ConcreteType.ALL; }
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,365,/* @inheritDoc */
True,test/com/google/javascript/jscomp/ConcreteTypeTest.java,test/com/google/javascript/jscomp/ConcreteTypeTest.java,366,public boolean isTypeInferred() { return true; }
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,19,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,20,import com.google.common.collect.Maps;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,21,import com.google.javascript.jscomp.ControlFlowGraph.Branch;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,22,import com.google.javascript.jscomp.DataFlowAnalysis.BinaryJoinOp;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,23,import com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,24,import com.google.javascript.jscomp.DataFlowAnalysis.BranchedForwardDataFlowAnalysis;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,25,import com.google.javascript.jscomp.DataFlowAnalysis.FlowState;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,26,import com.google.javascript.jscomp.DataFlowAnalysis.LatticeElement;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,27,import com.google.javascript.jscomp.DataFlowAnalysis.MaxIterationsExceededException;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,28,import com.google.javascript.jscomp.graph.GraphNode;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,29,import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,31,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,33,import java.util.Comparator;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,34,import java.util.List;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,35,import java.util.Map;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,38,* A test suite with a very small programming language that has two types of
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,39,* instructions: {@link BranchInstruction} and {@link ArithmeticInstruction}.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,40,* Test cases must construct a small program with these instructions and
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,41,* manually put each instruction in a {@code ControlFlowGraph}.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,45,public class DataFlowAnalysisTest extends TestCase {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,48,* Operations supported by ArithmeticInstruction.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,50,enum Operation {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,51,"ADD(""+""), SUB(""-""), DIV(""/""), MUL(""*"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,52,private final String stringRep;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,54,private Operation(String stringRep) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,55,this.stringRep = stringRep;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,58,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,59,public String toString() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,60,return stringRep;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,65,* A simple value.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,67,abstract static class Value {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,69,boolean isNumber() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,70,return this instanceof Number;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,73,boolean isVariable() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,74,return this instanceof Variable;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,79,* A variable.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,81,static class Variable extends Value {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,82,private String name;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,85,* Constructor.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,87,* @param n Name of the variable.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,89,Variable(String n) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,90,name = n;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,93,String getName() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,94,return name;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,97,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,98,public boolean equals(Object other) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,99,// Use the String's .equals()
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,100,if (!(other instanceof Variable)) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,101,return false;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,103,return ((Variable) other).name.equals(name);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,106,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,107,public int hashCode() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,108,return name.hashCode();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,111,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,112,public String toString() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,113,return this.name;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,118,* A number constant.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,120,static class Number extends Value {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,121,private int value;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,124,* Constructor
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,126,* @param v Value
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,128,Number(int v) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,129,value = v;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,132,int getValue() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,133,return value;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,136,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,137,public String toString() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,138,"return """" + value;"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,141,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,142,public int hashCode() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,143,return value;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,148,* An instruction of the dummy program.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,150,abstract static class Instruction {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,152,int order = 0;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,155,* Check whether this is an arithmetic instruction.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,157,* @return {@code true} if it is an arithmetic instruction.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,159,boolean isArithmetic() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,160,return this instanceof ArithmeticInstruction;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,164,* Check whether this is a branch instruction.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,166,* @return {@code true} if it is a branch instruction.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,168,boolean isBranch() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,169,return this instanceof BranchInstruction;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,174,* Basic arithmetic instruction that only takes the form of:
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,176,* <pre>
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,177,* Result = Operand1 operator Operand2
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,178,* </pre>
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,180,static class ArithmeticInstruction extends Instruction {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,181,private Operation operation;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,182,private Value operand1;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,183,private Value operand2;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,184,private Variable result;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,187,* Constructor
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,189,* @param res Result.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,190,* @param op1 First Operand.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,191,* @param o Operator.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,192,* @param op2 Second Operand.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,194,"ArithmeticInstruction(Variable res, int op1, Operation o, int op2) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,195,"this(res, new Number(op1), o, new Number(op2));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,199,* Constructor
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,201,* @param res Result.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,202,* @param op1 First Operand.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,203,* @param o Operator.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,204,* @param op2 Second Operand.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,206,"ArithmeticInstruction(Variable res, Value op1, Operation o, int op2) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,207,"this(res, op1, o, new Number(op2));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,211,* Constructor
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,213,* @param res Result.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,214,* @param op1 First Operand.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,215,* @param o Operator.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,216,* @param op2 Second Operand.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,218,"ArithmeticInstruction(Variable res, int op1, Operation o, Value op2) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,219,"this(res, new Number(op1), o, op2);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,223,* Constructor
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,225,* @param res Result.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,226,* @param op1 First Operand.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,227,* @param o Operator.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,228,* @param op2 Second Operand.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,230,"ArithmeticInstruction(Variable res, Value op1, Operation o, Value op2) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,231,result = res;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,232,operand1 = op1;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,233,operand2 = op2;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,234,operation = o;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,237,Operation getOperator() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,238,return operation;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,241,void setOperator(Operation op) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,242,this.operation = op;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,245,Value getOperand1() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,246,return operand1;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,249,void setOperand1(Value operand1) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,250,this.operand1 = operand1;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,253,Value getOperand2() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,254,return operand2;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,257,void setOperand2(Value operand2) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,258,this.operand2 = operand2;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,261,Variable getResult() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,262,return result;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,265,void setResult(Variable result) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,266,this.result = result;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,269,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,270,public String toString() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,271,StringBuilder out = new StringBuilder();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,272,out.append(result);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,273,"out.append("" = "");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,274,out.append(operand1);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,275,out.append(operation);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,276,out.append(operand2);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,277,return out.toString();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,280,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,281,public int hashCode() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,282,return toString().hashCode();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,286,public static ArithmeticInstruction
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,287,"newAssignNumberToVariableInstruction(Variable res, int num) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,288,"return new ArithmeticInstruction(res, num, Operation.ADD, 0);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,291,public static ArithmeticInstruction
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,292,"newAssignVariableToVariableInstruction(Variable lhs, Variable rhs) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,293,"return new ArithmeticInstruction(lhs, rhs, Operation.ADD, 0);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,297,* Branch instruction based on a {@link Value} as a condition.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,299,static class BranchInstruction extends Instruction {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,300,private Value condition;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,302,BranchInstruction(Value cond) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,303,condition = cond;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,306,Value getCondition() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,307,return condition;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,310,void setCondition(Value condition) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,311,this.condition = condition;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,316,* A lattice to represent constant states. Each variable of the program will
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,317,* have a lattice defined as:
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,319,* <pre>
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,320,*        TOP
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,322,*  0  1 2 3 ..... MAX_VALUE
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,324,*       BOTTOM
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,325,* </pre>
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,327,* Where BOTTOM represents the variable is not a constant.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,328,* <p>
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,329,* This class will represent a product lattice of each variable's lattice. The
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,330,* whole lattice is store in a {@code HashMap}. If variable {@code x} is
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,331,* defined to be constant 10. The map will contain the value 10 with the
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,332,"* variable {@code x} as key. Otherwise, {@code x} is not a constant."
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,334,private static class ConstPropLatticeElement implements LatticeElement {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,335,"private final Map<Variable, Integer> constMap;"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,336,private final boolean isTop;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,339,* Constructor.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,341,* @param isTop To define if the lattice is top.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,342,* @param constMap A map from name to constant variable.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,344,ConstPropLatticeElement(
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,345,"boolean isTop, Map<Variable, Integer> constMap) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,346,this.isTop = isTop;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,347,this.constMap = constMap;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,350,ConstPropLatticeElement(boolean isTop) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,351,this.isTop = isTop;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,352,this.constMap = Maps.newHashMap();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,356,* Create a lattice where every variable is defined to be not constant.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,358,ConstPropLatticeElement() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,359,this(false);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,362,ConstPropLatticeElement(ConstPropLatticeElement other) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,363,this.isTop = other.isTop;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,364,this.constMap = Maps.newHashMap(other.constMap);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,367,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,368,public String toString() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,369,if (isTop) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,370,"return ""TOP"";"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,372,StringBuilder out = new StringBuilder();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,374,"out.append(""{"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,375,for (Variable var : constMap.keySet()) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,376,out.append(var);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,377,"out.append(""="");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,378,out.append(constMap.get(var));
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,379,"out.append("" "");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,381,"out.append(""}"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,382,return out.toString();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,385,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,386,public boolean equals(Object other) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,387,if (other instanceof ConstPropLatticeElement) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,388,ConstPropLatticeElement otherLattice = (ConstPropLatticeElement) other;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,389,return (this.isTop == otherLattice.isTop) &&
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,390,this.constMap.equals(otherLattice.constMap);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,392,return false;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,396,private static class ConstPropJoinOp
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,397,extends BinaryJoinOp<ConstPropLatticeElement> {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,399,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,400,"public ConstPropLatticeElement apply(ConstPropLatticeElement a,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,401,ConstPropLatticeElement b) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,402,ConstPropLatticeElement result = new ConstPropLatticeElement();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,403,// By the definition of TOP of the lattice.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,404,if (a.isTop) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,405,return new ConstPropLatticeElement(a);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,407,if (b.isTop) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,408,return new ConstPropLatticeElement(b);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,410,// Do the join for each variable's lattice.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,411,for (Variable var : a.constMap.keySet()) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,412,if (b.constMap.containsKey(var)) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,413,Integer number = b.constMap.get(var);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,415,// The result will contain that variable as a known constant
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,416,// if both lattice has that variable the same constant.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,417,if (a.constMap.get(var).equals(number)) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,418,"result.constMap.put(var, number);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,422,return result;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,427,* A simple forward constant propagation.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,429,static class DummyConstPropagation extends
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,430,"DataFlowAnalysis<Instruction, ConstPropLatticeElement> {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,433,* Constructor.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,435,* @param targetCfg Control Flow Graph.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,437,DummyConstPropagation(ControlFlowGraph<Instruction> targetCfg) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,438,"super(targetCfg, new ConstPropJoinOp());"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,441,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,442,boolean isForward() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,443,return true;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,446,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,447,"ConstPropLatticeElement flowThrough(Instruction node,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,448,ConstPropLatticeElement input) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,449,if (node.isBranch()) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,450,return new ConstPropLatticeElement(input);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,451,} else {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,452,"return flowThroughArithmeticInstruction((ArithmeticInstruction) node,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,453,input);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,457,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,458,ConstPropLatticeElement createEntryLattice() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,459,return new ConstPropLatticeElement();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,462,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,463,ConstPropLatticeElement createInitialEstimateLattice() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,464,return new ConstPropLatticeElement(true);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,468,static ConstPropLatticeElement flowThroughArithmeticInstruction(
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,469,"ArithmeticInstruction aInst, ConstPropLatticeElement input) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,471,ConstPropLatticeElement out = new ConstPropLatticeElement(input);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,472,"// Try to see if left is a number. If it is a variable, it might already"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,473,// be a constant coming in.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,474,Integer leftConst = null;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,475,if (aInst.operand1.isNumber()) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,476,leftConst = ((Number) aInst.operand1).value;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,477,} else {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,478,if (input.constMap.containsKey(aInst.operand1)) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,479,leftConst = input.constMap.get(aInst.operand1);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,483,// Do the same thing to the right.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,484,Integer rightConst = null;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,485,if (aInst.operand2.isNumber()) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,486,rightConst = ((Number) aInst.operand2).value;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,487,} else {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,488,if (input.constMap.containsKey(aInst.operand2)) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,489,rightConst = input.constMap.get(aInst.operand2);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,493,// If both are known constant we can perform the operation.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,494,if (leftConst != null && rightConst != null) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,495,Integer constResult = null;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,496,if (aInst.operation == Operation.ADD) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,497,constResult = leftConst.intValue() + rightConst.intValue();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,498,} else if (aInst.operation == Operation.SUB) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,499,constResult = leftConst.intValue() - rightConst.intValue();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,500,} else if (aInst.operation == Operation.MUL) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,501,constResult = leftConst.intValue() * rightConst.intValue();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,502,} else if (aInst.operation == Operation.DIV) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,503,constResult = leftConst.intValue() / rightConst.intValue();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,505,// Put it in the map. (Possibly replacing the existing constant value)
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,506,"out.constMap.put(aInst.result, constResult);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,507,} else {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,508,// If we cannot find a constant for it
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,509,out.constMap.remove(aInst.result);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,511,return out;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,514,public void testSimpleIf() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,515,// if (a) { b = 1; } else { b = 1; } c = b;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,516,"Variable a = new Variable(""a"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,517,"Variable b = new Variable(""b"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,518,"Variable c = new Variable(""c"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,519,Instruction inst1 = new BranchInstruction(a);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,520,"Instruction inst2 = newAssignNumberToVariableInstruction(b, 1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,521,"Instruction inst3 = newAssignNumberToVariableInstruction(b, 1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,522,"Instruction inst4 = newAssignVariableToVariableInstruction(c, b);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,523,ControlFlowGraph<Instruction> cfg =
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,524,new ControlFlowGraph<Instruction>(inst1);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,525,"GraphNode<Instruction, Branch> n1 = cfg.createNode(inst1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,526,"GraphNode<Instruction, Branch> n2 = cfg.createNode(inst2);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,527,"GraphNode<Instruction, Branch> n3 = cfg.createNode(inst3);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,528,"GraphNode<Instruction, Branch> n4 = cfg.createNode(inst4);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,529,"cfg.connect(inst1, ControlFlowGraph.Branch.ON_FALSE, inst2);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,530,"cfg.connect(inst1, ControlFlowGraph.Branch.ON_TRUE, inst3);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,531,"cfg.connect(inst2, ControlFlowGraph.Branch.UNCOND, inst4);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,532,"cfg.connect(inst3, ControlFlowGraph.Branch.UNCOND, inst4);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,534,DummyConstPropagation constProp = new DummyConstPropagation(cfg);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,535,constProp.analyze();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,537,// We cannot conclude anything from if (a).
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,538,"verifyInHas(n1, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,539,"verifyInHas(n1, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,540,"verifyInHas(n1, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,541,"verifyOutHas(n1, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,542,"verifyOutHas(n1, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,543,"verifyOutHas(n1, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,545,// We can conclude b = 1 after the instruction.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,546,"verifyInHas(n2, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,547,"verifyInHas(n2, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,548,"verifyInHas(n2, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,549,"verifyOutHas(n2, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,550,"verifyOutHas(n2, b, 1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,551,"verifyOutHas(n2, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,553,// Same as above.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,554,"verifyInHas(n3, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,555,"verifyInHas(n3, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,556,"verifyInHas(n3, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,557,"verifyOutHas(n3, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,558,"verifyOutHas(n3, b, 1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,559,"verifyOutHas(n3, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,561,// After the merge we should still have b = 1.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,562,"verifyInHas(n4, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,563,"verifyInHas(n4, b, 1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,564,"verifyInHas(n4, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,565,"verifyOutHas(n4, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,566,// After the instruction both b and c are 1.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,567,"verifyOutHas(n4, b, 1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,568,"verifyOutHas(n4, c, 1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,571,public void testSimpleLoop() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,572,// a = 0; do { a = a + 1 } while (b); c = a;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,573,"Variable a = new Variable(""a"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,574,"Variable b = new Variable(""b"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,575,"Variable c = new Variable(""c"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,576,"Instruction inst1 = newAssignNumberToVariableInstruction(a, 0);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,577,"Instruction inst2 = new ArithmeticInstruction(a, a, Operation.ADD, 1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,578,Instruction inst3 = new BranchInstruction(b);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,579,"Instruction inst4 = newAssignVariableToVariableInstruction(c, a);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,580,ControlFlowGraph<Instruction> cfg =
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,581,new ControlFlowGraph<Instruction>(inst1);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,582,"GraphNode<Instruction, Branch> n1 = cfg.createNode(inst1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,583,"GraphNode<Instruction, Branch> n2 = cfg.createNode(inst2);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,584,"GraphNode<Instruction, Branch> n3 = cfg.createNode(inst3);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,585,"GraphNode<Instruction, Branch> n4 = cfg.createNode(inst4);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,586,"cfg.connect(inst1, ControlFlowGraph.Branch.UNCOND, inst2);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,587,"cfg.connect(inst2, ControlFlowGraph.Branch.UNCOND, inst3);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,588,"cfg.connect(inst3, ControlFlowGraph.Branch.ON_TRUE, inst2);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,589,"cfg.connect(inst3, ControlFlowGraph.Branch.ON_FALSE, inst4);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,591,DummyConstPropagation constProp = new DummyConstPropagation(cfg);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,592,// This will also show that the framework terminates properly.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,593,constProp.analyze();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,595,// a = 0 is the only thing we know.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,596,"verifyInHas(n1, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,597,"verifyInHas(n1, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,598,"verifyInHas(n1, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,599,"verifyOutHas(n1, a, 0);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,600,"verifyOutHas(n1, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,601,"verifyOutHas(n1, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,603,"// Nothing is provable in this program, so confirm that we haven't"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,604,"// erroneously ""proven"" something."
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,605,"verifyInHas(n2, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,606,"verifyInHas(n2, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,607,"verifyInHas(n2, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,608,"verifyOutHas(n2, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,609,"verifyOutHas(n2, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,610,"verifyOutHas(n2, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,612,"verifyInHas(n3, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,613,"verifyInHas(n3, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,614,"verifyInHas(n3, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,615,"verifyOutHas(n3, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,616,"verifyOutHas(n3, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,617,"verifyOutHas(n3, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,619,"verifyInHas(n4, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,620,"verifyInHas(n4, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,621,"verifyInHas(n4, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,622,"verifyOutHas(n4, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,623,"verifyOutHas(n4, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,624,"verifyOutHas(n4, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,627,public void testLatticeArrayMinimizationWhenMidpointIsEven() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,628,"assertEquals(6, DataFlowAnalysis.BinaryJoinOp.computeMidPoint(12));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,631,public void testLatticeArrayMinimizationWhenMidpointRoundsDown() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,632,"assertEquals(8, DataFlowAnalysis.BinaryJoinOp.computeMidPoint(18));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,635,public void testLatticeArrayMinimizationWithTwoElements() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,636,"assertEquals(1, DataFlowAnalysis.BinaryJoinOp.computeMidPoint(2));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,641,* A simple forward constant propagation.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,643,static class BranchedDummyConstPropagation extends
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,644,"BranchedForwardDataFlowAnalysis<Instruction, ConstPropLatticeElement> {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,646,BranchedDummyConstPropagation(ControlFlowGraph<Instruction> targetCfg) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,647,"super(targetCfg, new ConstPropJoinOp());"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,650,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,651,"ConstPropLatticeElement flowThrough(Instruction node,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,652,ConstPropLatticeElement input) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,653,if (node.isArithmetic()) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,654,return flowThroughArithmeticInstruction(
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,655,"(ArithmeticInstruction) node, input);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,656,} else {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,657,return new ConstPropLatticeElement(input);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,661,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,662,"List<ConstPropLatticeElement> branchedFlowThrough(Instruction node,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,663,ConstPropLatticeElement input) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,664,List<ConstPropLatticeElement> result = Lists.newArrayList();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,665,"List<DiGraphEdge<Instruction, Branch>> outEdges ="
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,666,getCfg().getOutEdges(node);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,667,if (node.isArithmetic()) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,668,assertTrue(outEdges.size() < 2);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,669,ConstPropLatticeElement aResult = flowThroughArithmeticInstruction(
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,670,"(ArithmeticInstruction) node, input);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,671,"for (DiGraphEdge<Instruction, Branch> _ : outEdges) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,672,result.add(aResult);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,674,} else {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,675,BranchInstruction branchInst = (BranchInstruction) node;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,676,"for (DiGraphEdge<Instruction, Branch> branch : outEdges) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,677,ConstPropLatticeElement edgeResult =
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,678,new ConstPropLatticeElement(input);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,679,if (branch.getValue() == Branch.ON_FALSE &&
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,680,branchInst.getCondition().isVariable()) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,681,"edgeResult.constMap.put((Variable) branchInst.getCondition(), 0);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,683,result.add(edgeResult);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,686,return result;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,689,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,690,ConstPropLatticeElement createEntryLattice() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,691,return new ConstPropLatticeElement();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,694,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,695,ConstPropLatticeElement createInitialEstimateLattice() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,696,return new ConstPropLatticeElement(true);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,700,public void testBranchedSimpleIf() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,701,// if (a) { a = 0; } else { b = 0; } c = b;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,702,"Variable a = new Variable(""a"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,703,"Variable b = new Variable(""b"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,704,"Variable c = new Variable(""c"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,705,Instruction inst1 = new BranchInstruction(a);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,706,"Instruction inst2 = newAssignNumberToVariableInstruction(a, 0);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,707,"Instruction inst3 = newAssignNumberToVariableInstruction(b, 0);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,708,"Instruction inst4 = newAssignVariableToVariableInstruction(c, b);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,709,ControlFlowGraph<Instruction> cfg =
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,710,new ControlFlowGraph<Instruction>(inst1);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,711,"GraphNode<Instruction, Branch> n1 = cfg.createNode(inst1);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,712,"GraphNode<Instruction, Branch> n2 = cfg.createNode(inst2);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,713,"GraphNode<Instruction, Branch> n3 = cfg.createNode(inst3);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,714,"GraphNode<Instruction, Branch> n4 = cfg.createNode(inst4);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,715,"cfg.connect(inst1, ControlFlowGraph.Branch.ON_TRUE, inst2);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,716,"cfg.connect(inst1, ControlFlowGraph.Branch.ON_FALSE, inst3);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,717,"cfg.connect(inst2, ControlFlowGraph.Branch.UNCOND, inst4);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,718,"cfg.connect(inst3, ControlFlowGraph.Branch.UNCOND, inst4);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,720,BranchedDummyConstPropagation constProp =
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,721,new BranchedDummyConstPropagation(cfg);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,722,constProp.analyze();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,724,// We cannot conclude anything from if (a).
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,725,"verifyBranchedInHas(n1, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,726,"verifyBranchedInHas(n1, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,727,"verifyBranchedInHas(n1, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,729,// Nothing is known on the true branch.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,730,"verifyBranchedInHas(n2, a, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,731,"verifyBranchedInHas(n2, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,732,"verifyBranchedInHas(n2, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,734,// Verify that we have a = 0 on the false branch.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,735,"verifyBranchedInHas(n3, a, 0);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,736,"verifyBranchedInHas(n3, b, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,737,"verifyBranchedInHas(n3, c, null);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,739,// After the merge we should still have a = 0.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,740,"verifyBranchedInHas(n4, a, 0);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,743,public void testMaxIterationsExceededException() {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,744,final int MAX_STEP = 10;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,745,"Variable a = new Variable(""a"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,746,"Instruction inst1 = new ArithmeticInstruction(a, a, Operation.ADD, a);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,747,ControlFlowGraph<Instruction> cfg =
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,748,new ControlFlowGraph<Instruction>(inst1) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,749,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,750,"public Comparator<DiGraphNode<Instruction, Branch>>"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,751,getOptionalNodeComparator(boolean isForward) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,752,"return new Comparator<DiGraphNode<Instruction, Branch>>() {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,753,@Override
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,754,"public int compare(DiGraphNode<Instruction, Branch> o1,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,755,"DiGraphNode<Instruction, Branch> o2) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,756,return o1.getValue().order - o2.getValue().order;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,761,cfg.createNode(inst1);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,763,"// We have MAX_STEP + 1 nodes, it is impossible to finish the analysis with"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,764,// MAX_STEP number of steps.
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,765,for (int i = 0; i < MAX_STEP + 1; i++) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,766,"Instruction inst2 = new ArithmeticInstruction(a, a, Operation.ADD, a);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,767,cfg.createNode(inst2);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,768,inst2.order = i + 1;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,769,"cfg.connect(inst1, ControlFlowGraph.Branch.UNCOND, inst2);"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,770,inst1 = inst2;
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,772,DummyConstPropagation constProp = new DummyConstPropagation(cfg);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,773,try {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,774,constProp.analyze(MAX_STEP);
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,775,"fail(""Expected MaxIterationsExceededException to be thrown."");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,776,} catch (MaxIterationsExceededException e) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,777,"assertEquals(e.getMessage(), ""Analysis did not terminate after """
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,778,"+ MAX_STEP + "" iterations"");"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,782,"static void verifyInHas(GraphNode<Instruction, Branch> node, Variable var,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,783,Integer constant) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,784,FlowState<ConstPropLatticeElement> fState = node.getAnnotation();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,785,"assertEquals(constant, fState.getIn().constMap.get(var));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,788,"static void verifyOutHas(GraphNode<Instruction, Branch> node, Variable var,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,789,Integer constant) {
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,790,FlowState<ConstPropLatticeElement> fState = node.getAnnotation();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,791,"assertEquals(constant, fState.getOut().constMap.get(var));"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,794,"static void verifyBranchedInHas(GraphNode<Instruction, Branch> node,"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,795,"Variable var, Integer constant) {"
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,796,BranchedFlowState<ConstPropLatticeElement> fState = node.getAnnotation();
True,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,test/com/google/javascript/jscomp/DataFlowAnalysisTest.java,797,"assertEquals(constant, fState.getIn().constMap.get(var));"
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,2,* Copyright 2009 Google Inc.
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,19,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,22,* Tests for DiagnosticGroup.
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,25,public class DiagnosticGroupTest extends TestCase {
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,27,public void testRegistration() throws Exception {
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,28,DiagnosticGroups dg = new DiagnosticGroups();
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,29,"assertEquals(DiagnosticGroups.DEPRECATED,"
True,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,test/com/google/javascript/jscomp/DiagnosticGroupTest.java,30,"dg.forName(""deprecated""));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,2,* Copyright 2007 Google Inc.
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,19,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,20,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,22,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,24,public class DotFormatterTest extends TestCase {
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,26,* Tests that keys are assigned sequentially.
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,28,public void testKeyAssignementSequential() throws Exception {
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,29,DotFormatter dot = DotFormatter.newInstanceForTesting();
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,30,"assertEquals(0, dot.key(new Node(Token.BLOCK)));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,31,"assertEquals(1, dot.key(new Node(Token.BLOCK)));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,32,"assertEquals(2, dot.key(new Node(Token.BLOCK)));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,33,"assertEquals(3, dot.key(new Node(Token.BLOCK)));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,34,"assertEquals(4, dot.key(new Node(Token.BLOCK)));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,38,* Tests that keys are assigned once per node.
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,40,public void testKeyAssignementOncePerNode() throws Exception {
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,41,DotFormatter dot = DotFormatter.newInstanceForTesting();
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,42,Node node0 = new Node(Token.BLOCK);
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,43,Node node1 = new Node(Token.BLOCK);
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,44,Node node2 = new Node(Token.BLOCK);
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,46,"assertEquals(0, dot.key(node0));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,47,"assertEquals(1, dot.key(node1));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,48,"assertEquals(2, dot.key(node2));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,49,"assertEquals(0, dot.key(node0));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,50,"assertEquals(1, dot.key(node1));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,51,"assertEquals(2, dot.key(node2));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,55,* Tests the formatting (simple tree).
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,57,public void testToDotSimple() throws Exception {
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,58,Node ast = new Node(Token.BITOR);
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,60,"String expected = ""digraph AST {\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,61,"""  node [color=lightblue2, style=filled];\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,62,"""  node0 [label=\""BITOR\""];\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,63,"""}\n"";"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,64,"test(expected, ast);"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,68,* Tests the formatting (3 element tree).
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,70,public void testToDot3Elements() throws Exception {
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,71,Node ast = new Node(Token.BLOCK);
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,72,ast.addChildToBack(new Node(Token.NAME));
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,73,ast.addChildToBack(new Node(Token.STRING));
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,75,"String expected = ""digraph AST {\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,76,"""  node [color=lightblue2, style=filled];\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,77,"""  node0 [label=\""BLOCK\""];\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,78,"""  node1 [label=\""NAME\""];\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,79,"""  node0 -> node1 [weight=1];\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,80,"""  node2 [label=\""STRING\""];\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,81,"""  node0 -> node2 [weight=1];\n"" +"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,82,"""}\n"";"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,83,"test(expected, ast);"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,86,"private void test(String expected, Node ast) {"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,87,try {
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,88,"assertEquals(expected, DotFormatter.toDot(ast));"
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,89,} catch (java.io.IOException e) {
True,test/com/google/javascript/jscomp/DotFormatterTest.java,test/com/google/javascript/jscomp/DotFormatterTest.java,90,"fail(""Tests failed with IOExceptions"");"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,19,import com.google.javascript.jscomp.graph.FixedPointGraphTraversal;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,20,import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,21,import com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,22,import com.google.javascript.jscomp.graph.DiGraph;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,24,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,27,* Test for FixedPointGraphTraversal.
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,30,public class FixedPointGraphTraversalTest extends TestCase {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,32,"// The maximum value of a counter that counts as a ""change"""
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,33,"// to the state of the graph, for the purposes of fixed-point"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,34,// computation.
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,35,private int maxChange = 0;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,37,private class Counter {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,38,int value = 0;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,41,"private class CounterIncrementer implements EdgeCallback<Counter, String> {"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,42,"public boolean traverseEdge(Counter source, String e, Counter dest) {"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,43,dest.value++;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,44,return dest.value <= maxChange;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,48,"private DiGraph<Counter, String> graph;"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,50,"private Counter A, B, C, D, E;"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,51,private CounterIncrementer callback = new CounterIncrementer();
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,52,"private FixedPointGraphTraversal<Counter, String> traversal ="
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,53,"new FixedPointGraphTraversal<Counter, String>(callback);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,55,// Create a new graph of the following form:
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,57,//     A
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,59,//   |   B
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,61,// C   D
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,63,//   E
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,65,"// with all edges pointing downwards, and an ""up-edge"" from E to D."
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,66,@Override
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,67,public void setUp() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,68,A = new Counter();
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,69,B = new Counter();
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,70,C = new Counter();
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,71,D = new Counter();
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,72,E = new Counter();
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,74,"graph = new LinkedDirectedGraph<Counter, String>();"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,75,graph.createDirectedGraphNode(A);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,76,graph.createDirectedGraphNode(B);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,77,graph.createDirectedGraphNode(C);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,78,graph.createDirectedGraphNode(D);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,79,graph.createDirectedGraphNode(E);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,81,"graph.connect(A, ""->"", B);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,82,"graph.connect(A, ""->"", C);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,83,"graph.connect(A, ""->"", D);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,84,"graph.connect(B, ""->"", D);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,85,"graph.connect(C, ""->"", E);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,86,"graph.connect(D, ""->"", E);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,87,"graph.connect(E, ""->"", D);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,90,public void testGraph1() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,91,maxChange = 0;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,92,"traversal.computeFixedPoint(graph, A);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,94,"assertEquals(0, A.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,95,"assertEquals(1, B.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,96,"assertEquals(1, C.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,97,"assertEquals(1, D.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,98,"assertEquals(0, E.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,101,public void testGraph2() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,102,maxChange = 0;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,103,"traversal.computeFixedPoint(graph, D);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,105,"assertEquals(0, A.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,106,"assertEquals(0, B.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,107,"assertEquals(0, C.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,108,"assertEquals(0, D.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,109,"assertEquals(1, E.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,112,public void testGraph3() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,113,maxChange = 1;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,114,"traversal.computeFixedPoint(graph, A);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,116,"assertEquals(0, A.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,117,"assertEquals(1, B.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,118,"assertEquals(1, C.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,119,"assertEquals(3, D.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,120,"assertEquals(2, E.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,123,public void testGraph4() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,124,maxChange = 1;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,125,"traversal.computeFixedPoint(graph, D);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,127,"assertEquals(0, A.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,128,"assertEquals(0, B.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,129,"assertEquals(0, C.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,130,"assertEquals(1, D.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,131,"assertEquals(2, E.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,134,public void testGraph5() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,135,maxChange = 5;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,136,"traversal.computeFixedPoint(graph, A);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,138,"assertEquals(0, A.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,139,"assertEquals(1, B.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,140,"assertEquals(1, C.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,141,"assertEquals(6, D.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,142,"assertEquals(5, E.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,145,public void testGraph6() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,146,maxChange = 5;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,147,"traversal.computeFixedPoint(graph, B);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,149,"assertEquals(0, A.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,150,"assertEquals(0, B.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,151,"assertEquals(0, C.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,152,"assertEquals(6, D.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,153,"assertEquals(5, E.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,156,public void testGraph8() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,157,maxChange = 2;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,158,"traversal.computeFixedPoint(graph, A);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,160,try {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,161,"traversal = new FixedPointGraphTraversal<Counter, String>("
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,162,"new EdgeCallback<Counter, String>() {"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,163,"public boolean traverseEdge(Counter source, String e, Counter dest) {"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,164,return true;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,167,"traversal.computeFixedPoint(graph, A);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,168,"fail(""Expecting Error: "" +"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,169,FixedPointGraphTraversal.NON_HALTING_ERROR_MSG);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,170,} catch (IllegalStateException e) {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,171,"assertEquals(e.getMessage(),"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,172,FixedPointGraphTraversal.NON_HALTING_ERROR_MSG);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,176,public void testGraph9() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,177,maxChange = 0;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,179,"// when the graph traversal is done for the whole graph, we're actually"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,180,"// counting the number of ""in"" edges for each node."
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,181,traversal.computeFixedPoint(graph);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,183,"assertEquals(0, A.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,184,"assertEquals(1, B.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,185,"assertEquals(1, C.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,186,"assertEquals(3, D.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,187,"assertEquals(2, E.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,190,public void testGraph10() {
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,191,// Test a graph with self-edges.
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,192,maxChange = 5;
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,194,A = new Counter();
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,195,B = new Counter();
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,197,"graph = new LinkedDirectedGraph<Counter, String>();"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,198,graph.createDirectedGraphNode(A);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,199,graph.createDirectedGraphNode(B);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,201,"graph.connect(A, ""->"", A);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,202,"graph.connect(A, ""->"", B);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,204,traversal.computeFixedPoint(graph);
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,206,"assertEquals(6, A.value);"
True,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,test/com/google/javascript/jscomp/FixedPointGraphTraversalTest.java,207,"assertEquals(6, B.value);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,19,import com.google.javascript.jscomp.GlobalNamespace.Name;
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,20,import com.google.javascript.jscomp.GlobalNamespace.Ref;
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,22,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,25,* Tests for {@link GlobalNamespace}.
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,29,public class GlobalNamespaceTest extends TestCase {
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,31,public void testRemoveDeclaration1() {
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,32,"Name n = new Name(""a"", null, false);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,33,Ref set1 = createNodelessRef(Ref.Type.SET_FROM_GLOBAL);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,34,Ref set2 = createNodelessRef(Ref.Type.SET_FROM_GLOBAL);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,36,n.addRef(set1);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,37,n.addRef(set2);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,39,"assertEquals(set1, n.declaration);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,40,"assertEquals(2, n.globalSets);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,41,"assertEquals(1, n.refs.size());"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,43,n.removeRef(set1);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,45,"assertEquals(set2, n.declaration);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,46,"assertEquals(1, n.globalSets);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,47,"assertEquals(0, n.refs.size());"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,50,public void testRemoveDeclaration2() {
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,51,"Name n = new Name(""a"", null, false);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,52,Ref set1 = createNodelessRef(Ref.Type.SET_FROM_GLOBAL);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,53,Ref set2 = createNodelessRef(Ref.Type.SET_FROM_LOCAL);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,55,n.addRef(set1);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,56,n.addRef(set2);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,58,"assertEquals(set1, n.declaration);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,59,"assertEquals(1, n.globalSets);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,60,"assertEquals(1, n.localSets);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,61,"assertEquals(1, n.refs.size());"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,63,n.removeRef(set1);
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,65,"assertEquals(null, n.declaration);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,66,"assertEquals(0, n.globalSets);"
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,69,private Ref createNodelessRef(Ref.Type type) {
True,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,test/com/google/javascript/jscomp/GlobalNamespaceTest.java,70,return Ref.createRefForTesting(type);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,19,import com.google.javascript.jscomp.graph.Graph;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,20,import com.google.javascript.jscomp.graph.GraphColoring;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,21,import com.google.javascript.jscomp.graph.LinkedUndirectedGraph;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,22,import com.google.javascript.jscomp.graph.GraphNode;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,23,import com.google.javascript.jscomp.graph.Graph.GraphEdge;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,24,import com.google.javascript.jscomp.graph.GraphColoring.Color;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,25,import com.google.javascript.jscomp.graph.GraphColoring.GreedyGraphColoring;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,27,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,29,import java.util.Comparator;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,32,* Tests for {@link GraphColoring}.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,36,public class GraphColoringTest extends TestCase {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,38,public void testNoEdge() {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,39,"Graph<String, String> graph = new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,40,for (int i = 0; i < 5; i++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,41,"graph.createNode(""Node "" + i);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,42,// All node with same color.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,43,"GraphColoring<String, String> coloring ="
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,44,"new GreedyGraphColoring<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,45,"assertEquals(1, coloring.color());"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,46,validateColoring(graph);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,47,for (int j = 0; j < i; j++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,48,"assertEquals(""Node 0"", coloring.getPartitionSuperNode(""Node 0""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,53,public void testTwoNodesConnected() {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,54,"Graph<String, String> graph = new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,55,"graph.createNode(""A"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,56,"graph.createNode(""B"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,57,"graph.connect(""A"", ""--"", ""B"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,58,"GraphColoring<String, String> coloring ="
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,59,"new GreedyGraphColoring<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,60,"assertEquals(2, coloring.color());"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,61,validateColoring(graph);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,62,"assertEquals(""A"", coloring.getPartitionSuperNode(""A""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,63,"assertEquals(""B"", coloring.getPartitionSuperNode(""B""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,66,public void testGreedy() {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,67,"Graph<String, String> graph = new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,68,"graph.createNode(""A"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,69,"graph.createNode(""B"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,70,"graph.createNode(""C"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,71,"graph.createNode(""D"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,72,"graph.connect(""A"", ""--"", ""C"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,73,"graph.connect(""B"", ""--"", ""C"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,74,"graph.connect(""B"", ""--"", ""D"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,75,"GraphColoring<String, String> coloring ="
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,76,"new GreedyGraphColoring<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,77,"assertEquals(2, coloring.color());"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,78,validateColoring(graph);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,79,"assertEquals(""A"", coloring.getPartitionSuperNode(""A""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,80,"assertEquals(""A"", coloring.getPartitionSuperNode(""B""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,81,"assertEquals(""C"", coloring.getPartitionSuperNode(""C""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,84,public void testFullyConnected() {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,85,final int count = 100;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,86,"Graph<String, String> graph = new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,87,for (int i = 0; i < count; i++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,88,"graph.createNode(""Node "" + i);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,89,for (int j = 0; j < count; j++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,90,"graph.createNode(""Node "" + j);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,91,if (i != j) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,92,"graph.connect(""Node "" + i, null, ""Node "" + j);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,96,"GraphColoring<String, String> coloring ="
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,97,"new GreedyGraphColoring<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,98,"assertEquals(count, coloring.color());"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,99,validateColoring(graph);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,100,for (int i = 0; i < count; i++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,101,"assertEquals(""Node "" + i, coloring.getPartitionSuperNode(""Node "" + i));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,105,public void testAllConnectedToOneNode() {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,106,final int count = 10;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,107,"Graph<String, String> graph = new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,108,"graph.createNode(""Center"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,109,for (int i = 0; i < count; i++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,110,"graph.createNode(""Node "" + i);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,111,"graph.connect(""Center"", null, ""Node "" + i);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,113,"GraphColoring<String, String> coloring ="
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,114,"new GreedyGraphColoring<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,115,"assertEquals(2, coloring.color());"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,116,validateColoring(graph);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,117,"assertEquals(""Center"", coloring.getPartitionSuperNode(""Center""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,118,for (int i = 0; i < count; i++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,119,"assertEquals(""Node 0"", coloring.getPartitionSuperNode(""Node "" + i));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,123,public void testTwoFullyConnected() {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,124,final int count = 100;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,125,// A graph with two disconnected disjunct cliques.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,126,"Graph<String, String> graph = new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,127,for (int i = 0; i < count; i++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,128,"graph.createNode(""Node Left "" + i);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,129,"graph.createNode(""Node Right "" + i);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,130,for (int j = 0; j < count; j++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,131,"graph.createNode(""Node Left "" + j);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,132,"graph.createNode(""Node Right "" + j);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,133,if (i != j) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,134,"graph.connect(""Node Left "" + i, null, ""Node Left "" + j);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,135,"graph.connect(""Node Right "" + i, null, ""Node Right "" + j);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,139,"assertEquals(count, new GreedyGraphColoring<String, String>(graph).color());"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,140,validateColoring(graph);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,142,// Connect the two cliques.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,143,for (int i = 0; i < count; i++) {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,144,"graph.connect(""Node Left "" + i, null, ""Node Right "" + i);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,146,// Think of two exactly same graph with the same coloring side by side.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,147,"// If we circularly shift the colors of one of the graph by 1, we can"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,148,// connect the isomorphic nodes and still have a valid coloring in the
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,149,// resulting graph.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,150,"assertEquals(count, new GreedyGraphColoring<String, String>(graph).color());"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,151,validateColoring(graph);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,154,public void testDeterministic() {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,155,// A pentagon.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,156,"Graph<String, String> graph = new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,157,"graph.createNode(""A"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,158,"graph.createNode(""B"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,159,"graph.createNode(""C"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,160,"graph.createNode(""D"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,161,"graph.createNode(""E"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,162,"graph.connect(""A"", ""-->"", ""B"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,163,"graph.connect(""B"", ""-->"", ""C"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,164,"graph.connect(""C"", ""-->"", ""D"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,165,"graph.connect(""D"", ""-->"", ""E"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,166,"graph.connect(""E"", ""-->"", ""A"");"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,168,Comparator<String> lexicographic = new Comparator<String>() {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,169,"public int compare(String o1, String o2) {"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,170,return o1.toString().compareTo(o2.toString());
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,173,"GraphColoring<String, String> coloring ="
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,174,"new GreedyGraphColoring<String, String>(graph, lexicographic);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,175,"assertEquals(3, coloring.color());"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,176,validateColoring(graph);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,177,"assertEquals(""A"", coloring.getPartitionSuperNode(""A""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,178,"assertEquals(""A"", coloring.getPartitionSuperNode(""C""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,180,Comparator<String> biasD = new Comparator<String>() {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,181,"public int compare(String o1, String o2) {"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,182,"if (o1.equals(""D"")) {"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,183,return -1;
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,184,} else {
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,185,return o1.toString().compareTo(o2.toString());
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,190,"coloring = new GreedyGraphColoring<String, String>(graph, biasD);"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,191,"assertEquals(3, coloring.color());"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,192,validateColoring(graph);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,193,"assertEquals(""A"", coloring.getPartitionSuperNode(""A""));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,194,"assertFalse(""A"".equals(coloring.getPartitionSuperNode(""C"")));"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,198,* Validate that each node has been colored and connected nodes have different
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,199,* coloring.
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,201,"private static <N, E> void validateColoring(Graph<N, E> graph) {"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,202,"for (GraphNode<N, E> node : graph.getNodes()) {"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,203,assertTrue(node.getAnnotation() != null);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,205,"for (GraphEdge<N, E> edge : graph.getEdges()) {"
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,206,Color c1 = edge.getNodeA().getAnnotation();
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,207,Color c2 = edge.getNodeB().getAnnotation();
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,208,assertTrue(c1 != null);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,209,assertTrue(c2 != null);
True,test/com/google/javascript/jscomp/GraphColoringTest.java,test/com/google/javascript/jscomp/GraphColoringTest.java,210,assertTrue(!c1.equals(c2));
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,19,import com.google.javascript.jscomp.graph.GraphReachability;
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,20,import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,21,import com.google.javascript.jscomp.graph.DiGraph;
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,23,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,26,* Tests for {@link GraphReachability}.
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,30,public class GraphReachabilityTest extends TestCase {
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,31,"GraphReachability<String, String> reachability = null;"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,32,"DiGraph<String, String> graph = null;"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,34,public void testSimple() {
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,35,"graph = new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,36,"graph.createNode(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,37,"reachability = new GraphReachability<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,38,"reachability.compute(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,39,"assertReachable(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,41,"graph.createNode(""B"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,42,"reachability = new GraphReachability<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,43,"reachability.compute(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,44,"assertReachable(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,45,"assertNotReachable(""B"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,47,"graph.connect(""A"", ""--->"", ""B"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,48,"reachability = new GraphReachability<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,49,"reachability.compute(""B"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,50,"assertNotReachable(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,51,"assertReachable(""B"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,53,"graph.connect(""B"", ""--->"", ""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,54,"reachability = new GraphReachability<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,55,"reachability.compute(""B"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,56,"assertReachable(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,57,"assertReachable(""B"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,59,"graph.createNode(""C"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,60,"reachability = new GraphReachability<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,61,"reachability.compute(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,62,"assertReachable(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,63,"assertReachable(""B"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,64,"assertNotReachable(""C"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,66,"graph.createNode(""D"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,67,"graph.connect(""C"", ""--->"", ""D"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,68,"reachability = new GraphReachability<String, String>(graph);"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,69,"reachability.compute(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,70,"assertReachable(""A"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,71,"assertReachable(""B"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,72,"assertNotReachable(""C"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,73,"assertNotReachable(""D"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,74,"reachability.recompute(""C"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,75,"assertReachable(""C"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,76,"assertReachable(""D"");"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,79,public void assertReachable(String s) {
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,80,"assertSame(s + "" should be reachable"", graph.getNode(s).getAnnotation(),"
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,81,GraphReachability.REACHABLE);
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,84,public void assertNotReachable(String s) {
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,85,"assertNotSame(s + "" should not be reachable"","
True,test/com/google/javascript/jscomp/GraphReachabilityTest.java,test/com/google/javascript/jscomp/GraphReachabilityTest.java,86,"graph.getNode(s).getAnnotation(), GraphReachability.REACHABLE);"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,19,import com.google.javascript.jscomp.graph.Graph;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,20,import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,21,import com.google.javascript.jscomp.graph.LinkedUndirectedGraph;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,22,import com.google.javascript.jscomp.graph.Annotatable;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,23,import com.google.javascript.jscomp.graph.Annotation;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,24,import com.google.javascript.jscomp.graph.GraphNode;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,25,import com.google.javascript.jscomp.graph.SubGraph;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,26,import com.google.javascript.jscomp.graph.DiGraph;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,27,import com.google.javascript.jscomp.graph.Graph.GraphEdge;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,28,import com.google.javascript.jscomp.graph.UndiGraph;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,30,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,32,import java.util.HashSet;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,33,import java.util.List;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,34,import java.util.Set;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,37,* Tests for the graph data structure.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,41,public class GraphTest extends TestCase {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,43,public void testDirectedSimple() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,44,"DiGraph<String, String> graph ="
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,45,"new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,46,"graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,47,"graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,48,"graph.createNode(""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,49,"graph.connect(""a"", ""->"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,50,"assertTrue(graph.hasNode(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,51,"assertTrue(graph.hasNode(""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,52,"assertTrue(graph.hasNode(""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,53,"assertFalse(graph.hasNode(""d""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,54,"assertTrue(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,55,"assertTrue(graph.isConnected(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,56,"assertFalse(graph.isConnected(""a"", ""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,57,"assertFalse(graph.isConnected(""b"", ""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,58,"assertFalse(graph.isConnected(""c"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,59,"assertFalse(graph.isConnected(""c"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,60,"assertFalse(graph.isConnected(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,61,"assertFalse(graph.isConnected(""b"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,62,"assertFalse(graph.isConnected(""b"", ""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,63,"assertTrue(graph.isConnectedInDirection(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,64,"assertFalse(graph.isConnectedInDirection(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,65,"assertFalse(graph.isConnectedInDirection(""a"", ""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,66,"assertFalse(graph.isConnectedInDirection(""b"", ""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,67,"assertFalse(graph.isConnectedInDirection(""c"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,68,"assertFalse(graph.isConnectedInDirection(""c"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,70,// Removal.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,71,"graph.disconnect(""a"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,72,"assertFalse(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,73,"assertFalse(graph.isConnected(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,75,// Disconnect both ways.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,76,"graph.connect(""a"", ""->"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,77,"graph.connect(""b"", ""->"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,78,"graph.disconnect(""a"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,79,"assertFalse(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,80,"assertFalse(graph.isConnected(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,82,// Disconnect one way.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,83,"graph.connect(""a"", ""->"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,84,"graph.connect(""b"", ""->"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,85,"graph.disconnectInDirection(""a"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,86,"assertTrue(graph.isConnected(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,87,"assertTrue(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,88,"assertFalse(graph.isConnectedInDirection(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,89,"assertTrue(graph.isConnectedInDirection(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,92,public void testUndirectedSimple() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,93,"UndiGraph<String, String> graph ="
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,94,"new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,95,"graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,96,"graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,97,"graph.createNode(""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,98,"graph.connect(""a"", ""--"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,99,"assertTrue(graph.hasNode(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,100,"assertTrue(graph.hasNode(""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,101,"assertTrue(graph.hasNode(""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,102,"assertFalse(graph.hasNode(""d""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,103,"assertTrue(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,104,"assertTrue(graph.isConnected(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,105,"assertFalse(graph.isConnected(""a"", ""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,106,"assertFalse(graph.isConnected(""b"", ""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,107,"assertFalse(graph.isConnected(""c"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,108,"assertFalse(graph.isConnected(""c"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,109,"assertFalse(graph.isConnected(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,110,"assertFalse(graph.isConnected(""b"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,111,"assertFalse(graph.isConnected(""b"", ""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,113,// Removal.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,114,"graph.disconnect(""a"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,115,"assertFalse(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,116,"assertFalse(graph.isConnected(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,119,public void testDirectedSelfLoop() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,120,"DiGraph<String, String> graph ="
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,121,"new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,122,"graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,123,"graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,124,"graph.connect(""a"", ""->"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,125,"assertTrue(graph.isConnected(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,126,"assertFalse(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,127,"assertFalse(graph.isConnected(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,128,"assertTrue(graph.isConnectedInDirection(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,129,"assertFalse(graph.isConnectedInDirection(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,130,"assertFalse(graph.isConnectedInDirection(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,132,// Removal.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,133,"graph.disconnect(""a"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,134,"assertFalse(graph.isConnected(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,136,// Disconnect both ways.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,137,"graph.connect(""a"", ""->"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,138,"graph.disconnect(""a"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,139,"assertFalse(graph.isConnected(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,140,"assertFalse(graph.isConnected(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,142,// Disconnect one way.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,143,"graph.connect(""a"", ""->"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,144,"graph.disconnectInDirection(""a"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,145,"assertFalse(graph.isConnected(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,148,public void testUndirectedSelfLoop() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,149,"UndiGraph<String, String> graph ="
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,150,"new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,151,"graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,152,"graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,153,"graph.connect(""a"", ""--"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,154,"assertTrue(graph.isConnected(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,155,"assertFalse(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,156,"assertFalse(graph.isConnected(""b"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,158,// Removal.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,159,"graph.disconnect(""a"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,160,"assertFalse(graph.isConnected(""a"", ""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,163,public void testDirectedInAndOutEdges() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,164,"DiGraph<String, String> graph ="
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,165,"new LinkedDirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,166,"graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,167,"graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,168,"graph.createNode(""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,169,"graph.createNode(""d"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,170,"graph.connect(""a"", ""->"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,171,"graph.connect(""a"", ""-->"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,172,"graph.connect(""a"", ""--->"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,173,"graph.connect(""a"", ""->"", ""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,174,"graph.connect(""c"", ""->"", ""d"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,175,"assertSetEquals(graph.getDirectedSuccNodes(""a""), ""b"", ""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,176,"assertSetEquals(graph.getDirectedPredNodes(""b""), ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,177,"assertSetEquals(graph.getDirectedPredNodes(""c""), ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,178,"assertListCount(graph.getDirectedSuccNodes(""a""), ""b"", 3);"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,180,// Removal.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,181,"graph.disconnect(""a"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,182,"assertFalse(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,185,public void testUndirectedNeighbors() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,186,"UndiGraph<String, String> graph ="
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,187,"new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,188,"graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,189,"graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,190,"graph.createNode(""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,191,"graph.createNode(""d"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,192,"graph.connect(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,193,"graph.connect(""a"", ""--"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,194,"graph.connect(""a"", ""---"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,195,"graph.connect(""a"", ""-"", ""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,196,"graph.connect(""c"", ""-"", ""d"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,197,"assertSetEquals(graph.getNeighborNodes(""a""), ""b"", ""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,198,"assertSetEquals(graph.getNeighborNodes(""b""), ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,199,"assertSetEquals(graph.getNeighborNodes(""c""), ""a"", ""d"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,200,"assertListCount(graph.getNeighborNodes(""a""), ""b"", 3);"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,202,// Removal.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,203,"graph.disconnect(""a"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,204,"assertFalse(graph.isConnected(""a"", ""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,207,public void testNodeAnnotations() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,208,"Graph<String, String> graph = new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,209,"GraphNode<String, String> a = graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,210,"GraphNode<String, String> b = graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,211,"checkAnnotations(graph, a, b);"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,214,public void testEdgeAnnotations() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,215,"Graph<String, String> graph = new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,216,"graph.createNode(""1"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,217,"graph.createNode(""2"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,218,"graph.createNode(""3"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,219,"graph.connect(""1"", ""a"", ""2"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,220,"graph.connect(""2"", ""b"", ""3"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,221,"GraphEdge<String, String> a = graph.getEdges(""1"", ""2"").get(0);"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,222,"GraphEdge<String, String> b = graph.getEdges(""2"", ""3"").get(0);"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,223,"checkAnnotations(graph, a, b);"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,226,private static void checkAnnotations(
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,227,"Graph<String, String> graph, Annotatable a, Annotatable b) {"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,228,final Annotation A = new Annotation() {};
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,229,final Annotation B = new Annotation() {};
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,231,// Initially null.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,232,assertNull(a.getAnnotation());
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,233,assertNull(b.getAnnotation());
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,235,// Test basic setting.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,236,a.setAnnotation(A);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,237,b.setAnnotation(B);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,238,"assertSame(A, a.getAnnotation());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,239,"assertSame(B, b.getAnnotation());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,241,// Test clearing.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,242,graph.clearEdgeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,243,graph.clearNodeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,244,assertNull(a.getAnnotation());
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,245,assertNull(b.getAnnotation());
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,247,a.setAnnotation(A);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,248,b.setAnnotation(B);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,249,// Pushing clears.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,250,graph.pushEdgeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,251,graph.pushNodeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,252,assertNull(a.getAnnotation());
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,253,assertNull(b.getAnnotation());
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,254,a.setAnnotation(B);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,255,b.setAnnotation(B);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,256,graph.pushEdgeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,257,graph.pushNodeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,258,a.setAnnotation(B);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,259,b.setAnnotation(A);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,261,// Test restoring then restoring old values with pop.
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,262,"assertSame(B, a.getAnnotation());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,263,"assertSame(A, b.getAnnotation());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,264,graph.popEdgeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,265,graph.popNodeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,266,"assertSame(B, a.getAnnotation());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,267,"assertSame(B, b.getAnnotation());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,268,graph.popEdgeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,269,graph.popNodeAnnotations();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,270,"assertSame(A, a.getAnnotation());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,271,"assertSame(B, b.getAnnotation());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,274,public void testDegree() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,275,"testDirectedDegree(new LinkedDirectedGraph<String, String>());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,276,"testDirectedDegree(new LinkedUndirectedGraph<String, String>());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,279,"public void testDirectedDegree(Graph<String, String> graph) {"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,280,"graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,281,"graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,282,"graph.createNode(""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,283,"graph.createNode(""d"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,284,"assertEquals(0, graph.getNodeDegree(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,285,"graph.connect(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,286,"assertEquals(1, graph.getNodeDegree(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,287,"graph.connect(""b"", ""-"", ""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,288,"assertEquals(1, graph.getNodeDegree(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,289,"graph.connect(""a"", ""-"", ""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,290,"assertEquals(2, graph.getNodeDegree(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,291,"graph.connect(""d"", ""-"", ""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,292,"assertEquals(3, graph.getNodeDegree(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,295,public void testDirectedConnectIfNotFound() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,296,"testDirectedConnectIfNotFound(new LinkedDirectedGraph<String, String>());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,297,"testDirectedConnectIfNotFound(new LinkedUndirectedGraph<String, String>());"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,300,"public void testDirectedConnectIfNotFound(Graph<String, String> graph) {"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,301,"graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,302,"graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,303,"graph.connectIfNotFound(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,304,"assertEquals(1, graph.getNodeDegree(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,305,"graph.connectIfNotFound(""a"", ""-"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,306,"assertEquals(1, graph.getNodeDegree(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,307,"graph.connectIfNotFound(""a"", null, ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,308,"assertEquals(2, graph.getNodeDegree(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,309,"graph.connectIfNotFound(""a"", null, ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,310,"assertEquals(2, graph.getNodeDegree(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,313,public void testSimpleSubGraph() {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,314,"UndiGraph<String, String> graph ="
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,315,"new LinkedUndirectedGraph<String, String>();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,316,"graph.createNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,317,"graph.createNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,318,"graph.createNode(""c"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,319,"graph.connect(""a"", ""--"", ""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,321,"SubGraph<String, String> subGraph = graph.newSubGraph();"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,322,"subGraph.addNode(""a"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,323,"subGraph.addNode(""b"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,325,try {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,326,"subGraph.addNode(""d"");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,327,"fail(""SubGraph should not allow add for node that is not in graph."");"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,328,} catch (IllegalArgumentException e) {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,329,// exception expected
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,332,"assertFalse(subGraph.isIndependentOf(""a""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,333,"assertFalse(subGraph.isIndependentOf(""b""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,334,"assertTrue(subGraph.isIndependentOf(""c""));"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,337,"private <T extends GraphNode<String, String>> void assertListCount("
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,338,"List<T> list, String target, int count) {"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,339,"for (GraphNode<String, String> node : list) {"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,340,if (node.getValue().equals(target)) {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,341,count--;
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,344,assertTrue(count == 0);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,347,"private <T extends GraphNode<String, String>> void assertSetEquals("
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,348,"List<T> list, String ... targets) {"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,349,Set<String> set = new HashSet<String>();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,350,"for (GraphNode<String, String> node : list) {"
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,351,set.add(node.getValue());
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,353,Set<String> otherSet = new HashSet<String>();
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,354,for (String target : targets) {
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,355,otherSet.add(target);
True,test/com/google/javascript/jscomp/GraphTest.java,test/com/google/javascript/jscomp/GraphTest.java,357,assertTrue(otherSet.equals(set));
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,19,import com.google.common.collect.Iterables;
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,21,import junit.framework.*;
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,23,import java.util.*;
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,26,* Tests for {@link JSModuleGraph}
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,30,public class JSModuleGraphTest extends TestCase {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,32,"private final JSModule A = new JSModule(""A"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,33,"private final JSModule B = new JSModule(""B"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,34,"private final JSModule C = new JSModule(""C"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,35,"private final JSModule D = new JSModule(""D"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,36,"private final JSModule E = new JSModule(""E"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,37,"private final JSModule F = new JSModule(""F"");"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,38,private JSModuleGraph graph = null;
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,40,@Override
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,41,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,42,super.setUp();
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,43,B.addDependency(A);  //     __A__
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,44,C.addDependency(A);  //    /  |  \
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,45,D.addDependency(B);  //   B   C  |
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,46,E.addDependency(B);  //  / \ /|  |
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,47,E.addDependency(C);  // D   E | /
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,48,F.addDependency(A);  //      \|/
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,49,F.addDependency(C);  //       F
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,50,F.addDependency(E);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,51,"graph = new JSModuleGraph(new JSModule[] {A, B, C, D, E, F});"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,54,public void testModuleDepth() {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,55,"assertEquals(""A should have depth 0"", 0, graph.getDepth(A));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,56,"assertEquals(""B should have depth 1"", 1, graph.getDepth(B));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,57,"assertEquals(""C should have depth 1"", 1, graph.getDepth(C));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,58,"assertEquals(""D should have depth 2"", 2, graph.getDepth(D));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,59,"assertEquals(""E should have depth 2"", 2, graph.getDepth(E));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,60,"assertEquals(""F should have depth 3"", 3, graph.getDepth(F));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,63,public void testDeepestCommonDep() {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,64,"assertDeepestCommonDep(null, A, A);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,65,"assertDeepestCommonDep(null, A, B);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,66,"assertDeepestCommonDep(null, A, C);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,67,"assertDeepestCommonDep(null, A, D);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,68,"assertDeepestCommonDep(null, A, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,69,"assertDeepestCommonDep(null, A, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,70,"assertDeepestCommonDep(A, B, B);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,71,"assertDeepestCommonDep(A, B, C);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,72,"assertDeepestCommonDep(A, B, D);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,73,"assertDeepestCommonDep(A, B, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,74,"assertDeepestCommonDep(A, B, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,75,"assertDeepestCommonDep(A, C, C);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,76,"assertDeepestCommonDep(A, C, D);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,77,"assertDeepestCommonDep(A, C, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,78,"assertDeepestCommonDep(A, C, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,79,"assertDeepestCommonDep(B, D, D);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,80,"assertDeepestCommonDep(B, D, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,81,"assertDeepestCommonDep(B, D, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,82,"assertDeepestCommonDep(C, E, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,83,"assertDeepestCommonDep(C, E, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,84,"assertDeepestCommonDep(E, F, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,87,public void testDeepestCommonDepInclusive() {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,88,"assertDeepestCommonDepInclusive(A, A, A);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,89,"assertDeepestCommonDepInclusive(A, A, B);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,90,"assertDeepestCommonDepInclusive(A, A, C);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,91,"assertDeepestCommonDepInclusive(A, A, D);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,92,"assertDeepestCommonDepInclusive(A, A, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,93,"assertDeepestCommonDepInclusive(A, A, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,94,"assertDeepestCommonDepInclusive(B, B, B);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,95,"assertDeepestCommonDepInclusive(A, B, C);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,96,"assertDeepestCommonDepInclusive(B, B, D);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,97,"assertDeepestCommonDepInclusive(B, B, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,98,"assertDeepestCommonDepInclusive(B, B, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,99,"assertDeepestCommonDepInclusive(C, C, C);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,100,"assertDeepestCommonDepInclusive(A, C, D);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,101,"assertDeepestCommonDepInclusive(C, C, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,102,"assertDeepestCommonDepInclusive(C, C, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,103,"assertDeepestCommonDepInclusive(D, D, D);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,104,"assertDeepestCommonDepInclusive(B, D, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,105,"assertDeepestCommonDepInclusive(B, D, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,106,"assertDeepestCommonDepInclusive(E, E, E);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,107,"assertDeepestCommonDepInclusive(E, E, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,108,"assertDeepestCommonDepInclusive(F, F, F);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,111,public void testGetTransitiveDepsDeepestFirst() {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,112,assertTransitiveDepsDeepestFirst(A);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,113,"assertTransitiveDepsDeepestFirst(B, A);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,114,"assertTransitiveDepsDeepestFirst(C, A);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,115,"assertTransitiveDepsDeepestFirst(D, B, A);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,116,"assertTransitiveDepsDeepestFirst(E, C, B, A);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,117,"assertTransitiveDepsDeepestFirst(F, E, C, B, A);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,120,public void testCoalesceDuplicateFiles() {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,121,"A.add(JSSourceFile.fromCode(""a.js"", """"));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,123,"B.add(JSSourceFile.fromCode(""a.js"", """"));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,124,"B.add(JSSourceFile.fromCode(""b.js"", """"));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,126,"C.add(JSSourceFile.fromCode(""b.js"", """"));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,127,"C.add(JSSourceFile.fromCode(""c.js"", """"));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,129,"E.add(JSSourceFile.fromCode(""c.js"", """"));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,130,"E.add(JSSourceFile.fromCode(""d.js"", """"));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,132,graph.coalesceDuplicateFiles();
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,134,"assertEquals(2, A.getInputs().size());"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,135,"assertEquals(""a.js"", A.getInputs().get(0).getName());"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,136,"assertEquals(""b.js"", A.getInputs().get(1).getName());"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,137,"assertEquals(0, B.getInputs().size());"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,138,"assertEquals(1, C.getInputs().size());"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,139,"assertEquals(""c.js"", C.getInputs().get(0).getName());"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,140,"assertEquals(1, E.getInputs().size());"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,141,"assertEquals(""d.js"", E.getInputs().get(0).getName());"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,145,private void assertDeepestCommonDepInclusive(
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,146,"JSModule expected, JSModule m1, JSModule m2) {"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,147,"assertDeepestCommonDepOneWay(expected, m1, m2, true);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,148,"assertDeepestCommonDepOneWay(expected, m2, m1, true);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,151,private void assertDeepestCommonDep(
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,152,"JSModule expected, JSModule m1, JSModule m2) {"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,153,"assertDeepestCommonDepOneWay(expected, m1, m2, false);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,154,"assertDeepestCommonDepOneWay(expected, m2, m1, false);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,157,private void assertDeepestCommonDepOneWay(
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,158,"JSModule expected, JSModule m1, JSModule m2, boolean inclusive) {"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,159,JSModule actual = inclusive ?
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,160,"graph.getDeepestCommonDependencyInclusive(m1, m2) :"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,161,"graph.getDeepestCommonDependency(m1, m2);"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,162,if (actual != expected) {
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,163,fail(String.format(
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,164,"""Deepest common dep of %s and %s should be %s but was %s"","
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,165,"m1.getName(), m2.getName(),"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,166,"expected == null ? ""null"" : expected.getName(),"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,167,"actual ==  null ? ""null"" : actual.getName()));"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,171,"private void assertTransitiveDepsDeepestFirst(JSModule m, JSModule... deps) {"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,172,Iterable<JSModule> actual = graph.getTransitiveDepsDeepestFirst(m);
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,173,"assertEquals(Arrays.toString(deps),"
True,test/com/google/javascript/jscomp/JSModuleGraphTest.java,test/com/google/javascript/jscomp/JSModuleGraphTest.java,174,"Arrays.toString(Iterables.toArray(actual, JSModule.class)));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,2,* Copyright 2007 Google Inc.
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,16,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,18,import static com.google.javascript.jscomp.LightweightMessageFormatter.LineNumberingFormatter;
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,20,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,22,import junit.framework.TestCase;
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,24,public class LightweightMessageFormatterTest extends TestCase {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,25,private static final DiagnosticType FOO_TYPE =
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,26,"DiagnosticType.error(""TEST_FOO"", ""error description here"");"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,28,public void testNull() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,29,assertNull(format(null));
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,32,public void testOneLineRegion() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,33,"assertEquals(""  5| hello world"", format(region(5, 5, ""hello world"")));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,36,public void testTwoLineRegion() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,37,"assertEquals(""  5| hello world\n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,38,"""  6| foo bar"", format(region(5, 6, ""hello world\nfoo bar"")));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,41,public void testThreeLineRegionAcrossNumberRange() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,42,"String region = format(region(9, 11, ""hello world\nfoo bar\nanother one""));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,43,"assertEquals(""   9| hello world\n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,44,"""  10| foo bar\n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,45,"""  11| another one"", region);"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,48,public void testThreeLineRegionEmptyLine() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,49,"String region = format(region(7, 9, ""hello world\n\nanother one""));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,50,"assertEquals(""  7| hello world\n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,51,"""  8| \n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,52,"""  9| another one"", region);"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,55,public void testOnlyOneEmptyLine() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,56,"assertNull(format(region(7, 7, """")));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,59,public void testTwoEmptyLines() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,60,"assertEquals(""  7| "", format(region(7, 8, ""\n"")));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,63,public void testThreeLineRemoveLastEmptyLine() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,64,"String region = format(region(7, 9, ""hello world\nfoobar\n""));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,65,"assertEquals(""  7| hello world\n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,66,"""  8| foobar"", region);"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,69,public void testFormatErrorSpaces() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,70,"JSError error = JSError.make(""javascript/complex.js"","
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,71,"Node.newString(""foobar"", 5, 8), FOO_TYPE);"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,72,"LightweightMessageFormatter formatter = formatter(""    if (foobar) {"");"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,73,"assertEquals(""javascript/complex.js:5: ERROR - error description here\n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,74,"""    if (foobar) {\n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,75,"""        ^\n"", formatter.formatError(error));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,78,public void testFormatErrorTabs() throws Exception {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,79,"JSError error = JSError.make(""javascript/complex.js"","
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,80,"Node.newString(""foobar"", 5, 6), FOO_TYPE);"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,81,"LightweightMessageFormatter formatter = formatter(""\t\tif (foobar) {"");"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,82,"assertEquals(""javascript/complex.js:5: ERROR - error description here\n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,83,"""\t\tif (foobar) {\n"" +"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,84,"""\t\t    ^\n"", formatter.formatError(error));"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,87,private LightweightMessageFormatter formatter(String string) {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,88,return new LightweightMessageFormatter(source(string));
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,91,private SourceExcerptProvider source(final String source) {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,92,return new SourceExcerptProvider() {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,93,"public String getSourceLine(String sourceName, int lineNumber) {"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,94,return source;
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,96,"public Region getSourceRegion(String sourceName, int lineNumber) {"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,97,throw new UnsupportedOperationException();
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,102,private String format(Region region) {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,103,return new LineNumberingFormatter().formatRegion(region);
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,106,"private Region region(final int startLine, final int endLine,"
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,107,final String source) {
True,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,108,"return new SimpleRegion(startLine, endLine, source);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,19,import com.google.common.collect.Lists;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,20,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,21,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,22,import com.google.javascript.rhino.jstype.JSType;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,26,* Tests for LinkedFlowScope.
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,29,public class LinkedFlowScopeTest extends CompilerTypeTestCase {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,31,private final Node blockNode = new Node(Token.BLOCK);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,32,private final Node functionNode = new Node(Token.FUNCTION);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,33,private final int LONG_CHAIN_LENGTH = 1050;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,35,private Scope globalScope;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,36,private Scope localScope;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,37,"@SuppressWarnings(""unused"")"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,38,private FlowScope globalEntry;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,39,private FlowScope localEntry;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,41,@Override
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,42,public void setUp() throws Exception {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,43,super.setUp();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,45,"globalScope = new Scope(blockNode, compiler);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,46,"globalScope.declare(""globalA"", null, null, null);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,47,"globalScope.declare(""globalB"", null, null, null);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,49,"localScope = new Scope(globalScope, functionNode);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,50,"localScope.declare(""localA"", null, null, null);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,51,"localScope.declare(""localB"", null, null, null);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,53,globalEntry = LinkedFlowScope.createEntryLattice(globalScope);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,54,localEntry = LinkedFlowScope.createEntryLattice(localScope);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,57,public void testOptimize() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,58,"assertEquals(localEntry, localEntry.optimize());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,60,FlowScope child = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,61,"assertEquals(localEntry, child.optimize());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,63,"child.inferSlotType(""localB"", NUMBER_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,64,"assertEquals(child, child.optimize());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,67,public void testJoin1() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,68,FlowScope childA = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,69,"childA.inferSlotType(""localB"", NUMBER_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,71,FlowScope childAB = childA.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,72,"childAB.inferSlotType(""localB"", STRING_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,74,FlowScope childB = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,75,"childB.inferSlotType(""localB"", BOOLEAN_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,77,"assertEquals(STRING_TYPE, childAB.getSlot(""localB"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,78,"assertEquals(BOOLEAN_TYPE, childB.getSlot(""localB"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,79,"assertNull(childB.getSlot(""localA"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,81,"FlowScope joined = join(childB, childAB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,82,"assertEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,83,"joined.getSlot(""localB"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,84,"assertNull(joined.getSlot(""localA"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,86,"joined = join(childAB, childB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,87,"assertEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,88,"joined.getSlot(""localB"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,89,"assertNull(joined.getSlot(""localA"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,91,"assertEquals(""Join should be symmetric"","
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,92,"join(childB, childAB), join(childAB, childB));"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,95,public void testJoin2() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,96,FlowScope childA = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,97,"childA.inferSlotType(""localA"", STRING_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,99,FlowScope childB = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,100,"childB.inferSlotType(""globalB"", BOOLEAN_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,102,"assertEquals(STRING_TYPE, childA.getSlot(""localA"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,103,"assertEquals(BOOLEAN_TYPE, childB.getSlot(""globalB"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,104,"assertNull(childB.getSlot(""localB"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,106,"FlowScope joined = join(childB, childA);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,107,"assertEquals(STRING_TYPE, joined.getSlot(""localA"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,108,"assertEquals(BOOLEAN_TYPE, joined.getSlot(""globalB"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,110,"joined = join(childA, childB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,111,"assertEquals(STRING_TYPE, joined.getSlot(""localA"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,112,"assertEquals(BOOLEAN_TYPE, joined.getSlot(""globalB"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,114,"assertEquals(""Join should be symmetric"","
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,115,"join(childB, childA), join(childA, childB));"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,118,public void testJoin3() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,119,"localScope.declare(""localC"", null, STRING_TYPE, null);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,120,"localScope.declare(""localD"", null, STRING_TYPE, null);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,122,FlowScope childA = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,123,"childA.inferSlotType(""localC"", NUMBER_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,125,FlowScope childB = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,126,"childA.inferSlotType(""localD"", BOOLEAN_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,128,"FlowScope joined = join(childB, childA);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,129,"assertEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,130,"joined.getSlot(""localC"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,131,"assertEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,132,"joined.getSlot(""localD"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,134,"joined = join(childA, childB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,135,"assertEquals(createUnionType(STRING_TYPE, NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,136,"joined.getSlot(""localC"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,137,"assertEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,138,"joined.getSlot(""localD"").getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,140,"assertEquals(""Join should be symmetric"","
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,141,"join(childB, childA), join(childA, childB));"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,145,* Create a long chain of flow scopes where each link in the chain
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,146,* contains one slot.
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,148,public void testLongChain1() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,149,FlowScope chainA = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,150,FlowScope chainB = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,151,for (int i = 0; i < LONG_CHAIN_LENGTH; i++) {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,152,"localScope.declare(""local"" + i, null, null, null);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,153,"chainA.inferSlotType(""local"" + i,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,154,i % 2 == 0 ? NUMBER_TYPE : BOOLEAN_TYPE);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,155,"chainB.inferSlotType(""local"" + i,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,156,i % 3 == 0 ? STRING_TYPE : BOOLEAN_TYPE);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,158,chainA = chainA.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,159,chainB = chainB.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,162,"verifyLongChains(chainA, chainB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,166,* Create a long chain of flow scopes where each link in the chain
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,167,* contains 7 slots.
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,169,public void testLongChain2() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,170,FlowScope chainA = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,171,FlowScope chainB = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,172,for (int i = 0; i < LONG_CHAIN_LENGTH * 7; i++) {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,173,"localScope.declare(""local"" + i, null, null, null);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,174,"chainA.inferSlotType(""local"" + i,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,175,i % 2 == 0 ? NUMBER_TYPE : BOOLEAN_TYPE);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,176,"chainB.inferSlotType(""local"" + i,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,177,i % 3 == 0 ? STRING_TYPE : BOOLEAN_TYPE);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,179,if (LONG_CHAIN_LENGTH % 7 == 0) {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,180,chainA = chainA.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,181,chainB = chainB.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,185,"verifyLongChains(chainA, chainB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,189,* Create a long chain of flow scopes where every 4 links in the chain
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,190,* contain a slot.
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,192,public void testLongChain3() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,193,FlowScope chainA = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,194,FlowScope chainB = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,195,for (int i = 0; i < LONG_CHAIN_LENGTH * 7; i++) {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,196,if (i % 7 == 0) {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,197,int j = i / 7;
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,198,"localScope.declare(""local"" + j, null, null, null);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,199,"chainA.inferSlotType(""local"" + j,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,200,j % 2 == 0 ? NUMBER_TYPE : BOOLEAN_TYPE);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,201,"chainB.inferSlotType(""local"" + j,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,202,j % 3 == 0 ? STRING_TYPE : BOOLEAN_TYPE);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,205,chainA = chainA.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,206,chainB = chainB.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,209,"verifyLongChains(chainA, chainB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,212,// Common chain verification for testLongChainN for all N.
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,213,"private void verifyLongChains(FlowScope chainA, FlowScope chainB) {"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,214,"FlowScope joined = join(chainA, chainB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,215,for (int i = 0; i < LONG_CHAIN_LENGTH; i++) {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,216,assertEquals(
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,217,"i % 2 == 0 ? NUMBER_TYPE : BOOLEAN_TYPE,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,218,"chainA.getSlot(""local"" + i).getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,219,assertEquals(
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,220,"i % 3 == 0 ? STRING_TYPE : BOOLEAN_TYPE,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,221,"chainB.getSlot(""local"" + i).getType());"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,223,"JSType joinedSlotType = joined.getSlot(""local"" + i).getType();"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,224,if (i % 6 == 0) {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,225,"assertEquals(createUnionType(STRING_TYPE, NUMBER_TYPE), joinedSlotType);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,226,} else if (i % 2 == 0) {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,227,"assertEquals(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,228,joinedSlotType);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,229,} else if (i % 3 == 0) {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,230,"assertEquals(createUnionType(STRING_TYPE, BOOLEAN_TYPE),"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,231,joinedSlotType);
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,232,} else {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,233,"assertEquals(BOOLEAN_TYPE, joinedSlotType);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,237,"assertScopesDiffer(chainA, chainB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,238,"assertScopesDiffer(chainA, joined);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,239,"assertScopesDiffer(chainB, joined);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,242,public void testFindUniqueSlot() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,243,FlowScope childA = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,244,"childA.inferSlotType(""localB"", NUMBER_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,246,FlowScope childAB = childA.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,247,"childAB.inferSlotType(""localB"", STRING_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,249,FlowScope childABC = childAB.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,250,"childABC.inferSlotType(""localA"", BOOLEAN_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,252,assertNull(childABC.findUniqueRefinedSlot(childABC));
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,253,"assertEquals(BOOLEAN_TYPE,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,254,childABC.findUniqueRefinedSlot(childAB).getType());
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,255,assertNull(childABC.findUniqueRefinedSlot(childA));
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,256,assertNull(childABC.findUniqueRefinedSlot(localEntry));
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,258,"assertEquals(STRING_TYPE,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,259,childAB.findUniqueRefinedSlot(childA).getType());
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,260,"assertEquals(STRING_TYPE,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,261,childAB.findUniqueRefinedSlot(localEntry).getType());
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,263,"assertEquals(NUMBER_TYPE,"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,264,childA.findUniqueRefinedSlot(localEntry).getType());
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,267,public void testDiffer() {
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,268,FlowScope childA = localEntry.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,269,"childA.inferSlotType(""localB"", NUMBER_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,271,FlowScope childAB = childA.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,272,"childAB.inferSlotType(""localB"", STRING_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,274,FlowScope childABC = childAB.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,275,"childABC.inferSlotType(""localA"", BOOLEAN_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,277,FlowScope childB = childAB.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,278,"childB.inferSlotType(""localB"", STRING_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,280,FlowScope childBC = childB.createChildFlowScope();
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,281,"childBC.inferSlotType(""localA"", NO_TYPE);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,283,"assertScopesSame(childAB, childB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,284,"assertScopesSame(childABC, childBC);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,286,"assertScopesDiffer(childABC, childB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,287,"assertScopesDiffer(childAB, childBC);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,289,"assertScopesDiffer(childA, childAB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,290,"assertScopesDiffer(childA, childABC);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,291,"assertScopesDiffer(childA, childB);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,292,"assertScopesDiffer(childA, childBC);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,295,"private void assertScopesDiffer(FlowScope a, FlowScope b) {"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,296,assertFalse(a.equals(b));
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,297,assertFalse(b.equals(a));
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,298,"assertEquals(a, a);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,299,"assertEquals(b, b);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,302,"private void assertScopesSame(FlowScope a, FlowScope b) {"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,303,"assertEquals(a, b);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,304,"assertEquals(b, a);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,305,"assertEquals(a, a);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,306,"assertEquals(b, b);"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,309,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,310,"private FlowScope join(FlowScope a, FlowScope b) {"
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,311,return (new LinkedFlowScope.FlowScopeJoinOp()).apply(
True,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,test/com/google/javascript/jscomp/LinkedFlowScopeTest.java,312,"Lists.newArrayList(a, b));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,2,* Copyright 2007 Google Inc.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,19,import com.google.common.base.Pair;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,20,import com.google.common.collect.Sets;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,21,import com.google.javascript.rhino.Node;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,22,import com.google.javascript.rhino.Token;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,23,import com.google.javascript.rhino.jstype.JSType;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,25,import java.util.Arrays;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,26,import java.util.Collection;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,28,public class SemanticReverseAbstractInterpreterTest
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,29,extends CompilerTypeTestCase {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,30,private CodingConvention codingConvention = new GoogleCodingConvention();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,31,private ReverseAbstractInterpreter interpreter;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,32,private Scope functionScope;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,34,@Override
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,35,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,36,super.setUp();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,38,interpreter = new SemanticReverseAbstractInterpreter(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,39,"codingConvention, registry);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,42,public FlowScope newScope() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,43,"Scope globalScope = new Scope(new Node(Token.EMPTY), compiler);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,44,"functionScope = new Scope(globalScope, new Node(Token.EMPTY));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,45,return LinkedFlowScope.createEntryLattice(functionScope);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,49,* Tests reverse interpretation of a NAME expression.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,51,public void testNameCondition() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,52,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,53,"Node condition = createVar(blind, ""a"", createNullableType(STRING_TYPE));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,55,// true outcome.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,56,FlowScope informedTrue = interpreter.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,57,"getPreciserScopeKnowingConditionOutcome(condition, blind, true);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,58,"assertEquals(STRING_TYPE, getVarType(informedTrue, ""a""));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,60,// false outcome.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,61,FlowScope informedFalse = interpreter.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,62,"getPreciserScopeKnowingConditionOutcome(condition, blind, false);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,63,"assertEquals(createNullableType(STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,64,"getVarType(informedFalse, ""a""));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,68,* Tests reverse interpretation of a NOT(NAME) expression.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,70,public void testNegatedNameCondition() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,71,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,72,"Node a = createVar(blind, ""a"", createNullableType(STRING_TYPE));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,73,Node condition = new Node(Token.NOT);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,74,condition.addChildToBack(a);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,76,// true outcome.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,77,FlowScope informedTrue = interpreter.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,78,"getPreciserScopeKnowingConditionOutcome(condition, blind, true);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,79,"assertEquals(createNullableType(STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,80,"getVarType(informedTrue, ""a""));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,82,// false outcome.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,83,FlowScope informedFalse = interpreter.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,84,"getPreciserScopeKnowingConditionOutcome(condition, blind, false);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,85,"assertEquals(STRING_TYPE, getVarType(informedFalse, ""a""));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,89,* Tests reverse interpretation of a ASSIGN expression.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,91,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,92,public void testAssignCondition1() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,93,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,94,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,95,"Token.ASSIGN,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,96,"createVar(blind, ""a"", createNullableType(OBJECT_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,97,"createVar(blind, ""b"", createNullableType(OBJECT_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,98,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,99,"new Pair<String, JSType>(""a"", OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,100,"new Pair<String, JSType>(""b"", OBJECT_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,101,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,102,"new Pair<String, JSType>(""a"", NULL_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,103,"new Pair<String, JSType>(""b"", NULL_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,107,"* Tests reverse interpretation of a SHEQ(NAME, NUMBER) expression."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,109,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,110,public void testSheqCondition1() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,111,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,112,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,113,"Token.SHEQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,114,"createVar(blind, ""a"", createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,115,"createNumber(56),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,116,"Sets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,117,"Sets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,118,"createUnionType(STRING_TYPE, NUMBER_TYPE))));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,122,"* Tests reverse interpretation of a SHEQ(NUMBER, NAME) expression."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,124,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,125,public void testSheqCondition2() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,126,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,127,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,128,"Token.SHEQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,129,"createNumber(56),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,130,"createVar(blind, ""a"", createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,131,"Sets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,132,"Sets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,133,"createUnionType(STRING_TYPE, NUMBER_TYPE))));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,137,"* Tests reverse interpretation of a SHEQ(NAME, NAME) expression."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,139,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,140,public void testSheqCondition3() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,141,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,142,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,143,"Token.SHEQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,144,"createVar(blind, ""b"", createUnionType(STRING_TYPE, BOOLEAN_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,145,"createVar(blind, ""a"", createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,146,"Sets.newHashSet(new Pair<String, JSType>(""a"", STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,147,"new Pair<String, JSType>(""b"", STRING_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,148,"Sets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,149,"createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,150,"new Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,151,"createUnionType(STRING_TYPE, BOOLEAN_TYPE))));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,154,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,155,public void testSheqCondition4() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,156,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,157,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,158,"Token.SHEQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,159,"createVar(blind, ""a"", createUnionType(STRING_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,160,"createVar(blind, ""b"", createUnionType(VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,161,"Sets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,162,"new Pair<String, JSType>(""b"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,163,"Sets.newHashSet(new Pair<String, JSType>(""a"", STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,164,"new Pair<String, JSType>(""b"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,167,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,168,public void testSheqCondition5() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,169,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,170,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,171,"Token.SHEQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,172,"createVar(blind, ""a"", createUnionType(NULL_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,173,"createVar(blind, ""b"", createUnionType(VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,174,"Sets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,175,"new Pair<String, JSType>(""b"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,176,"Sets.newHashSet(new Pair<String, JSType>(""a"", NULL_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,177,"new Pair<String, JSType>(""b"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,180,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,181,public void testSheqCondition6() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,182,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,183,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,184,"Token.SHEQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,185,"createVar(blind, ""a"", createUnionType(STRING_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,186,"createVar(blind, ""b"", createUnionType(NUMBER_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,187,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,188,"new Pair<String, JSType>(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,189,"new Pair<String, JSType>(""b"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,190,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,191,"new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,192,"createUnionType(STRING_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,193,"new Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,194,"createUnionType(NUMBER_TYPE, VOID_TYPE))));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,198,"* Tests reverse interpretation of a SHNE(NAME, NUMBER) expression."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,200,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,201,public void testShneCondition1() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,202,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,203,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,204,"Token.SHNE,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,205,"createVar(blind, ""a"", createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,206,"createNumber(56),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,207,"Sets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,208,"createUnionType(STRING_TYPE, NUMBER_TYPE))),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,209,"Sets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,213,"* Tests reverse interpretation of a SHNE(NUMBER, NAME) expression."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,215,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,216,public void testShneCondition2() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,217,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,218,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,219,"Token.SHNE,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,220,"createNumber(56),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,221,"createVar(blind, ""a"", createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,222,"Sets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,223,"createUnionType(STRING_TYPE, NUMBER_TYPE))),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,224,"Sets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,228,"* Tests reverse interpretation of a SHNE(NAME, NAME) expression."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,230,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,231,public void testShneCondition3() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,232,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,233,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,234,"Token.SHNE,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,235,"createVar(blind, ""b"", createUnionType(STRING_TYPE, BOOLEAN_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,236,"createVar(blind, ""a"", createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,237,"Sets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,238,"createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,239,"new Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,240,"createUnionType(STRING_TYPE, BOOLEAN_TYPE))),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,241,"Sets.newHashSet(new Pair<String, JSType>(""a"", STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,242,"new Pair<String, JSType>(""b"", STRING_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,245,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,246,public void testShneCondition4() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,247,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,248,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,249,"Token.SHNE,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,250,"createVar(blind, ""a"", createUnionType(STRING_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,251,"createVar(blind, ""b"", createUnionType(VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,252,"Sets.newHashSet(new Pair<String, JSType>(""a"", STRING_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,253,"new Pair<String, JSType>(""b"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,254,"Sets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,255,"new Pair<String, JSType>(""b"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,258,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,259,public void testShneCondition5() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,260,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,261,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,262,"Token.SHNE,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,263,"createVar(blind, ""a"", createUnionType(NULL_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,264,"createVar(blind, ""b"", createUnionType(NULL_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,265,"Sets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,266,"new Pair<String, JSType>(""b"", NULL_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,267,"Sets.newHashSet(new Pair<String, JSType>(""a"", NULL_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,268,"new Pair<String, JSType>(""b"", NULL_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,271,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,272,public void testShneCondition6() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,273,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,274,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,275,"Token.SHNE,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,276,"createVar(blind, ""a"", createUnionType(STRING_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,277,"createVar(blind, ""b"", createUnionType(NUMBER_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,278,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,279,"new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,280,"createUnionType(STRING_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,281,"new Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,282,"createUnionType(NUMBER_TYPE, VOID_TYPE))),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,283,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,284,"new Pair<String, JSType>(""a"", VOID_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,285,"new Pair<String, JSType>(""b"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,289,"* Tests reverse interpretation of a EQ(NAME, NULL) expression."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,291,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,292,public void testEqCondition1() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,293,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,294,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,295,"Token.EQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,296,"createVar(blind, ""a"", createUnionType(BOOLEAN_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,297,"createNull(),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,298,"Sets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,299,"Sets.newHashSet(new Pair<String, JSType>(""a"", BOOLEAN_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,303,"* Tests reverse interpretation of a NE(NULL, NAME) expression."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,305,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,306,public void testEqCondition2() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,307,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,308,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,309,"Token.NE,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,310,"createNull(),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,311,"createVar(blind, ""a"", createUnionType(BOOLEAN_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,312,"Sets.newHashSet(new Pair<String, JSType>(""a"", BOOLEAN_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,313,"Sets.newHashSet(new Pair<String, JSType>(""a"", VOID_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,317,"* Tests reverse interpretation of a EQ(NAME, NULL) expression."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,319,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,320,public void testEqCondition3() throws Exception {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,321,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,322,"// (number,undefined,null)"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,323,JSType nullableOptionalNumber =
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,324,"createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,325,"// (null,undefined)"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,326,JSType nullUndefined =
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,327,"createUnionType(VOID_TYPE, NULL_TYPE);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,328,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,329,"Token.EQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,330,"createVar(blind, ""a"", nullableOptionalNumber),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,331,"createNull(),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,332,"Sets.newHashSet(new Pair<String, JSType>(""a"", nullUndefined)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,333,"Sets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,337,"* Tests reverse interpretation of a COMPARE(NAME, NUMBER) expression,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,338,"* where COMPARE can be LE, LT, GE or GT."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,340,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,341,public void testInequalitiesCondition1() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,342,"for (int op : Arrays.asList(Token.LT, Token.GT, Token.LE, Token.GE)) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,343,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,344,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,345,"op,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,346,"createVar(blind, ""a"", createUnionType(STRING_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,347,"createNumber(8),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,348,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,349,"new Pair<String, JSType>(""a"", STRING_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,350,"Sets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,351,"createUnionType(STRING_TYPE, VOID_TYPE))));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,356,"* Tests reverse interpretation of a COMPARE(NAME, NAME) expression,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,357,"* where COMPARE can be LE, LT, GE or GT."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,359,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,360,public void testInequalitiesCondition2() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,361,"for (int op : Arrays.asList(Token.LT, Token.GT, Token.LE, Token.GE)) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,362,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,363,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,364,"op,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,365,"createVar(blind, ""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,366,"createUnionType(STRING_TYPE, NUMBER_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,367,"createVar(blind, ""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,368,"createUnionType(NUMBER_TYPE, NULL_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,369,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,370,"new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,371,"createUnionType(STRING_TYPE, NUMBER_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,372,"new Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,373,"createUnionType(NUMBER_TYPE, NULL_TYPE))),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,374,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,375,"new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,376,"createUnionType(STRING_TYPE, NUMBER_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,377,"new Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,378,"createUnionType(NUMBER_TYPE, NULL_TYPE))));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,383,"* Tests reverse interpretation of a COMPARE(NUMBER-untyped, NAME) expression,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,384,"* where COMPARE can be LE, LT, GE or GT."
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,386,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,387,public void testInequalitiesCondition3() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,388,"for (int op : Arrays.asList(Token.LT, Token.GT, Token.LE, Token.GE)) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,389,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,390,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,391,"op,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,392,"createUntypedNumber(8),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,393,"createVar(blind, ""a"", createUnionType(STRING_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,394,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,395,"new Pair<String, JSType>(""a"", STRING_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,396,"Sets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,397,"createUnionType(STRING_TYPE, VOID_TYPE))));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,401,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,402,public void testAnd() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,403,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,404,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,405,"Token.AND,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,406,"createVar(blind, ""b"", createUnionType(STRING_TYPE, NULL_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,407,"createVar(blind, ""a"", createUnionType(NUMBER_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,408,"Sets.newHashSet(new Pair<String, JSType>(""a"", NUMBER_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,409,"new Pair<String, JSType>(""b"", STRING_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,410,"Sets.newHashSet(new Pair<String, JSType>(""a"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,411,"createUnionType(NUMBER_TYPE, VOID_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,412,"new Pair<String, JSType>(""b"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,413,"createUnionType(STRING_TYPE, NULL_TYPE))));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,416,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,417,public void testTypeof1() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,418,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,419,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,420,"Token.EQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,421,"new Node(Token.TYPEOF, createVar(blind, ""a"", OBJECT_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,422,"Node.newString(""function""),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,423,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,424,"new Pair<String, JSType>(""a"", U2U_CONSTRUCTOR_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,425,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,426,"new Pair<String, JSType>(""a"", OBJECT_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,429,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,430,public void testTypeof2() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,431,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,432,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,433,"Token.EQ,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,434,"new Node(Token.TYPEOF, createVar(blind, ""a"", ALL_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,435,"Node.newString(""function""),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,436,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,437,"new Pair<String, JSType>(""a"", U2U_CONSTRUCTOR_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,438,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,439,"new Pair<String, JSType>(""a"", ALL_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,442,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,443,public void testInstanceOf() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,444,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,445,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,446,"Token.INSTANCEOF,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,447,"createVar(blind, ""x"", UNKNOWN_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,448,"createVar(blind, ""s"", STRING_OBJECT_FUNCTION_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,449,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,450,"new Pair<String, JSType>(""x"", STRING_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,451,"new Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,452,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,453,"new Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,456,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,457,public void testInstanceOf2() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,458,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,459,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,460,"Token.INSTANCEOF,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,461,"createVar(blind, ""x"","
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,462,"createUnionType(STRING_OBJECT_TYPE, NUMBER_OBJECT_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,463,"createVar(blind, ""s"", STRING_OBJECT_FUNCTION_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,464,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,465,"new Pair<String, JSType>(""x"", STRING_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,466,"new Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,467,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,468,"new Pair<String, JSType>(""x"", NUMBER_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,469,"new Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,472,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,473,public void testInstanceOf3() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,474,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,475,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,476,"Token.INSTANCEOF,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,477,"createVar(blind, ""x"", OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,478,"createVar(blind, ""s"", STRING_OBJECT_FUNCTION_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,479,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,480,"new Pair<String, JSType>(""x"", STRING_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,481,"new Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,482,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,483,"new Pair<String, JSType>(""x"", OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,484,"new Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,487,"@SuppressWarnings(""unchecked"")"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,488,public void testInstanceOf4() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,489,FlowScope blind = newScope();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,490,"testBinop(blind,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,491,"Token.INSTANCEOF,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,492,"createVar(blind, ""x"", ALL_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,493,"createVar(blind, ""s"", STRING_OBJECT_FUNCTION_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,494,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,495,"new Pair<String, JSType>(""x"", STRING_OBJECT_TYPE),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,496,"new Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)),"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,497,Sets.newHashSet(
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,498,"new Pair<String, JSType>(""s"", STRING_OBJECT_FUNCTION_TYPE)));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,501,"private void testBinop(FlowScope blind, int binop, Node left, Node right,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,502,"Collection<Pair<String, JSType>> trueOutcome,"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,503,"Collection<Pair<String, JSType>> falseOutcome) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,504,Node condition = new Node(binop);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,505,condition.addChildToBack(left);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,506,condition.addChildToBack(right);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,508,// true outcome.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,509,FlowScope informedTrue = interpreter.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,510,"getPreciserScopeKnowingConditionOutcome(condition, blind, true);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,511,"for (Pair<String, JSType> p : trueOutcome) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,512,"assertEquals(p.first, p.second, getVarType(informedTrue, p.first));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,515,// false outcome.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,516,FlowScope informedFalse = interpreter.
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,517,"getPreciserScopeKnowingConditionOutcome(condition, blind, false);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,518,"for (Pair<String, JSType> p : falseOutcome) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,519,"assertEquals(p.second, getVarType(informedFalse, p.first));"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,523,private Node createNull() {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,524,Node n = new Node(Token.NULL);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,525,n.setJSType(NULL_TYPE);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,526,return n;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,529,private Node createNumber(int n) {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,530,Node number = createUntypedNumber(n);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,531,number.setJSType(NUMBER_TYPE);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,532,return number;
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,535,private Node createUntypedNumber(int n) {
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,536,return Node.newNumber(n);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,539,"private JSType getVarType(FlowScope scope, String name) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,540,return scope.getSlot(name).getType();
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,543,"private Node createVar(FlowScope scope, String name, JSType type) {"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,544,"Node n = Node.newString(Token.NAME, name);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,545,"functionScope.declare(name, n, null, null);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,546,"((LinkedFlowScope) scope).inferSlotType(name, type);"
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,547,n.setJSType(type);
True,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,548,return n;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,2,* Copyright 2009 Google Inc.
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,19,public class StrictModeCheckTest extends CompilerTestCase {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,20,"private static final String EXTERNS = ""var arguments; function eval(str) {}"";"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,22,private boolean noVarCheck;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,23,private boolean noCajaChecks;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,25,public StrictModeCheckTest() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,26,super(EXTERNS);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,29,@Override
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,30,protected void setUp() throws Exception {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,31,super.setUp();
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,32,noVarCheck = false;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,33,noCajaChecks = false;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,36,@Override
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,37,protected CompilerPass getProcessor(Compiler compiler) {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,38,"return new StrictModeCheck(compiler, noVarCheck, noCajaChecks);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,41,@Override
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,42,protected int getNumRepetitions() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,43,return 1;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,46,public void testWith() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,47,"test(""var a; function foo(obj) { with (obj) { a = 3; }}"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,48,StrictModeCheck.WITH_DISALLOWED);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,51,public void testEval() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,52,"test(""function foo() { eval('a'); }"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,53,StrictModeCheck.EVAL_USE);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,56,public void testEval2() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,57,"test(""function foo(eval) {}"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,58,StrictModeCheck.EVAL_DECLARATION);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,61,public void testEval3() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,62,"testSame(""function foo() {} foo.eval = 3;"");"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,65,public void testEval4() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,66,"test(""function foo() { var eval = 3; }"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,67,StrictModeCheck.EVAL_DECLARATION);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,70,public void testEval5() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,71,"test(""function eval() {}"", null, StrictModeCheck.EVAL_DECLARATION);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,74,public void testEval6() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,75,"test(""try {} catch (eval) {}"", null, StrictModeCheck.EVAL_DECLARATION);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,78,public void testEval7() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,79,"testSame(""var o = {eval: 3};"");"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,82,public void testEval8() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,83,"testSame(""var a; eval: while (true) { a = 3; }"");"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,86,public void testUnknownVariable() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,87,"test(""function foo(a) { a = b; }"", null, StrictModeCheck.UNKNOWN_VARIABLE);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,90,public void testUnknownVariable2() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,91,"test(""a: while (true) { a = 3; }"", null, StrictModeCheck.UNKNOWN_VARIABLE);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,94,public void testUnknownVariable3() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,95,"testSame(""try {} catch (ex) { ex = 3; }"");"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,98,public void testArguments() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,99,"test(""function foo(arguments) {}"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,100,StrictModeCheck.ARGUMENTS_DECLARATION);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,103,public void testArguments2() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,104,"test(""function foo() { var arguments = 3; }"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,105,StrictModeCheck.ARGUMENTS_DECLARATION);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,108,public void testArguments3() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,109,"test(""function arguments() {}"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,110,StrictModeCheck.ARGUMENTS_DECLARATION);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,113,public void testArguments4() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,114,"test(""try {} catch (arguments) {}"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,115,StrictModeCheck.ARGUMENTS_DECLARATION);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,118,public void testArguments5() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,119,"testSame(""var o = {arguments: 3};"");"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,122,public void testEvalAssignment() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,123,noCajaChecks = true;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,124,"test(""function foo() { eval = []; }"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,125,StrictModeCheck.EVAL_ASSIGNMENT);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,128,public void testEvalAssignment2() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,129,"test(""function foo() { eval = []; }"", null, StrictModeCheck.EVAL_USE);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,132,public void testAssignToArguments() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,133,"test(""function foo() { arguments = []; }"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,134,StrictModeCheck.ARGUMENTS_ASSIGNMENT);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,137,public void testDeleteVar() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,138,"test(""var a; delete a"", null, StrictModeCheck.DELETE_VARIABLE);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,141,public void testDeleteFunction() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,142,"test(""function a() {} delete a"", null, StrictModeCheck.DELETE_VARIABLE);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,145,public void testDeleteArgument() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,146,"test(""function b(a) { delete a; }"", null, StrictModeCheck.DELETE_VARIABLE);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,149,public void testDeleteProperty() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,150,"testSame(""function f(obj) { delete obj.a; }"");"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,153,public void testIllegalName() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,154,"test(""var a__ = 3;"", null, StrictModeCheck.ILLEGAL_NAME);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,157,public void testIllegalName2() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,158,"test(""function a__() {}"", null, StrictModeCheck.ILLEGAL_NAME);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,161,public void testIllegalName3() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,162,"test(""function f(a__) {}"", null, StrictModeCheck.ILLEGAL_NAME);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,165,public void testIllegalName4() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,166,"test(""try {} catch (a__) {}"", null, StrictModeCheck.ILLEGAL_NAME);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,169,public void testIllegalName5() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,170,noVarCheck = true;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,171,"test(""var a = b__;"", null, StrictModeCheck.ILLEGAL_NAME);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,174,public void testIllegalName6() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,175,"test(""function f(obj) { return obj.a__; }"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,176,StrictModeCheck.ILLEGAL_NAME);
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,179,public void testIllegalName7() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,180,noCajaChecks = true;
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,181,"testSame(""var a__ = 3;"");"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,184,public void testIllegalName8() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,185,"test(""var o = {a__: 3};"", null, StrictModeCheck.ILLEGAL_NAME);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,186,"test(""var o = {b: 3, a__: 4};"", null, StrictModeCheck.ILLEGAL_NAME);"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,189,public void testIllegalName9() {
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,190,"test(""a__: while (true) { var b = 3; }"", null,"
True,test/com/google/javascript/jscomp/StrictModeCheckTest.java,test/com/google/javascript/jscomp/StrictModeCheckTest.java,191,StrictModeCheck.ILLEGAL_NAME);
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,2,* Copyright 2008 Google Inc.
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,4,"* Licensed under the Apache License, Version 2.0 (the ""License"");"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,5,* you may not use this file except in compliance with the License.
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,6,* You may obtain a copy of the License at
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,8,*     http://www.apache.org/licenses/LICENSE-2.0
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,10,"* Unless required by applicable law or agreed to in writing, software"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,11,"* distributed under the License is distributed on an ""AS IS"" BASIS,"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,12,"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,13,* See the License for the specific language governing permissions and
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,14,* limitations under the License.
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,17,package com.google.javascript.jscomp;
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,19,import com.google.common.base.Charsets;
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,20,import com.google.common.collect.Maps;
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,22,import junit.framework.*;
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,24,import java.util.*;
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,25,import java.text.*;
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,28,* Tests for {@link VariableMap}.
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,32,public class VariableMapTest extends TestCase {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,34,public void testToBytes() {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,35,"VariableMap vm = new VariableMap(Maps.immutableMap(""AAA"", ""a"", ""BBB"", ""b""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,36,"String serialized = new String(vm.toBytes(), Charsets.UTF_8);"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,37,"assertTrue(serialized.endsWith(""\n""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,39,"List<String> lines = Arrays.asList(serialized.split(""\n""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,40,"assertEquals(2, lines.size());"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,41,"assertTrue(lines.contains(""AAA:a""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,42,"assertTrue(lines.contains(""BBB:b""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,45,public void testFromBytes() throws ParseException {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,46,"VariableMap vm = VariableMap.fromBytes(""AAA:a\nBBB:b\n"".getBytes());"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,47,"assertEquals(2, vm.getOriginalNameToNewNameMap().size());"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,48,"assertEquals(""a"", vm.lookupNewName(""AAA""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,49,"assertEquals(""b"", vm.lookupNewName(""BBB""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,50,"assertEquals(""AAA"", vm.lookupSourceName(""a""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,51,"assertEquals(""BBB"", vm.lookupSourceName(""b""));"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,54,public void testFromBytesComplex() throws ParseException {
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,55,"VariableMap vm = VariableMap.fromBytes(""AAA[':f']:a\n"".getBytes());"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,56,"assertEquals(1, vm.getOriginalNameToNewNameMap().size());"
True,test/com/google/javascript/jscomp/VariableMapTest.java,test/com/google/javascript/jscomp/VariableMapTest.java,57,"assertEquals(""a"", vm.lookupNewName(""AAA[':f']""));"

is_addition,old_file_path,new_file_path,line_num,content
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,412, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,413,ernaryValue rightVal = NodeUtil.getBooleanValue(right);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,414,f (rightVal != TernaryValue.UNKNOWN) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,416,/ Note: We cannot always fold when the constant is on the
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,417,"/ right, because the typed value of the expression will depend"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,418,"/ on the type of the constant on the right, even if the boolean"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,419,"/ equivalent of the value does not. Specifically, in ""a = x ||"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,420,"/ 0"", a will be numeric 0 if x is undefined (and hence is"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,421,"/ e.g. a valid array index). However, it is safe to fold"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,422,"/ e.g. ""if (x || true)"" because 'if' doesn't care if the"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,423,/ expression is 'true' or '3'.
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,424,nt pt = parent.getType();
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,425,f (pt == Token.IF || pt == Token.WHILE || pt == Token.DO ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,426,pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,427,pt == Token.HOOK && parent.getFirstChild() == n)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,428,oolean rval = rightVal.toBoolean(true);
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,430,/ (x || FALSE) => x
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,431,/ (x && TRUE) => x
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,432,f (type == Token.OR && !rval ||
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,433,ype == Token.AND && rval) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,434,esult = left;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,435, else {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,436,/ If x has no side-effects:
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,437,/   (x || TRUE) => TRUE
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,438,/   (x && FALSE) => FALSE
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,439,f (!mayHaveSideEffects(left)) {
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,440,esult = right;
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,447,"/ Note: The parser parses 'x && FALSE && y' as 'x && (FALSE && y)', so"
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,448,/ there is not much need to worry about const values on left's
False,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,449,/ right child.
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,414,// Note: Right hand side folding is handled by
True,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,src/com/google/javascript/jscomp/PeepholeFoldConstants.java,415,// PeepholeSubstituteAlternateSyntax#tryMinimizeCondition
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,64,tryMinimizeCondition(node.getFirstChild());
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,670, = newRoot; // continue from here.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,673,"/ The child has moved up, to minimize it recurse."
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,675,eturn tryMinimizeCondition(n);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,672,"// No need to traverse, tryMinimizeCondition is called on the"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,673,// NOT children are handled below.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,674,return newRoot;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,681,f (leftParent.getType() != Token.NOT
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,682,| rightParent.getType() != Token.NOT) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,683,/ No NOTs to elminate.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,684,reak;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,680,if (leftParent.getType() == Token.NOT
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,681,&& rightParent.getType() == Token.NOT) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,682,Node left = leftParent.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,683,Node right = rightParent.removeFirstChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,685,int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,686,"Node newRoot = new Node(newOp, left, right);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,687,"parent.replaceChild(n, newRoot);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,688,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,689,"// No need to traverse, tryMinimizeCondition is called on the"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,690,// AND and OR children below.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,691,return newRoot;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,686,ode left = leftParent.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,687,ode right = rightParent.removeFirstChild();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,689,nt newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,690,"ode newRoot = new Node(newOp, left, right);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,691,"arent.replaceChild(n, newRoot);"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,692, = newRoot; // continue from here.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,693,eportCodeChange();
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,695,"/ Unlike the NOT case above, we know that AND and OR are"
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,696,/ valid root to check minimize so just break out and check
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,697,/ the children.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,701,reak;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,696,"// No need to traverse, tryMinimizeCondition is called on the NOT"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,697,// children in the general case in the main post-order traversal.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,698,return n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,704,ase Token.AND:
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,705,/ check the children.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,706,reak;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,701,case Token.AND: {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,702,Node left = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,703,Node right = n.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,705,// Because the expression is in a boolean context minimize
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,706,"// the children, this can't be done in the general case."
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,707,left = tryMinimizeCondition(left);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,708,right = tryMinimizeCondition(right);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,710,// Remove useless conditionals
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,711,// Handle four cases:
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,712,//   x || false --> x
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,713,//   x || true  --> true
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,714,//   x && true --> x
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,715,//   x && false  --> false
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,716,TernaryValue rightVal = NodeUtil.getBooleanValue(right);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,717,if (NodeUtil.getBooleanValue(right) != TernaryValue.UNKNOWN) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,718,int type = n.getType();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,719,Node replacement = null;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,720,boolean rval = rightVal.toBoolean(true);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,722,// (x || FALSE) => x
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,723,// (x && TRUE) => x
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,724,if (type == Token.OR && !rval ||
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,725,type == Token.AND && rval) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,726,replacement = left;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,727,} else if (!mayHaveSideEffects(left)) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,728,replacement = right;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,731,if (replacement != null) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,732,n.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,733,"parent.replaceChild(n, replacement);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,734,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,735,return replacement;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,738,return n;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,741,case Token.HOOK: {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,742,Node condition = n.getFirstChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,743,Node trueNode = n.getFirstChild().getNext();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,744,Node falseNode = n.getLastChild();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,746,// Because the expression is in a boolean context minimize
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,747,"// the result children, this can't be done in the general case."
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,748,// The condition is handled in the general case in #optimizeSubtree
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,749,trueNode = tryMinimizeCondition(trueNode);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,750,falseNode = tryMinimizeCondition(falseNode);
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,752,// Handle four cases:
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,753,//   x ? true : false --> x
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,754,//   x ? false : true --> !x
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,755,//   x ? true : y     --> x || y
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,756,//   x ? y : false    --> x && y
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,757,Node replacement = null;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,758,if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,759,&& NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,760,"// Remove useless conditionals, keep the condition"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,761,condition.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,762,replacement = condition;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,763,} else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.FALSE
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,764,&& NodeUtil.getBooleanValue(falseNode) == TernaryValue.TRUE) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,765,"// Remove useless conditionals, keep the condition"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,766,condition.detachFromParent();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,767,"replacement = new Node(Token.NOT, condition);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,768,} else if (NodeUtil.getBooleanValue(trueNode) == TernaryValue.TRUE) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,769,// Remove useless true case.
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,770,n.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,771,"replacement = new Node(Token.OR, condition, falseNode);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,772,} else if (NodeUtil.getBooleanValue(falseNode) == TernaryValue.FALSE) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,773,// Remove useless false case
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,774,n.detachChildren();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,775,"replacement = new Node(Token.AND, condition, trueNode);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,778,if (replacement != null) {
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,779,"parent.replaceChild(n, replacement);"
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,780,n = replacement;
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,781,reportCodeChange();
True,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,784,return n;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,720,or (Node c = n.getFirstChild(); c != null; ) {
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,721,ode next = c.getNext();  // c may be removed.
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,722,ryMinimizeCondition(c);
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,723, = next;
False,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java,726,eturn n;
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,188,"/ foldable, analogous to if()."
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,189,"old(""a = x || false ? b : c"", ""a=x?b:c"");"
False,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,190,"old(""a = x && true ? b : c"", ""a=x?b:c"");"
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,188,"// folded, but not here."
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,189,"foldSame(""a = x || false ? b : c"");"
True,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,190,"foldSame(""a = x && true ? b : c"");"
False,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,306,"estSame(""(a() && 1) && b()"");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,306,"test(""(a() && 1) && b()"", ""a() && b()"");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,309,public void testMinimizeExprCondition() {
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,310,"fold(""(x || true) && y()"", ""y()"");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,311,"fold(""(x || false) && y()"", ""x&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,312,"fold(""(x && true) && y()"", ""x && y()"");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,313,"fold(""(x && false) && y()"", """");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,314,"fold(""a = x || false ? b : c"", ""a=x?b:c"");"
True,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,test/com/google/javascript/jscomp/PeepholeIntegrationTest.java,315,"fold(""do {x()} while((x && false) && y())"", ""{x()}"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,264,// NOT forces a boolean context
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,265,"fold(""x = !(y() && true)"", ""x = !y()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,266,// This will be further optimized by PeepholeFoldConstants.
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,267,"fold(""x = !true"", ""x = !1"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,418,public void testMinimizeExprCondition() {
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,419,"fold(""(x ? true : false) && y()"", ""x&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,420,"fold(""(x ? false : true) && y()"", ""(!x)&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,421,"fold(""(x ? true : y) && y()"", ""(x || y)&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,422,"fold(""(x ? y : false) && y()"", ""(x && y)&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,423,"fold(""(x && true) && y()"", ""x && y()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,424,"fold(""(x && false) && y()"", ""0&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,425,"fold(""(x || true) && y()"", ""1&&y()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,426,"fold(""(x || false) && y()"", ""x&&y()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,428,"oldSame(""for(!!true;;) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,444,"fold(""for(!!true;;) foo()"", ""for(!!1;;) foo()"");"
False,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,437,"oldSame(""for(a in !!true) foo()"");"
True,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,453,"fold(""for(a in !!true) foo()"", ""for(a in !!1) foo()"");"

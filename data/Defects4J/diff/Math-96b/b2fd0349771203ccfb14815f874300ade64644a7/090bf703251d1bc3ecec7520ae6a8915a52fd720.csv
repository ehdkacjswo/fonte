is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,148,ublic synchronized void addElementRolling(double value) {
False,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,149,uper.addElementRolling(value);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,148,public synchronized double addElementRolling(double value) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,149,double discarded = super.addElementRolling(value);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,154,return discarded;
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,5,* reserved.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,9,* are met:
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,17,*    distribution.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,56,import java.util.NoSuchElementException;
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,59,* Provides an interface to implemntations which function as an array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,60,* of double primitives.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,62,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,64,public interface DoubleArray {
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,67,* Returns the number of elements currently in the array.  Please note
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,68,* that this is different from the length of the internal storage array.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,69,* @return number of elements
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,71,public abstract int getNumElements();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,74,* Returns the element at the specified index
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,76,* @param index index to fetch a value from
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,77,* @return value stored at the specified index
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,79,public abstract double getElement(int index) throws NoSuchElementException;
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,82,* Sets the element at the specified index.  This method will expand the internal storage array to
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,83,* accomodate the insertion of a value at an index beyond the current capacity.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,84,* @param index index to store a value in
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,85,* @param value value to store at the specified index
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,87,"public abstract void setElement(int index, double value);"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,90,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,92,* @return value to be added to end of array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,94,public abstract void addElement(double value);
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,97,* Adds an element and moves the window of elements up one.  This
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,98,"* has the effect of a FIFO.  when you ""roll"" the array an element is removed"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,99,* from the array.  The return value of this function is the discarded double.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,101,"* @return the value which has been discarded or ""pushed"" out of the array"
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,102,* 	  by this rolling insert.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,104,public abstract double addElementRolling(double value);
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,107,* Returns a double[] of elements
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,109,public abstract double[] getElements();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,112,* Clear the double array
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,114,public abstract void clear();
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,117,* Discards values from the front of the list.  This function removes n elements from
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,118,* the front of the array.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,120,* @param i number of elements to discard from the front of the array.
True,src/java/org/apache/commons/math/DoubleArray.java,src/java/org/apache/commons/math/DoubleArray.java,122,public abstract void discardFrontElements(int i);
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,64,ublic class ExpandableDoubleArray implements Serializable {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,64,"public class ExpandableDoubleArray implements Serializable, DoubleArray {"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,293, has the effect of a FIFO
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,293,"* has the effect of a FIFO.  when you ""roll"" the array an element is removed"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,294,* from the array.  The return value of this function is the discarded double.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,296,"* @return the value which has been discarded or ""pushed"" out of the array"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,297,* 	  by this rolling insert.
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,295,ublic synchronized void addElementRolling(double value) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,299,public synchronized double addElementRolling(double value) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,300,double discarded = internalArray[startIndex];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,311,return discarded;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,353,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,354,* @see org.apache.commons.math.DoubleArray#getElements()
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,356,public double[] getElements() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,357,double[] elementArray = new double[numElements];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,358,"System.arraycopy(internalArray, startIndex, elementArray, 0, numElements);"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,359,return elementArray;
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,72,DA = new ContractableDoubleArray();
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,72,da = new ContractableDoubleArray();
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,80,"024, eDA.getInternalLength());"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,80,"1024, ((ExpandableDoubleArray) da).getInternalLength());"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,85,"ssertEquals( ""The length of the internal array should now be 1001, it isn't"", eDA.getInternalLength(), 1001);"
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,85,"assertEquals( ""The length of the internal array should now be 1001, it isn't"", ((ExpandableDoubleArray) da).getInternalLength(), 1001);"
False,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,91,DA.getInternalLength() < ((int) 6 * 2.5) );
True,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,src/test/org/apache/commons/math/ContractableDoubleArrayTest.java,91,((ExpandableDoubleArray) da).getInternalLength() < ((int) 6 * 2.5) );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,65,rotected ExpandableDoubleArray eDA = null;
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,65,protected DoubleArray da = null;
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,78,DA.addElement( i );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,78,da.addElement( i );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,82,"000, eDA.getNumElements() );"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,82,"1000, da.getNumElements() );"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,86,"6.0, eDA.getElement(56), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,86,"56.0, da.getElement(56), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,94,DA.addElement(2.0);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,95,DA.addElement(4.0);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,96,DA.addElement(6.0);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,97,ouble[] testArray = eDA.getValues();
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,94,da.addElement(2.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,95,da.addElement(4.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,96,da.addElement(6.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,97,double[] testArray = da.getElements();
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,99,or( int i = 0; i < eDA.getNumElements(); i++) {
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,99,for( int i = 0; i < da.getNumElements(); i++) {
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,109,DA.addElement(2.0);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,110,DA.addElement(4.0);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,111,DA.addElement(6.0);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,112,"DA.setElement(1, 3.0);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,109,da.addElement(2.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,110,da.addElement(4.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,111,da.addElement(6.0);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,112,"da.setElement(1, 3.0);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,115,"DA.setElement(1000, 3.4);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,115,"da.setElement(1000, 3.4);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,117,"ssertEquals( ""The number of elements should now be 1001, it isn't"", eDA.getNumElements(), 1001);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,117,"assertEquals( ""The number of elements should now be 1001, it isn't"", da.getNumElements(), 1001);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,120,"DA.getElement( 760 ), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,120,"da.getElement( 760 ), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,122,"ssertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, eDA.getElement(1000), Double.MIN_VALUE );"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,123,"ssertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, eDA.getElement(0), Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,122,"assertEquals( ""The 1000th index should be 3.4, it isn't"", 3.4, da.getElement(1000), Double.MIN_VALUE );"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,123,"assertEquals( ""The 0th index should be 2.0, it isn't"", 2.0, da.getElement(0), Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,128,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,129,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,130,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,131,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,132,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,133,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,134,"ssertEquals( ""Number of elements should equal 6"", eDA.getNumElements(), 6);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,128,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,129,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,130,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,131,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,132,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,133,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,134,"assertEquals( ""Number of elements should equal 6"", da.getNumElements(), 6);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,136,DA.setNumElements( 3 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,137,"ssertEquals( ""Number of elements should equal 3"", eDA.getNumElements(), 3);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,136,((ExpandableDoubleArray) da).setNumElements( 3 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,137,"assertEquals( ""Number of elements should equal 3"", da.getNumElements(), 3);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,140,DA.setNumElements( -3 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,140,((ExpandableDoubleArray) da).setNumElements( -3 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,145,DA.setNumElements(1024);
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,146,"ssertEquals( ""Number of elements should now be 1024"", eDA.getNumElements(), 1024);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,147,"ssertEquals( ""Element 453 should be a default double"", eDA.getElement( 453 ), 0.0, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,145,((ExpandableDoubleArray) da).setNumElements(1024);
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,146,"assertEquals( ""Number of elements should now be 1024"", da.getNumElements(), 1024);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,147,"assertEquals( ""Element 453 should be a default double"", da.getElement( 453 ), 0.0, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,152,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,153,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,154,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,155,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,156,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,157,DA.addElement( 1.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,158,DA.addElementRolling( 2.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,152,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,153,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,154,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,155,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,156,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,157,da.addElement( 1.0 );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,158,da.addElementRolling( 2.0 );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,160,"ssertEquals( ""There should be 6 elements in the eda"", eDA.getNumElements(), 6);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,161,"ssertEquals( ""The last element should be 2.0"", eDA.getElement( eDA.getNumElements() -1 ), 2.0, Double.MIN_VALUE);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,160,"assertEquals( ""There should be 6 elements in the eda"", da.getNumElements(), 6);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,161,"assertEquals( ""The last element should be 2.0"", da.getElement( da.getNumElements() -1 ), 2.0, Double.MIN_VALUE);"
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,164,DA.addElementRolling( i );
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,164,da.addElementRolling( i );
False,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,167,"ssertEquals( ""We just inserted 1024 rolling elements, num elements should still be 6"", eDA.getNumElements(), 6);"
True,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,src/test/org/apache/commons/math/DoubleArrayAbstractTest.java,167,"assertEquals( ""We just inserted 1024 rolling elements, num elements should still be 6"", da.getNumElements(), 6);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,72,DA = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,72,da = new ExpandableDoubleArray();
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,79,DA = null;
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,79,da = null;
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,90,"024, eDA.getInternalLength());"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,90,"1024, ((ExpandableDoubleArray) da).getInternalLength());"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,95,"ssertEquals( ""The length of the internal array should now be 1001, it isn't"", eDA.getInternalLength(), 1001);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,95,"assertEquals( ""The length of the internal array should now be 1001, it isn't"", ((ExpandableDoubleArray) da).getInternalLength(), 1001);"
False,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,100,"ssertEquals( ""Even though there are only 6 element, internal storage should be 2048"", eDA.getInternalLength(), 2048);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,100,"assertEquals( ""Even though there are only 6 element, internal storage should be 2048"", ((ExpandableDoubleArray) da).getInternalLength(), 2048);"

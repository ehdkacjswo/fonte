is_addition,old_file_path,new_file_path,line_num,content
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,109,", 3, 1642738l);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,109,"}, 10, 1642738l);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,111,ssertTrue(count < 200);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,111,assertTrue(count > 700);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,112,assertTrue(count < 800);
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,117,"ssertEquals(3, minima.length);"
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,118,or (int i = 1; i < minima.length; ++i) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,119,f (minima[i] != null) {
False,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,120,ssertTrue(minima[i-1].cost <= minima[i].cost);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,118,"assertEquals(10, minima.length);"
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,119,assertNotNull(minima[0]);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,120,assertNull(minima[minima.length - 1]);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,121,for (int i = 0; i < minima.length; ++i) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,122,if (minima[i] == null) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,123,if ((i + 1) < minima.length) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,124,assertTrue(minima[i+1] == null);
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,126,} else {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,127,if (i > 0) {
True,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,src/test/org/apache/commons/math/optimization/NelderMeadTest.java,128,assertTrue(minima[i-1].cost <= minima[i].cost);

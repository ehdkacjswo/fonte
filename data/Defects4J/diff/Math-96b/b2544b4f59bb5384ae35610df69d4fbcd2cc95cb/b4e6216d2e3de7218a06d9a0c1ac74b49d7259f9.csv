is_addition,old_file_path,new_file_path,line_num,content
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,2,"* The Apache Software License, Version 1.1"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,4,* Copyright (c) 2003 The Apache Software Foundation.  All rights
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,5,* reserved.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,7,"* Redistribution and use in source and binary forms, with or without"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,8,"* modification, are permitted provided that the following conditions"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,9,* are met:
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,11,* 1. Redistributions of source code must retain the above copyright
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,12,"*    notice, this list of conditions and the following disclaimer."
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,14,* 2. Redistributions in binary form must reproduce the above copyright
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,15,"*    notice, this list of conditions and the following disclaimer in"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,16,*    the documentation and/or other materials provided with the
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,17,*    distribution.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,19,"* 3. The end-user documentation included with the redistribution, if"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,20,"*    any, must include the following acknowlegement:"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,21,"*       ""This product includes software developed by the"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,22,"*        Apache Software Foundation (http://www.apache.org/)."""
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,23,"*    Alternately, this acknowlegement may appear in the software itself,"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,24,*    if and wherever such third-party acknowlegements normally appear.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,26,"* 4. The names ""The Jakarta Project"", ""Commons"", and ""Apache Software"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,27,"*    Foundation"" must not be used to endorse or promote products derived"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,28,*    from this software without prior written permission. For written
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,29,"*    permission, please contact apache@apache.org."
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,31,"* 5. Products derived from this software may not be called ""Apache"""
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,32,"*    nor may ""Apache"" appear in their names without prior written"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,33,*    permission of the Apache Software Foundation.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,35,* THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,36,"* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,37,* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,38,* DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,39,"* ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,40,"* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,41,"* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,42,"* USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,43,"* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,44,* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,45,"* OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,46,* SUCH DAMAGE.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,49,* This software consists of voluntary contributions made by many
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,50,* individuals on behalf of the Apache Software Foundation.  For more
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,51,"* information on the Apache Software Foundation, please see"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,52,* <http://www.apache.org/>.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,54,package org.apache.commons.math;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,56,import java.io.Serializable;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,59,* An array of double primitives which can expand as needed.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,61,"* @author <a href=""mailto:tobrien@apache.org"">Tim O'Brien</a>"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,63,public class ContractableDoubleArray extends ExpandableDoubleArray implements Serializable {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,65,// The contraction criteria is related to the expansion factor.  Since this array is allowed to contract
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,67,protected float contractionCriteria = 2.5f;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,70,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,71,"* default initial capactiy of 16, an expansion factor of 2.00, and a contractionCriteria of 2.5"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,73,public ContractableDoubleArray() {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,74,super();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,78,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,79,"* specified initial capacity, the defult expansion factor of 2.00, and a contractionCriteria of 2.5"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,81,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,83,public ContractableDoubleArray(int initialCapacity) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,84,super( initialCapacity );
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,88,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,89,"* specificed initial capacity and expand factor, with a contractionCriteria of 2.5"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,91,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,92,* @param expansionFactor the array will be expanded based on this parameter
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,94,"public ContractableDoubleArray(int initialCapacity, float expansionFactor) {"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,95,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,96,this.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,97,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,98,"checkContractExpand(getContractionCriteria(), expansionFactor);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,102,* Create an expandable double array with the
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,103,"* specificed initial capacity, expand factor, and contractionCriteria"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,105,* @param initialCapacity The initial size of the internal storage array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,106,* @param expansionFactor the array will be expanded based on this parameter
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,108,"public ContractableDoubleArray(int initialCapacity, float expansionFactor, float contractionCriteria) {"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,109,this.contractionCriteria = contractionCriteria;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,110,this.expansionFactor = expansionFactor;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,111,this.initialCapacity = initialCapacity;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,112,internalArray = new double[initialCapacity];
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,113,"checkContractExpand(contractionCriteria, expansionFactor);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,117,* Contracts the storage array to the (size of the element set) + 1 - to avoid a zero length array.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,118,* This function also resets the startIndex to zero
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,120,public synchronized void contract() {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,121,double[] tempArray = new double[numElements + 1];
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,123,// Copy and swap - copy only the element array from the src array.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,124,"System.arraycopy(internalArray,startIndex,tempArray,0,numElements);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,125,internalArray = tempArray;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,127,// Reset the start index to zero
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,128,startIndex = 0;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,132,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,134,* @return value to be added to end of array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,136,public synchronized void addElement(double value) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,137,super.addElement( value );
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,138,if( shouldContract() ) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,139,contract();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,144,* Adds an element to the end of this expandable array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,146,* @return value to be added to end of array
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,148,public synchronized void addElementRolling(double value) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,149,super.addElementRolling(value);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,150,// Check the contraction criteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,151,if( shouldContract() ) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,152,contract();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,157,* Should contract returns true if the ratio of (internal storage length) to (number of elements)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,158,"* is larger than the contractionCriteria value.  In other words, using the default value"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,159,"* of 2.5, if the internal storage array provides more than 2.5x the space needed to store"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,160,"* numElements, then this function returns true"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,162,* @return true if array satisfies the contraction criteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,164,private synchronized boolean shouldContract() {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,165,boolean shouldContract = false;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,166,if( ( internalArray.length / numElements ) > contractionCriteria ) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,167,shouldContract = true;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,169,return shouldContract;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,172,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,173,"* @see org.apache.commons.math.ExpandableDoubleArray#setElement(int, double)"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,175,"public synchronized void setElement(int index, double value) {"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,176,"super.setElement(index, value);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,177,if( shouldContract() ) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,178,contract();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,182,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,183,* @see org.apache.commons.math.ExpandableDoubleArray#setExpansionFactor(float)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,185,public void setExpansionFactor(float expansionFactor) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,186,"checkContractExpand(getContractionCriteria(), expansionFactor);"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,187,super.setExpansionFactor(expansionFactor);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,190,/* (non-Javadoc)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,191,* @see org.apache.commons.math.ExpandableDoubleArray#setStartIndex(int)
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,193,public synchronized void setStartIndex(int i) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,194,super.setStartIndex(i);
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,195,if( shouldContract() ) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,196,contract();
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,201,* The contraction criteria defines when the internal array will contract to store only the
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,202,* number of elements in the element array.  This contractionCriteria gaurantees that
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,203,* the internal storage array will never exceed this factor more than the space needed
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,204,* to store numElements.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,206,* @return the contraction criteria used to reclaim memory when array is empty
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,208,public float getContractionCriteria() {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,209,return contractionCriteria;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,213,* Sets the contraction criteria for this ExpandContractDoubleArray.
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,215,* @param new contraction criteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,217,public void setContractionCriteria(float contractionCriteria) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,218,"checkContractExpand( contractionCriteria, getExpansionFactor() );"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,220,if( contractionCriteria <= 1.0 ) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,221,"throw new IllegalArgumentException( ""The contraction criteria must be a number larger than"" +"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,226,this.contractionCriteria = contractionCriteria;
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,230,* Checks the expansion factor and the contraction criteria and throws an IllegalArgumentException
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,231,* if the contractionCriteria is less than the expansionCriteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,233,* @param expansionFactor
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,234,* @param contractionCriteria
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,236,"public void checkContractExpand( float contractionCritera, float expansionFactor ) {"
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,238,if( contractionCritera < expansionFactor ) {
True,src/java/org/apache/commons/math/ContractableDoubleArray.java,src/java/org/apache/commons/math/ContractableDoubleArray.java,239,"throw new IllegalArgumentException( ""Contraction criteria can never be smaller than "" +"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,67,rivate double[] internalArray;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,67,protected double[] internalArray;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,70,rivate int numElements = 0;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,70,protected int numElements = 0;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,72,// Keeps track of a starting index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,73,protected int startIndex = 0;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,75,rivate int initialCapacity = 16;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,78,protected int initialCapacity = 16;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,79,rivate float expansionFactor = 2.0f;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,82,protected float expansionFactor = 2.0f;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,181,* This function allows you to control the number of elements contained in this
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,182,"* array, and can be used to ""throw"" out the last n values in an array.  This"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,183,* feature is mainly targetted at the subclasses of this array class.  Note
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,184,* that this function will also expand the internal array as needed.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,186,* @param a new number of elements
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,188,public synchronized void setNumElements(int i) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,190,// If index is negative thrown an error
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,191,if( i <  0 ) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,192,"throw new IllegalArgumentException( ""Number of elements must be zero or a positive integer"");"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,195,"// Test the new num elements, check to see if the array needs to be expanded to"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,196,// accomodate this new number of elements
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,197,if( (startIndex + i) > internalArray.length ) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,198,expandTo( startIndex + i );
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,201,// Set the new number of elements to new value
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,202,numElements = i;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,192,alue = internalArray[index];
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,221,value = internalArray[startIndex + index];
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,195,"Elements cannot be retrieved from negative array "" + ""index"");"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,224,"""Elements cannot be retrieved from a negative array index"");"
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,212,f (index >= internalArray.length) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,213,xpandTo(index + 1);
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,241,if ( (startIndex + index) >= internalArray.length) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,242,expandTo( startIndex + (index + 1));
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,216,nternalArray[index] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,245,internalArray[startIndex + index] = value;
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,234,rivate synchronized void expand() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,263,protected synchronized void expand() {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,256,f (numElements > internalArray.length) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,285,if ( (startIndex + numElements) > internalArray.length) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,286,expand();
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,288,internalArray[startIndex + (numElements - 1)] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,292,* Adds an element and moves the window of elements up one.  This
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,293,* has the effect of a FIFO
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,295,public synchronized void addElementRolling(double value) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,296,if ( (startIndex + (numElements+1) ) > internalArray.length) {
False,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,259,nternalArray[numElements - 1] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,299,// Increment the start index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,300,startIndex += 1;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,302,// Add the new value
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,303,internalArray[startIndex + (numElements -1)] = value;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,327,* Returns the starting index from the internal array.  This value should remain at
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,328,* zero in this implementation of ExpandableDoubleArray.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,330,"* @return the starting Index in the internal storage array, in this class it is always zero."
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,332,public int getStartIndex() {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,333,return startIndex;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,337,"* Sets the starting index of the element array in the internal array, and subtracts the difference"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,338,* between the original startIndex and the new startIndex from the number of elements.   This
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,339,* method should be used with care.
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,341,* @param Index relative to the internal array from which to start the element array
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,343,public synchronized void setStartIndex(int i) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,345,if( i > (startIndex + numElements) ) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,346,"throw new IllegalArgumentException( ""Cannot start the element array outside of the "" +"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,348,} else if( i < 0 ) {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,349,"throw new IllegalArgumentException( ""The starting index cannot be set to a negative index"");"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,350,} else {
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,352,// Calculat the difference between the original start index and the current start index
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,353,int difference = i - startIndex;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,355,"// ""Subtract"" this difference from numElements - this works both ways.  If the"
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,356,// new start index is lower than the current start index then numElements is
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,357,// incremenet by that differen
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,358,numElements -= difference;
True,src/java/org/apache/commons/math/ExpandableDoubleArray.java,src/java/org/apache/commons/math/ExpandableDoubleArray.java,360,startIndex = i;
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,183,public void testSetNumberOfElements() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,185,ExpandableDoubleArray eDA = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,186,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,187,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,188,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,189,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,190,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,191,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,192,"assertTrue( ""Number of elements should equal 6"", eDA.getNumElements() == 6);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,194,eDA.setNumElements( 3 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,195,"assertTrue( ""Number of elements should equal 3"", eDA.getNumElements() == 3);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,197,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,198,eDA.setNumElements( -3 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,199,"fail( ""Setting number of elements to negative should've thrown an exception"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,200,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,203,eDA.setNumElements(1024);
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,204,"assertTrue( ""Number of elements should now be 1024"", eDA.getNumElements() == 1024);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,205,"assertTrue( ""Element 453 should be a default double"", eDA.getElement( 453 ) == 0.0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,209,public void testAddElementRolling() {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,211,ExpandableDoubleArray eDA = new ExpandableDoubleArray();
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,213,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,214,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,215,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,216,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,217,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,218,eDA.addElement( 1.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,219,eDA.addElementRolling( 2.0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,221,"assertTrue( ""There should be 6 elements in the eda"", eDA.getNumElements() == 6);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,222,"assertTrue( ""The last element should be 2.0"", eDA.getElement( eDA.getNumElements() -1 ) == 2.0);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,224,for( int i = 0; i  < 1024; i++ ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,225,eDA.addElementRolling( i );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,228,"assertTrue( ""We just inserted 1024 rolling elements, num elements should still be 6"", eDA.getNumElements() == 6);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,229,"assertTrue( ""Even though there are only 6 element, internal storage should be 2048"", eDA.getInternalLength() == 2048);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,230,"assertEquals( ""The start index should be 1025"", 1025, eDA.getStartIndex());"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,232,eDA.setStartIndex( 0 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,234,"assertEquals( ""There shoud now be 1031 elements in this array"", 1031, eDA.getNumElements(), 0.001);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,235,"assertEquals( ""The first element should be 1.0"",1.0,  eDA.getElement(0), 0.001);"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,237,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,238,eDA.setStartIndex( 100000 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,239,"fail( ""TRying to set the start index outside of the current array should have caused an error"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,240,} catch( IllegalArgumentException iae ) {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,243,try {
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,244,eDA.setStartIndex( -1 );
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,245,"fail( ""TRying to set the start index to a negative number should have caused an error"");"
True,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,src/test/org/apache/commons/math/ExpandableDoubleArrayTest.java,246,} catch( IllegalArgumentException iae ) {
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,57,mport java.util.Collection;
False,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,68, @version $Revision: 1.1 $ $Date: 2003/05/15 06:33:19 $
True,src/test/org/apache/commons/math/ListUnivariateImplTest.java,src/test/org/apache/commons/math/ListUnivariateImplTest.java,67,* @version $Revision: 1.2 $ $Date: 2003/05/15 15:38:48 $

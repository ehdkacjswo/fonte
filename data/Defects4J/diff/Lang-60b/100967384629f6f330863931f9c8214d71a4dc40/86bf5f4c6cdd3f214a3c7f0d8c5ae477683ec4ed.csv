is_addition,old_file_path,new_file_path,line_num,content
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,85," @version $Id: MethodUtils.java,v 1.5 2002/11/20 21:45:47 rdonkin Exp $"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,85,"* @version $Id: MethodUtils.java,v 1.6 2002/11/20 22:31:40 rdonkin Exp $"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,165,"eflectionUtils.isCompatable(paramTypes, methods[i].getParameterTypes())) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,165,"ReflectionUtils.isCompatible(paramTypes, methods[i].getParameterTypes())) {"
False,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,573,"f (!ReflectionUtils.isCompatable(parameterTypes[n], methodsParams[n])) {"
True,src/java/org/apache/commons/lang/reflect/MethodUtils.java,src/java/org/apache/commons/lang/reflect/MethodUtils.java,573,"if (!ReflectionUtils.isCompatible(parameterTypes[n], methodsParams[n])) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,72," @version $Id: ReflectionUtils.java,v 1.3 2002/11/20 21:45:47 rdonkin Exp $"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,72,"* @version $Id: ReflectionUtils.java,v 1.4 2002/11/20 22:31:40 rdonkin Exp $"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,195, Checks if the requested Class array is compatable with the specified
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,195,* Checks if the requested Class array is compatible with the specified
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,207, @return true if the parameters are compatable
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,207,* @return true if the parameters are compatible
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,209,"ublic static boolean isCompatable(Class[] requestedTypes, Class[] paramTypes) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,209,"public static boolean isCompatible(Class[] requestedTypes, Class[] paramTypes) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,220,"f (isCompatable(requestedTypes[i], paramTypes[i]) == false) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,220,"if (isCompatible(requestedTypes[i], paramTypes[i]) == false) {"
False,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,240,"ublic static boolean isCompatable(Class requestedType, Class parameterType) {"
True,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,src/java/org/apache/commons/lang/reflect/ReflectionUtils.java,240,"public static boolean isCompatible(Class requestedType, Class parameterType) {"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,209,"ssertEquals(""byte -> char"", ReflectionUtils.isCompatable(Byte.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,210,"ssertEquals(""byte -> byte"", ReflectionUtils.isCompatable(Byte.class, byte.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,211,"ssertEquals(""byte -> short"", ReflectionUtils.isCompatable(Byte.class, short.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,212,"ssertEquals(""byte -> int"", ReflectionUtils.isCompatable(Byte.class, int.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,213,"ssertEquals(""byte -> long"", ReflectionUtils.isCompatable(Byte.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,214,"ssertEquals(""byte -> float"", ReflectionUtils.isCompatable(Byte.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,215,"ssertEquals(""byte -> double"", ReflectionUtils.isCompatable(Byte.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,216,"ssertEquals(""byte -> boolean"", ReflectionUtils.isCompatable(Byte.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,209,"assertEquals(""byte -> char"", ReflectionUtils.isCompatible(Byte.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,210,"assertEquals(""byte -> byte"", ReflectionUtils.isCompatible(Byte.class, byte.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,211,"assertEquals(""byte -> short"", ReflectionUtils.isCompatible(Byte.class, short.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,212,"assertEquals(""byte -> int"", ReflectionUtils.isCompatible(Byte.class, int.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,213,"assertEquals(""byte -> long"", ReflectionUtils.isCompatible(Byte.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,214,"assertEquals(""byte -> float"", ReflectionUtils.isCompatible(Byte.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,215,"assertEquals(""byte -> double"", ReflectionUtils.isCompatible(Byte.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,216,"assertEquals(""byte -> boolean"", ReflectionUtils.isCompatible(Byte.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,219,"ssertEquals(""short -> char"", ReflectionUtils.isCompatable(Short.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,220,"ssertEquals(""short -> byte"", ReflectionUtils.isCompatable(Short.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,221,"ssertEquals(""short -> short"", ReflectionUtils.isCompatable(Short.class, short.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,222,"ssertEquals(""short -> int"", ReflectionUtils.isCompatable(Short.class, int.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,223,"ssertEquals(""short -> long"", ReflectionUtils.isCompatable(Short.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,224,"ssertEquals(""short -> float"", ReflectionUtils.isCompatable(Short.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,225,"ssertEquals(""short -> double"", ReflectionUtils.isCompatable(Short.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,226,"ssertEquals(""short -> boolean"", ReflectionUtils.isCompatable(Short.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,219,"assertEquals(""short -> char"", ReflectionUtils.isCompatible(Short.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,220,"assertEquals(""short -> byte"", ReflectionUtils.isCompatible(Short.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,221,"assertEquals(""short -> short"", ReflectionUtils.isCompatible(Short.class, short.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,222,"assertEquals(""short -> int"", ReflectionUtils.isCompatible(Short.class, int.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,223,"assertEquals(""short -> long"", ReflectionUtils.isCompatible(Short.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,224,"assertEquals(""short -> float"", ReflectionUtils.isCompatible(Short.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,225,"assertEquals(""short -> double"", ReflectionUtils.isCompatible(Short.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,226,"assertEquals(""short -> boolean"", ReflectionUtils.isCompatible(Short.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,229,"ssertEquals(""char -> char"", ReflectionUtils.isCompatable(Character.class, char.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,230,"ssertEquals(""char -> byte"", ReflectionUtils.isCompatable(Character.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,231,"ssertEquals(""char -> short"", ReflectionUtils.isCompatable(Character.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,232,"ssertEquals(""char -> int"", ReflectionUtils.isCompatable(Character.class, int.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,233,"ssertEquals(""char -> long"", ReflectionUtils.isCompatable(Character.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,234,"ssertEquals(""char -> float"", ReflectionUtils.isCompatable(Character.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,235,"ssertEquals(""char -> double"", ReflectionUtils.isCompatable(Character.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,236,"ssertEquals(""char -> boolean"", ReflectionUtils.isCompatable(Character.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,229,"assertEquals(""char -> char"", ReflectionUtils.isCompatible(Character.class, char.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,230,"assertEquals(""char -> byte"", ReflectionUtils.isCompatible(Character.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,231,"assertEquals(""char -> short"", ReflectionUtils.isCompatible(Character.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,232,"assertEquals(""char -> int"", ReflectionUtils.isCompatible(Character.class, int.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,233,"assertEquals(""char -> long"", ReflectionUtils.isCompatible(Character.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,234,"assertEquals(""char -> float"", ReflectionUtils.isCompatible(Character.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,235,"assertEquals(""char -> double"", ReflectionUtils.isCompatible(Character.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,236,"assertEquals(""char -> boolean"", ReflectionUtils.isCompatible(Character.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,239,"ssertEquals(""int -> char"", ReflectionUtils.isCompatable(Integer.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,240,"ssertEquals(""int -> byte"", ReflectionUtils.isCompatable(Integer.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,241,"ssertEquals(""int -> short"", ReflectionUtils.isCompatable(Integer.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,242,"ssertEquals(""int -> int"", ReflectionUtils.isCompatable(Integer.class, int.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,243,"ssertEquals(""int -> long"", ReflectionUtils.isCompatable(Integer.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,244,"ssertEquals(""int -> float"", ReflectionUtils.isCompatable(Integer.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,245,"ssertEquals(""int -> double"", ReflectionUtils.isCompatable(Integer.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,246,"ssertEquals(""int -> boolean"", ReflectionUtils.isCompatable(Integer.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,239,"assertEquals(""int -> char"", ReflectionUtils.isCompatible(Integer.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,240,"assertEquals(""int -> byte"", ReflectionUtils.isCompatible(Integer.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,241,"assertEquals(""int -> short"", ReflectionUtils.isCompatible(Integer.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,242,"assertEquals(""int -> int"", ReflectionUtils.isCompatible(Integer.class, int.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,243,"assertEquals(""int -> long"", ReflectionUtils.isCompatible(Integer.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,244,"assertEquals(""int -> float"", ReflectionUtils.isCompatible(Integer.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,245,"assertEquals(""int -> double"", ReflectionUtils.isCompatible(Integer.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,246,"assertEquals(""int -> boolean"", ReflectionUtils.isCompatible(Integer.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,249,"ssertEquals(""long -> char"", ReflectionUtils.isCompatable(Long.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,250,"ssertEquals(""long -> byte"", ReflectionUtils.isCompatable(Long.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,251,"ssertEquals(""long -> short"", ReflectionUtils.isCompatable(Long.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,252,"ssertEquals(""long -> int"", ReflectionUtils.isCompatable(Long.class, int.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,253,"ssertEquals(""long -> long"", ReflectionUtils.isCompatable(Long.class, long.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,254,"ssertEquals(""long -> float"", ReflectionUtils.isCompatable(Long.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,255,"ssertEquals(""long -> double"", ReflectionUtils.isCompatable(Long.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,256,"ssertEquals(""long -> boolean"", ReflectionUtils.isCompatable(Long.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,249,"assertEquals(""long -> char"", ReflectionUtils.isCompatible(Long.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,250,"assertEquals(""long -> byte"", ReflectionUtils.isCompatible(Long.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,251,"assertEquals(""long -> short"", ReflectionUtils.isCompatible(Long.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,252,"assertEquals(""long -> int"", ReflectionUtils.isCompatible(Long.class, int.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,253,"assertEquals(""long -> long"", ReflectionUtils.isCompatible(Long.class, long.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,254,"assertEquals(""long -> float"", ReflectionUtils.isCompatible(Long.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,255,"assertEquals(""long -> double"", ReflectionUtils.isCompatible(Long.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,256,"assertEquals(""long -> boolean"", ReflectionUtils.isCompatible(Long.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,259,"ssertEquals(""float -> char"", ReflectionUtils.isCompatable(Float.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,260,"ssertEquals(""float -> byte"", ReflectionUtils.isCompatable(Float.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,261,"ssertEquals(""float -> short"", ReflectionUtils.isCompatable(Float.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,262,"ssertEquals(""float -> int"", ReflectionUtils.isCompatable(Float.class, int.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,263,"ssertEquals(""float -> long"", ReflectionUtils.isCompatable(Float.class, long.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,264,"ssertEquals(""float -> float"", ReflectionUtils.isCompatable(Float.class, float.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,265,"ssertEquals(""float -> double"", ReflectionUtils.isCompatable(Float.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,266,"ssertEquals(""float -> boolean"", ReflectionUtils.isCompatable(Float.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,259,"assertEquals(""float -> char"", ReflectionUtils.isCompatible(Float.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,260,"assertEquals(""float -> byte"", ReflectionUtils.isCompatible(Float.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,261,"assertEquals(""float -> short"", ReflectionUtils.isCompatible(Float.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,262,"assertEquals(""float -> int"", ReflectionUtils.isCompatible(Float.class, int.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,263,"assertEquals(""float -> long"", ReflectionUtils.isCompatible(Float.class, long.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,264,"assertEquals(""float -> float"", ReflectionUtils.isCompatible(Float.class, float.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,265,"assertEquals(""float -> double"", ReflectionUtils.isCompatible(Float.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,266,"assertEquals(""float -> boolean"", ReflectionUtils.isCompatible(Float.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,269,"ssertEquals(""double -> char"", ReflectionUtils.isCompatable(Double.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,270,"ssertEquals(""double -> byte"", ReflectionUtils.isCompatable(Double.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,271,"ssertEquals(""double -> short"", ReflectionUtils.isCompatable(Double.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,272,"ssertEquals(""double -> int"", ReflectionUtils.isCompatable(Double.class, int.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,273,"ssertEquals(""double -> long"", ReflectionUtils.isCompatable(Double.class, long.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,274,"ssertEquals(""double -> float"", ReflectionUtils.isCompatable(Double.class, float.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,275,"ssertEquals(""double -> double"", ReflectionUtils.isCompatable(Double.class, double.class), true);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,276,"ssertEquals(""double -> boolean"", ReflectionUtils.isCompatable(Double.class, boolean.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,269,"assertEquals(""double -> char"", ReflectionUtils.isCompatible(Double.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,270,"assertEquals(""double -> byte"", ReflectionUtils.isCompatible(Double.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,271,"assertEquals(""double -> short"", ReflectionUtils.isCompatible(Double.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,272,"assertEquals(""double -> int"", ReflectionUtils.isCompatible(Double.class, int.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,273,"assertEquals(""double -> long"", ReflectionUtils.isCompatible(Double.class, long.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,274,"assertEquals(""double -> float"", ReflectionUtils.isCompatible(Double.class, float.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,275,"assertEquals(""double -> double"", ReflectionUtils.isCompatible(Double.class, double.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,276,"assertEquals(""double -> boolean"", ReflectionUtils.isCompatible(Double.class, boolean.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,279,"ssertEquals(""boolean -> char"", ReflectionUtils.isCompatable(Boolean.class, char.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,280,"ssertEquals(""boolean -> byte"", ReflectionUtils.isCompatable(Boolean.class, byte.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,281,"ssertEquals(""boolean -> short"", ReflectionUtils.isCompatable(Boolean.class, short.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,282,"ssertEquals(""boolean -> int"", ReflectionUtils.isCompatable(Boolean.class, int.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,283,"ssertEquals(""boolean -> long"", ReflectionUtils.isCompatable(Boolean.class, long.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,284,"ssertEquals(""boolean -> float"", ReflectionUtils.isCompatable(Boolean.class, float.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,285,"ssertEquals(""boolean -> double"", ReflectionUtils.isCompatable(Boolean.class, double.class), false);"
False,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,286,"ssertEquals(""boolean -> boolean"", ReflectionUtils.isCompatable(Boolean.class, boolean.class), true);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,279,"assertEquals(""boolean -> char"", ReflectionUtils.isCompatible(Boolean.class, char.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,280,"assertEquals(""boolean -> byte"", ReflectionUtils.isCompatible(Boolean.class, byte.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,281,"assertEquals(""boolean -> short"", ReflectionUtils.isCompatible(Boolean.class, short.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,282,"assertEquals(""boolean -> int"", ReflectionUtils.isCompatible(Boolean.class, int.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,283,"assertEquals(""boolean -> long"", ReflectionUtils.isCompatible(Boolean.class, long.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,284,"assertEquals(""boolean -> float"", ReflectionUtils.isCompatible(Boolean.class, float.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,285,"assertEquals(""boolean -> double"", ReflectionUtils.isCompatible(Boolean.class, double.class), false);"
True,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java,286,"assertEquals(""boolean -> boolean"", ReflectionUtils.isCompatible(Boolean.class, boolean.class), true);"
